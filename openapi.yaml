openapi: 3.1.0
info:
  version: 4.4.1
  title: eGauge WebAPI
  description: eGauge Meter API
servers:
  - url: https://{devname}.egauge.io/api
    description: The WebAPI server
    variables:
      devname:
        default: eGaugeHQ
paths:
  /auth/login:
    post:
      tags:
        - /auth
      summary: Obtain token
      operationId: authLoginPost
      description: |
        There are two ways for supplying credentials to
        obtain a token:

          1) With a Digest object in the request body, a token is
          obtained without transmitting the password.

          1) With a Password object in the request body, a token is
          obtained with a password.  This option is available only over
          a secure connection (`https://` scheme).

          We recommend using Digest-based authentication whenever possible.
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/DigestObject'
                - $ref: '#/components/schemas/PasswordObject'
      responses:
        '200':
          description: Authentication response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTObject'
  /auth/logout:
    get:
      tags:
        - /auth
      summary: Revoke token
      operationId: authLogoutGet
      description: |
        Revoke the JWT supplied as the bearer token in the Authorization
        header.
      responses:
        '200':
          description: Logout response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusObject'
  /auth/unauthorized:
    get:
      tags:
        - /auth
      summary: Validate token
      operationId: authUnauthorizedGet
      description: |
        This resource returns a 401 response unless the request contains
        an `Authorized` header with a valid JWT token.  This can be used
        to check the validity of a JWT token and, if invalid, obtain the
        realm and server nonce required to refresh the token.
      responses:
        '200':
          description: Status response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusObject'
                example: You are logged in.
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /auth/rights:
    get:
      tags:
        - /auth
      summary: Get token rights
      operationId: authRightsGet
      description: Return the list of rights associated with the token.
      responses:
        '200':
          description: Rights response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RightsObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /capture:
    get:
      tags:
        - /capture
      summary: Capture waveform data
      operationId: captureGet
      parameters:
        - name: C
          in: query
          description: The channel number to use as the trigger.
          schema:
            type: integer
            minimum: 0
        - name: M
          in: query
          description: |
            The trigger mode to use.  `any` triggers immediately, `rise`
            triggers when a rising edge crosses the trigger level,
            `fall` triggers when a falling edge crosses the trigger
            level, `gt` triggers when the trigger channel's sample value
            is greater than the trigger level, and `lt` triggers when it
            is less than the trigger level.
          schema:
            type: string
            enum:
              - any
              - rise
              - fall
              - gt
              - lt
        - name: L
          in: query
          description: The trigger level.
          schema:
            type: number
        - name: R
          in: query
          description: |
            If present, this query parameter cancels a pending capture
            and resets the state to `available`.  If a value for query
            parameter `n` is also specified, only the matching capture
            is canceled.  Otherwise, any pending capture is canceled.
          allowEmptyValue: true
          schema:
            type: boolean
        - name: T
          in: query
          description: |
            Trigger timeout in milliseconds.  After starting a capture,
            if the trigger condition is not satisfied within this
            timeout period, the capture is auto-triggered.
          schema:
            type: number
            minimum: 0
        - name: c
          in: query
          description: |
            Channel number to be captured.  This query parameter can be
            specified multiple times to capture multiple channels.  If
            not specified, all configured channels are captured by
            default.
          schema:
            type: integer
            minimum: 0
        - name: d
          in: query
          description: |
            Capture duration in seconds.  If less than or equal to 0,
            the maximum number of samples are acquired. This maximum is
            implementation dependent but, generally, a fixed size buffer
            is used to store all samples of all channels, so the more
            channels are being captured, the lower the upper bound for
            this value.  If the value is greater than this upper bound,
            it is automatically capped at that value.
          schema:
            type: number
        - name: i
          in: query
          allowEmptyValue: true
          description: |
            Return a channel info object, describing each channel that
            may be captured, its name and its physical unit.
          schema:
            type: boolean
        - name: 'n'
          in: query
          allowEmptyValue: true
          description: |
            Non-blocking operation.  If the query parameter has no value or
            an empty string value, this requests that a capture is
            initiated without waiting for the result to be available
            (asynchronous operation).  In this case, a cookie object is
            returned which contains a token.  The token can be used in
            subsequent requests to fetch the result of the capture or
            to check on its status.

            If a value is specified, it must be a token returned in an
            earlier cookie object response.  In this case, the capture
            status is reported via a progress object if it is still
            pending or a capture result object if the capture is
            complete.
          schema:
            type: integer
            minimum: 0
        - name: p
          in: query
          description: |
            Pre-trigger duration in seconds.  Specifies how many seconds
            of samples before the trigger point should be acquired.  If
            omitted, this defaults to 0 seconds of pre-trigger data.
          schema:
            type: number
        - name: t
          in: query
          description: |
            If present, this query parameter requests that the data should
            be returned as plain text rather than as JSON.
          deprecated: true
          schema:
            type: boolean
        - name: r
          in: query
          allowEmptyValue: true
          description: |
            If present, this query parameter requests that the sample
            values should be returned as raw (digital) sample values
            rather than as values converted to the channel's physical
            unit.
          schema:
            type: boolean
      responses:
        '200':
          description: Capture response.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CaptureChannelInfoObject'
                  - $ref: '#/components/schemas/CaptureCookieObject'
                  - $ref: '#/components/schemas/CaptureProgressObject'
                  - $ref: '#/components/schemas/CaptureResultObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /cmd/clear:
    post:
      tags:
        - /cmd
      summary: Clear data
      operationId: cmdClearPost
      description: |
        Clear data.  The string in the request body identifies what data
        to clear:

          * `excess`: For register values that are read from a remote
            device, it is possible that the meter may not be able to
            reach the remote device at times (e.g., due to a networking
            problem).  If the remote device provides cumulative values,
            this means that when the remote device becomes accessible
            again, the cumulative value may have increased
            significantly, which could then cause a spike in the graphed
            values for that register.  To prevent such spikes, the meter
            will instead record the jump as an *excess* and then replay
            that excess gradually over time so that the meter can catch
            up to the true value without causing a spike.  Executing
            this command clears to zero the excess of all registers.
            This will typically cause a spike in the graphed values for
            any remote registers which had a non-zero excess but, on the
            positive side, will then ensure that the cumulative
            values afterwards match those of the remote
            device(s).

            **Note** If excess keeps accumulating, it may be better to
            use the [`spiky`](#tag/configremote) option for remote
            registers.

          * `web_cache`: Clears the web server cache of compressed
            files.  Under normal circumstances, it is not necessary to
            clear this cache explicitly.  However, this command can be
            used in case the cache gets corrupted, e.g., due to a power
            cycle while the meter is in the middle of writing a cache
            file.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              enum:
                - excess
                - web_cache
      responses:
        '200':
          description: Clear response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /cmd/db:
    post:
      tags:
        - /cmd
      summary: Manipulate database
      operationId: cmdDB
      description: |
        This command supports restoring the database from a backup file,
        zeroing of all or parts of the database, as well as splitting
        the positive values of certain registers into separate
        positive-only registers.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum:
                    - restore
                    - zero
                    - split
                  description: |
                    The action to perform.  The possible values are:

                      * `restore`: Restores data from a backup file to
                        the device database.
                      * `zero`: Zeroes out one or more registers in the
                        device database.
                      * `split`: Split the positive changes of a net
                        register into a separate positive-only register.
                from:
                  description: |
                    If specified, this limits the operation to data
                    that is not older than the timestamp specified
                    here.
                  $ref: '#/components/schemas/ForeverStamp'
                to:
                  description: |
                    If specified, this limits the operation to data
                    that is not younger than the timestamp specified
                    here.
                  $ref: '#/components/schemas/ForeverStamp'
                regs:
                  type: array
                  items:
                    type: integer
                    minimum: 0
                  description: |
                    If specified, the operation is limited to the
                    registers whose [database
                    ids](#tag/configregisterphysicalregdid) appear in
                    this list.
                data:
                  type: string
                  description: |
                    This member is required for action `restore`. It
                    contains the binary backup data to be restored,
                    encoded in
                    [base64](https://en.wikipedia.org/wiki/Base64). A
                    device may reject a restore request if this member
                    is larger than 2 MiB.  It may therefore be necessary
                    to split up a large backup file into multiple
                    smaller chunks that are then restored one after the
                    other.
                more_chunks:
                  type: boolean
                  description: |
                    This is used only for `restore` operations.  It
                    indicates whether a the backup data has been
                    split up into multiple chunks and the current chunk
                    is to be follow by the next older, adjacent chunk.
                    Setting this flag is not required, but doing so can
                    greatly speed up a restore operation.  On the other
                    hand, setting this flag to `true` without following
                    it up with the next older adjacent chunk can leave
                    the database in a corrupted state, with large spikes
                    at the beginning of the current chunk.
              required:
                - action
      responses:
        '200':
          description: DB response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /cmd/factory-restore:
    post:
      tags:
        - /cmd
      summary: Restore factory settings.
      operationId: cmdFactoryRestore
      description: |
        Restore the factory settings and reboot the meter.

        **Warning** All existing data and settings will be lost.
      responses:
        '200':
          description: Restore factory settings response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /cmd/reboot:
    post:
      tags:
        - /cmd
      summary: Reboot the meter.
      operationId: cmdReboot
      description: |
        Initiate a reboot of the meter. The actual reboot command is
        delayed by one second to increase the likelihood that the
        reply to this request can be received by the client before the
        meter shuts down.

        Once initiated, the meter will be unavailable for a while
        (typically, 20 to 60 seconds). If the network configuration of
        the meter was changed, the reboot may cause the meter to not
        become available again at the old network address. Thus, the
        client should check for such changes before initiating the
        reboot and take appropriate action if the network
        configuration did change.
      responses:
        '200':
          description: Set time response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /cmd/set-time:
    post:
      tags:
        - /cmd
      summary: Set date and time.
      operationId: cmdSetTime
      description: |
        Optionally set the date/time of the meter and restart the NTP
        and/or the PTP services, if configured.
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ForeverStamp'
                - type: 'null'
                  description: |
                    Do not set the date/time.  Only restart NTP and/or PTP,
                    if configured.
      responses:
        '200':
          description: Set time response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /cmd/update:
    post:
      tags:
        - /cmd
      summary: Update the meter.
      operationId: cmdUpdate
      description: |
        Update the meter firmware or kernel.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum:
                    - list
                    - install
                  description: |
                    The action to perform. The value `list` requests
                    that the latest available version should be returned
                    as a version object response. The value `install`
                    requests that the kernel or firmware should be
                    updated and a token object response should be returned.
                target:
                  type: string
                  enum:
                    - fw
                    - kernel
                  description: |
                    The target of the action. A value of `fw`
                    indicates that the meter firmware is the target of
                    the action, a value of `kernel` indicates that the
                    kernel is the target.
                branch:
                  type: string
                  description: |
                    The release branch to install from or to list the
                    available version for. If left unspecified, this
                    defaults to the branch the currently running
                    firmware was installed from.  An empty string refers
                    to the default release branch.
                force:
                  type: boolean
                  description: |
                    If `true`, the firmware/kernel is installed even
                    if the version to be installed does not appear to
                    be newer than the currently installed version.
                version:
                  type: string
                  example: 4.5
                  description: |
                    The version to install.

                    **Note** Downgrading to an older firmware or kernel
                    may have unpredictable effects and may damage the
                    meter.
              required:
                - action
                - target
      responses:
        '200':
          description: Update response.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/VersionObject'
                  - $ref: '#/components/schemas/TokenObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /cmd/wlan:
    post:
      tags:
        - /cmd
      summary: Manage WLAN (WiFi) connection.
      operationId: cmdWLAN
      description: |
        Manage WLAN (Wi-Fi) connection.  See
        [/sys/net/wlan](#tag/sysnetwlan) to get the currently detected
        and configured WLAN networks.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum:
                    - add
                    - select
                    - forget
                  description: |
                    The action to perform.  It must be one of:

                      * `add`: Add a WLAN network by specifying its SSID,
                        whether or not it is a hidden network, and,
                        optionally, its passphrase or passkey.  If adding
                        the network succeeds, it is also selected as the
                        currently active one.
                      * `select`: Select a network as the currently active one.
                      * `forget`: Forget the information associated with
                        a network.
                hex:
                  type: boolean
                  description: |
                    Must be set to `true` if member `key` is a
                    hexadecimal key rather than a passphrase.
                hidden:
                  type: boolean
                  description: |
                    Must be set to `true` if the network to be added
                    is hidden (i.e., its SSID is not being broadcast).
                id:
                  type: integer
                  minimum: 0
                  description: |
                    The id of the network that should be selected or
                    forgotten.
                key:
                  type: string
                  example: secrets-secrets
                  description: |
                    The passphrase or hex key to use for the network
                    being added. If omitted, the newly added network
                    has key management disabled.
                ssid:
                  type: string
                  description: |
                    The name (SSID) of the network to be added.  The
                    characters in this string may be any Unicode
                    character except for ASCII newline or ASCII NUL.
              required:
                - action
      responses:
        '200':
          description: WLAN response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /ctid:
    get:
      tags:
        - /ctid
      summary: Get all CTid® information
      operationId: ctidGet
      description: |
        Read the existing (previously scanned) CTid® info of all sensor
        ports.
      responses:
        '200':
          description: CTid® information response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: array
                    items:
                      $ref: '#/components/schemas/CTidInfoObject'
                  error:
                    $ref: '#/components/schemas/ErrorString'
                example:
                  info:
                    - ts: '1678384222'
                      tid: 2
                      port: 1
                      polarity: +
                      version: 4
                      mfgid: 0
                      model: EV1000
                      sn: 80
                      k: 3
                      rsrc: 160
                      rload: 10000000
                      params:
                        scale: 2071.98706
                        offset: 0
                        delay: 116.27
                        unit: 0
                    - ts: '1668455577'
                      tid: 2008264382
                      port: 2
                      polarity: +
                      version: 2
                      mfgid: 0
                      model: ERA
                      sn: 2
                      k: 2
                      rsvd: 0
                      mfgdata: 0
                      rsrc: 176
                      rload: 10000000
                      params:
                        size: 106
                        i: 2775
                        v: 0.33333
                        a: 0.45
                        tv: 0
                        ta: 0
                        cal:
                          '1.5':
                            v: 0
                            a: 0
                          '5.0':
                            v: 0
                            a: 0
                          '15.0':
                            v: 0
                            a: 0
                          '50.0':
                            v: 0
                            a: 0
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /ctid
      summary: Replace saved CTid® info of several sensors
      operationId: ctidPut
      description: |
        Write CTid® info of the sensor ports specified in the request
        body to the meter.  This does _not_ update the CTid® info on the
        sensors themselves.

        This method is supported mainly for testing purposes.  However,
        it could also be used to fix faulty or inaccurate sensor
        information.  The written information will persist only until
        the sensor ports are scanned again, so this would only be a
        temporary fix.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                info:
                  type: array
                  items:
                    $ref: '#/components/schemas/CTidInfoObject'
      responses:
        '200':
          description: CTid® information response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /ctid/{port}:
    parameters:
      - description: |
          The port number to apply this request to.
        in: path
        name: port
        required: true
        schema:
          type: integer
          minimum: 1
    get:
      tags:
        - /ctid
      summary: Get CTid® info of a port
      operationId: ctidPortGet
      description: |
        Read the CTid® info of a sensor port or get the status of an
        operation that is in progress.

        Without a query parameter, this returns the CTid® info object of
        the most recent scan.  If the port has not been scanned or the
        scan failed, an empty object is returned instead.

        If the `tid` query parameter is specified, it must be the
        transaction id of a CTid® operation that was previously
        initiated on this port.  A status object is returned if the
        operation identified by `tid` is still in progress.  Otherwise,
        the request is handled as if `tid` had not been specified.
      parameters:
        - name: tid
          in: query
          description: |
            The transaction id of the CTid® operation to return
            information on.
          schema:
            type: integer
            minimum: 0
      responses:
        '200':
          description: CTid® information response.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CTidInfoObject'
                  - $ref: '#/components/schemas/EmptyObject'
                  - $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /ctid
      summary: Initiate CTid® operation on a port
      operationId: ctidPortPost
      description: |
        Initiate the operation specified in the request body.  EG4*xxx*
        series meters are limited to performing one CTid® operation at a
        time.  If this request is received while another operation is
        pending, an error is returned.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                op:
                  type: string
                  enum:
                    - flash
                    - scan
                  description: |
                    The operation to be initiated:

                      * `flash`: Start blinking the locator LED on the
                        sensor.

                      * `scan`: Start scanning the sensor's CTid®
                        information.  A scan typically takes one to
                        five seconds.  If the scan is successful, the
                        resulting information is stored on the meter.
                polarity:
                  type: string
                  enum:
                    - +
                    - '-'
                  description: |
                    The voltage polarity with which to initiate the
                    operation.  A plus sign (`+`) requests positive
                    polarity, a minus sign (`-`) requests negative
                    polarity.

                    For operation `scan`, positive polarity should
                    succeed unless the sensor is miswired.  Thus, it
                    is usually best to attempt scanning first with
                    positive polarity and, if that fails, retry with
                    negative polarity.

                    For operation `flash`, either polarity will cause
                    the locator LED to blink, albeit with different
                    blink frequency.  For a correctly wired sensor,
                    negative polarity should be used for blinking.  If
                    this operation is not stopped explicitly, it will
                    time out automatically after about 30 minutes.
                tid:
                  type: integer
                  minimum: 0
                  maximum: 4294967295
                  description: |
                    The transaction id to use for the operation.  This
                    should be a randomly-chosen integer that uniquely
                    identifies the operation to be initiated.  The
                    client can later check on the status of the
                    operation by passing this number as the `tid`
                    query parameter to a `GET` request on this
                    resource.
              required:
                - op
                - polarity
                - tid
      responses:
        '200':
          description: CTid® post response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /ctid
      summary: Replace saved CTid® info of the port
      operationId: ctidPortPut
      description: |
        Write CTid® info of the sensor port.  This replaces any existing
        CTid® info on the meter with the one passed in the request body.
        It does _not_ update the CTid® info on the sensor itself.

        This method is supported mainly for testing purposes.  However,
        it could also be used to fix faulty or inaccurate sensor
        information.  The written information will persist only until
        the sensor port is scanned again, so this would only be a
        temporary fix.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CTidInfoObject'
      responses:
        '200':
          description: CTid® put response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /ctid
      summary: Delete CTid® information of the port
      operationId: ctidPortDelete
      description: |
        Delete the CTid® info associated with the port from the meter.
        This also terminates any pending `scan` or `flash` operations.

        The CTid® info stored in the sensor is not affected by this
        operation.
      responses:
        '200':
          description: CTid® delete response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /ctid/stop:
    post:
      tags:
        - /ctid
      summary: Stop any pending CTid® operation
      operationId: ctidStopPost
      description: |
        Immediately stop any pending `scan` or `flash` operation.
        Generally, this should be used only after successfully
        initiating a `flash` operation as `scan` operations will stop
        automatically after a few seconds.
      responses:
        '200':
          description: CTid® stop response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /ctrl/call:
    post:
      tags:
        - /ctrl/call
      summary: Issue control call
      operationId: ctrlCallPost
      description: |
        Issue a control call to a device identified by a set of
        [device attributes](#tag/Glossary/Device-Attributes).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                attrs:
                  $ref: '#/components/schemas/DeviceAttributesWithIndexObject'
                  description: |
                    The [device
                    attributes](#tag/Glossary/Device-Attributes) that
                    identify the device on which to initiate the control
                    action.

                    In addition to the usual device attributes, `index`
                    may be specified as the first attribute.  This
                    attribute is used when the other attributes match
                    multiple devices.  Specifically, if the value of
                    `index` is _n_, then the call would be issued on the
                    device with index _n_ (with the first device having
                    an index of 0).  The default value for this
                    attribute is 0.

                    For example, if there are three devices supporting
                    the `relay` interface then
                    `{"index":1,"interface":"relay"}` would result in a
                    call to the second device.
                method:
                  type: string
                  description: |
                    The name of the control action to issue on the
                    device.  This may be either a bare method name, such
                    as `close_mask`, or a fully qualified name such as
                    `relay.close_mask`. In the former case, the method
                    is invoked on the first interface registered for
                    that device that implements a method by that name.
                    In the latter case, the method is invoked only on
                    the specified interface (`relay`).
                args:
                  type: array
                  description: |
                    The list of arguments to pass to the method.  This
                    list must have values that are compatible with the
                    arguments expected by the method.
                  items:
                    format: json
            example:
              attrs:
                mfg: egauge
                model: prm3
                sn: '00000006'
              method: relay.close_mask
              args:
                - 1
      responses:
        '200':
          description: |
            Control call response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CtrlCallResponseObject'
              example:
                result:
                  tid: 4294967360
        '401':
          description: unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /ctrl/call/{tid}:
    parameters:
      - name: tid
        in: path
        required: true
        description: |
          The transaction id of the call.
        schema:
          type: integer
          format: int54
          minimum: 0
        example: 4294967360
    get:
      tags:
        - /ctrl/call
      summary: Get call result
      operationId: ctrlCallTidGet
      description: |
        Get the result of a control call on return an error message,
        e.g., if the result is not yet available.
      responses:
        '200':
          description: Control result response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CtrlCallResultObject'
              examples:
                try_again:
                  summary: Try again error
                  value:
                    error: 'EAGAIN: Call is pending.'
                call_result:
                  summary: Call result
                  value:
                    result: 6
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /ctrl/device:
    get:
      tags:
        - /ctrl/device
      summary: Get control device info
      operationId: ctrlDeviceGet
      description: |
        Get information about some or all available control devices.
      parameters:
        - name: attrs
          in: query
          description: |
            If present, return only devices matching the specified
            attributes.  Note that special characters in the query
            parameter need to URI-encoded to form a valid URL.  For
            example, `{` needs to be encoded as `%7b` and `}` needs to
            be encoded as `%7d`.

            As a special case, attribute `interface` is considered to
            match a device if the device supports the specified
            interface.  The attribute may be specified multiple times
            to check for the presence of multiple interfaces. For
            example, the URI-encoded version of
            `attrs={"interface":"relay","interface":"modbus"}` would
            only match devices that provide both the `relay` and
            `modbus` interfaces.

            This parameter also supports the `index` attribute like
            [/ctrl/call](#tag/ctrlcall) does.
          schema:
            type: object
            patternProperties:
              /^[-_a-zA-Z0-9]*$/: null
              type: string
              description: |
                The value of the attribute.
            example: '{"interface":"relay"}'
      responses:
        '200':
          description: Device information response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CtrlDeviceResultObject'
              example:
                result:
                  - path:
                      - net.egauge.slowd
                      - USB1
                      - '1'
                    name: prm3
                    mfg: eGauge
                    model: PRM3
                    sn: '00000007'
                    prot: Modbus
                    link: serial
                    quality: '0'
                    interface:
                      - relay
                      - modbus
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /local:
    get:
      tags:
        - /local
      summary: Get local sensor values.
      operationId: localGet
      parameters:
        - name: values
          in: query
          description: |
            If present, the sensor values are returned in member
            `values` of the response.
          schema:
            type: boolean
        - name: energy
          in: query
          description: |
            If present, the calculated (real) energy values are
            returned in member `energy` of the response.
          schema:
            type: boolean
        - name: apparent
          in: query
          description: |
            If present, the calculate apparent energy values are
            returned in member `apparent` of the response.
          schema:
            type: boolean
        - name: stats
          in: query
          description: |
            If present, statistics about the internal operation of the
            meter are returned in member `stats` of the response.
          schema:
            type: boolean
        - name: rate
          in: query
          description: |
            If present, the rate metrics of each sensor are included
            in the response (members `rate`).
          schema:
            type: boolean
        - name: cumul
          in: query
          description: |
            If present, the cumulative metrics of each sensor are
            included in the response (members `cumul`).
          schema:
            type: boolean
        - name: type
          in: query
          description: |
            If present, the [type code](#tag/Glossary/Type-Codes)
            (physical unit) of each sensor is included in the response
            (members `type`).
          schema:
            type: boolean
        - name: normal
          in: query
          description: |
            If present, the normal value of each sensor is included in
            the response. For most sensor types, this is the RMS value
            of the sensor signal but for some, this may be the average
            value (e.g., for temperature sensors) or a count
            (e.g., for pulse sensors).
          schema:
            type: boolean
        - name: mean
          in: query
          description: |
            If present, the mean (average) value of each sensor is included
            in the response.
          schema:
            type: boolean
        - name: freq
          in: query
          description: |
            If present, the frequency (in hertz) of each sensor signal
            is included in the response.  It is calculated as the
            number of times the signal crosses zero per second. For
            some sensor types (e.g., temperature sensors), frequency
            is not calculated and the returned value is always zero.
          schema:
            type: boolean
        - name: env
          in: query
          description: |
            If present, this parameter specifies a comma-separated
            list of built-in environmental sensors whose measurements
            should be included in the response.  The list may contain
            the following strings (case-insensitive):

              * `ALL`: Include measurements for all built-in
                environmental sensors.

              * `Hpcb`: Include measurements for the built-in relative
                humidity sensor.  This sensor measures relative
                humidity inside the meter's enclosure. It is not
                available on all meters.

              * `Tpcb`: Include measurements for the built-in
                temperature sensor.  This sensor measures temperature
                inside the meter's enclosure, which is generally a few
                degrees celsius higher than the temperature of the air
                surrounding the meter.

            **Note** Environmental sensors have only rate metrics, no
            cumulative metrics, and only have a normal value, no mean
            or frequency.
          schema:
            type: array
            items:
              type: string
              enum:
                - ALL
                - Hpcb
                - Tpcb
        - name: l
          in: query
          description: |
            If present, this parameter specifies a comma-separated
            list of voltages whose metrics should be included in the
            response.  The following voltage names may be specified
            (case-insensitve):

              * `ALL`: Include measurements for all available line
                voltages.

              * `L1`, `L2`, or `L3`: The voltage of the named line
                input pin relative to the neutral pin.

              * `D1`, `D2`, or `D3`: The voltage of the named line
                input pin relative to a virtual neutral.  The virtual
                neutral is calculated assuming the signals at pins D1,
                D2, and D3 are of equal amplitude and are
                phase-shifted by 120° relative to each other.  If
                either of these assumptions is not true, the measured
                voltages are not be meaningful.

              * `L12`, `L23`, or `L31`: The voltage between the two
                line input pin numbers.  For example, `L12` measures
                the voltage between pins `L1` and `L2`.

              * `Ldc`: The voltage at the DC input port.

            It is also possible to specify a range of voltages by
            using a colon to separate the first and the last voltage
            to be included in the range.  For example, `L1:L3` would
            request inclusion of the measurements for `L1`, `L2`, and
            `L3`.
          schema:
            type: array
            items:
              type: string
        - name: s
          in: query
          description: |
            If present, this parameter specifies a comma-separated
            list of sensors whose metrics should be included in the
            response.  The following sensor names may be specified
            (case-insensitve):

              * `ALL`: Include measurements for all available sensors.

              * `Sn`: Include measurements for sensor `Sn` where `n`
                is a number in the range from 1 to the number of
                sensor inputs supported by the meter.

              * `Sn:Sm`: Include measurements for sensors `Sn` through
                `Sm`, where `n` and `m` are numbers in the range from
                1 to the number of sensor inputs supported by the
                meter and `n` is smaller than `m`.  For example,
                `S3:S5` would request inclusion of the measurements
                for `S3`, `S4`, and `S5`.
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Local response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /log/kernel:
    get:
      tags:
        - /log
      summary: Get kernel log
      operationId: logKernelGet
      parameters:
        - $ref: '#/components/parameters/afterParam'
      description: |
        Get the kernel log.  It has a fixed size and consists of a
        sequence of prioritized and time-stamped entries. When the log
        fills up, older entries are replaced.
      responses:
        '200':
          description: Kernel log response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KernelLogObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /log/lua/{name}:
    parameters:
      - description: |
          The name of a Lua log.  This may be one of:

            * `alertd`: The log for scripts that are executed when
            checking for and generating alerts.

            * `ctrld`: The log for control scripts.

            * `teamd`: The log for scripts executed while evaluating
            formula scripts and for calculating costs (tariff script).
        in: path
        name: name
        required: true
        schema:
          type: string
          enum:
            - alertd
            - ctrld
            - teamd
    get:
      tags:
        - /log
      summary: Get a Lua log
      operationId: logLuaNameGet
      parameters:
        - $ref: '#/components/parameters/afterParam'
      description: |
        Get a Lua log. Each log has a fixed size and consists of a
        sequence of time-stamped entries. When the log fills up, older
        entries are replaced.
      responses:
        '200':
          description: Lua log response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LuaLogObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /log/system:
    get:
      tags:
        - /log
      summary: Get system log
      operationId: logSystemGet
      description: |
        Get the system log.  It has a fixed size and consists of a
        sequence of messages. When the log fills up, older messages are
        replaced.  The size of this log can be configured
        with [/config/log/system/size](#tag/configlogsystemsize).
      responses:
        '200':
          description: System log response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemLogObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /providers/push:
    get:
      tags:
        - /providers
      summary: Get push service providers
      operationId: providersPushGet
      description: |
        Get a list of available push service providers.
      responses:
        '200':
          description: Push providers response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceProvidersObject'
              example:
                reply:
                  providers:
                    - name: Backup Service
                      control: http://backup.com/
                    - name: Cloudly
                      control: http://cloud.com/
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /providers/alert:
    get:
      tags:
        - /providers
      summary: Get alert service providers
      operationId: providersAlertGet
      description: |
        Get a list of available alert service providers.
      responses:
        '200':
          description: Alert providers response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceProvidersObject'
              example:
                reply:
                  providers:
                    - name: Alert Service
                      control: http://alert.com/
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /providers/tariff:
    get:
      tags:
        - /providers
      summary: Get tariff service providers
      operationId: providersTariffGet
      description: |
        Get a list of available tariff service providers.
      responses:
        '200':
          description: Tariff providers response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TariffProvidersObject'
              example:
                reply:
                  providers:
                    - country: Korea
                      name: KEPCO
                      tariffs: http://tariffs.com/kepco.lua
                      params:
                        - start_day
                        - taxes
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /providers/tariff/{idx}:
    get:
      tags:
        - /providers
      summary: Get list of tariffs
      operationId: providersTariffIdxGet
      parameters:
        - in: path
          name: idx
          required: true
          schema:
            type: integer
            minimum: 0
          description: |
            The index of the tariff provider (utility) whose tariff list
            to return. The index is assigned in order in which the
            services appear in `/providers/tariff`.  The first entry has
            index 0, the second has index 1, and so on.
      description: |
        Get a list of tariffs of a provider.
      responses:
        '200':
          description: Tariff list response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  tariffs:
                    type: array
                    description: |
                      The list of tariff names available from this utility.
                    items:
                      type: string
              example:
                tariffs:
                  - Residential General
                  - Medical Exemption
                  - Residential Demand
                  - C Commercial
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /register:
    get:
      tags:
        - /register
      summary: Get register data
      operationId: registerGet
      parameters:
        - name: delta
          in: query
          allowEmptyValue: true
          description: |
            If present, return the first row of data as usual and each
            subsequent row as the amount of change since the previous
            row.  This delta-encoding usually reduces the size of the
            response significantly.

            With `format=csv`, the first row is skipped and not returned
            at all.

            Note that the value of this parameter is ignored and may
            even be empty.
          schema:
            type: boolean
            example: true
        - name: demand
          in: query
          description: |
            This parameter may only be specified when output format
            JSON (the default) or CSV is selected (`format=csv`).  If
            specified, it requests that the result return the _demand_
            of the selected registers rather than their accumulated
            values.  _Demand_ is defined as the maximum average rate
            of change of the register value over a period of time
            (e.g., 15 minutes).

            The value of this parameter must be of the form
            `type;interval` where `type` is one of:


              * `roll+`: Return the most positive demand.

              * `roll-`: Return the most negative demand.

              * `roll|`: Return the absolute value of the most
              positive or most negative demand, whichever is bigger.

            `interval` is the number of seconds over which the demand
            should be calculated.  For example, `demand=roll+;900`
            would return the maximum positive rolling demand of each
            register calculated over a 900 second (15 minute) sliding
            window.

            With this parameter specified, the result returns only one
            row per demand interval.  The timestamp of each row
            indicates when the demand interval ended and the value is
            the maximum rolling demand during that interval.  With
            `format=csv`, the values are returned directly as the
            maximum demand rates.  With `format=json`, the values are
            returned as the maximum demand rates, multiplied by the
            demand interval (in seconds) and then rounded to the
            nearest integer.
          schema:
            type: string
            example: roll|;900
        - name: filename
          in: query
          description: |
            For `format=backup` and `format=csv`, this specifies the
            name of the file in which the response should be saved.
            This is indicated via a `Content-disposition` response
            header.
          schema:
            type: string
            example: data.csv
        - name: format
          in: query
          description: |
            Selects the format of the response.  This must be one of:

              * `json`: Return the response as JSON.  This is the
                default.

              * `backup`: Return the response as a backup
                file.  The response has MIME type `text/plain`.

              * `csv`: Return the response as a CSV (comma-separated values)
                file.  The response has MIME type `text/plain`.
          schema:
            type: string
            enum:
              - backup
              - csv
              - json
            example: csv
        - name: if
          in: query
          description: |
            Only return data if the specified condition is `true`.
            The string must have the form _tp_ _op_ _val_ where _tp_
            is a [named point in time](#tag/Glossary/Time-Point-Names)
            (`epoch`, `sob` or similar), _op_ is one of `==` (test for
            equality) or `!=` (test for inequality) and _val_ is a
            decimal string specifying a [Unix
            timestamp](#tag/Glossary/Unix-Timestamp).  If the
            condition is `true`, data is returned as usual.  If
            `false`, a current condition object is returned which
            contains the current value of _tp_.
          schema:
            type: string
            example: epoch==1675276020
        - name: rate
          in: query
          allowEmptyValue: true
          description: |
            If present, return the `rate` member in the `registers`
            section of the response.  The value of this member is the
            rate at which the value of the register has been changing
            most recently.

            Note that the value of this parameter is ignored and may
            even be empty.
          schema:
            type: boolean
            example: true
        - name: raw
          in: query
          allowEmptyValue: true
          description: |
            If present, return accumulated values of registers as raw
            cumulative values which start at zero when the meter
            database was created.  By default, the values are returned
            relative to the [meter epoch](#tag/configdbepoch), which
            means register values are zero at the time of the epoch.

            Note that the value of this parameter is ignored and may
            even be empty.
          schema:
            type: boolean
            example: true
        - name: reg
          in: query
          description: |
            Select a range of registers to be included in the result.
            A range can be one of:

              * `all`: All available registers are selected to be
                returned in the result.

              * `none`: No registers are selected to be returned in
                the result.

              * `n0`: Select the register with index `n0`.  The
                index of a register can be found in the `idx` member of
                the `registers` section of the response.

              * `n0:n1`: Select the registers with indices `n0`
                through `n1`.

            If the value of this parameter starts with a plus sign
            (`+`), the specified range is added to the set of
            registers to be returned.  If it starts with a minus sign
            (`-`), the specified range is removed from the set of
            registers to be returned.  If the value starts with any
            other character, the specified range establishes the set
            of registers to be returned.  Additional ranges can be
            specified by adding a plus sign followed by a range to add
            more registers or a minus sign followed by a range to
            remove registers from the selected set.

            It is also possible to specify combine `view` and `reg`
            parameters in a single request.  The parameters are
            processed in the order specified (from left-to-right) and
            update the set of selected registers incrementally.  For
            example, `view==environmentals&reg=-0:7` would select all
            registers in view `environmentals`, except those with a
            register index in the range from 0 through 7.

            Virtual registers are output only if they are selected in
            the set of registers to be returned **and** query parameter
            `virtual` is specified.
          schema:
            type: string
            example: all-0:7
        - name: time
          in: query
          description: |
            A comma-separated list of [time
            ranges](#tag/Glossary/Time-Ranges).  Only data for rows
            that fall within the specified time ranges are returned.
            Each time-range is processed independently and in the
            order specified.  That is, if overlapping time-ranges are
            specified, the same rows may be output multiple times.
          schema:
            type: string
            example: now-900:60:now,epoch
        - name: ts
          in: query
          description: |
            This query parameter is ignored unless `format=csv`.
            Otherwise, the parameter defines how timestamps are returned
            in a CSV response.  By default, such timestamps are
            converted using the device-local timezone and the format
            string `"%F %T"`, which would output July 6, 2016 4:56pm
            as `2016-07-06 16:56:00`.

            The value of this parameter must be a string of the form
            `tz;fmt` where `tz` is the timezone to use when converting
            the timestamp to a human-readable string and `fmt` is a
            format string as defined by the
            [strftime()](https://man7.org/linux/man-pages/man3/strftime.3.html)
            function.  Either `tz` or `fmt` may be empty in which case
            the respective default value is used.

            Note that the format-string typically will need to be
            percent-encoded.  In particular, each `%` character needs to
            be encoded as `%25`, for example.
          schema:
            type: string
            example: UTC;%y/%m/%d %I:%M
        - name: view
          in: query
          description: |
            Select registers to be included in the result by the [view
            name](#tag/Glossary/View-Names) specified as the value of
            this parameter.  The view name must be prefixed by one of
            characters:

              * `=`: Only select the registers matching the view name
                are returned.

              * `+`: The registers matching the view name are added to
                the set of registers to be returned.

              * `-`: The registers matching the view name are removed
                from the set of registers to be returned.
          schema:
            type: string
            example: '=environmentals'
        - name: virtual
          in: query
          description: |
            This parameter specifies that virtual register should be
            returned in the response and also selects how to return
            them.  The value of the parameter must be one of:

              * `formula`: Virtual registers are returned via the
                `formula` member in the `registers` section.  See
                [virtual register
                formulas](#tag/Glossary/Virtual-Register-Formulas) for
                details.

              * `value`: The value of virtual registers is calculated by
                the meter and then return in the `ranges` section like
                any other register value.
          schema:
            type: string
            enum:
              - value
              - formula
            example: formula
        - name: noHTTP
          in: query
          description: |
            If present, requests that the response is to be returned
            without the normal HTTP headers.  Only the body of the
            response will be returned.

            Note that the value of this parameter is ignored and may
            even be empty.
          allowEmptyValue: true
          deprecated: true
          schema:
            type: boolean
      responses:
        '200':
          description: Register response.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/RegisterResponseObject'
                  - $ref: '#/components/schemas/RegisterConditionObject'
            text/plain; charset=utf-8:
              schema:
                type: string
                example: |
                  "Date & Time","Humidity [%]"
                  "23/03/08 08:44","18.138051351"
                  "23/03/08 08:43","18.151999919"
                  "23/03/08 08:42","18.441518148"
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /store/{section}:
    parameters:
      - name: section
        in: path
        required: true
        description: |
          Name of the server-storage section.
        schema:
          type: string
          example: global
    get:
      tags:
        - /store
      summary: Get section
      operationId: storeSectionGet
      responses:
        '200':
          description: Store content response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreContentObject'
              examples:
                url_encoded:
                  summary: URL-encoded values
                  value:
                    name: global/
                    content:
                      billing/start_day: '6'
                      billing/contract_demand: '10'
                      billing/bill_contracted_demand: 'false'
                      billing/schedule: R%20Residential%20General
                      billing/surcharges: 0%2E07
                      billing/taxes: 8%2E2
                      billing/tariff_uri: https%3A%2F%2Fapi%2Eegauge%2Enet%2Fv1%2Ftariffs%2F2%2Elua
                      billing/provider: Xcel%20Colorado
                json_encoded:
                  summary: JSON-encoded values
                  value:
                    name: dash/
                    content:
                      dashCfg-default: '{"name":"default","changed":false,"dashlets":[{"tag":"flow","id":1,"cfg":{"nodes":[{"pos":[0,0],"icon":"house","reg":"use"},{"pos":[0,1],"icon":"solar","reg":"gen"},{"pos":[1,0],"icon":"battery","reg":"bat"},{"pos":[0,-1],"icon":"grid","reg":"Grid","costsMoney":true}]}}],"layouts":[{"designWidth":0,"designHeight":0,"pages":[{"locs":[{"id":1,"x":0,"y":0,"w":10,"h":10}]}]}]}'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /store
      summary: Update section
      operationId: storeSectionPut
      description: |
        Update a server-storage section according to the contents of the
        request body.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreVariableUpdates'
            example:
              test/delete_me: null
              prefs/color: cyan
      responses:
        '200':
          description: Store update response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /store
      summary: Delete an entire section
      operationId: storeSectionDelete
      description: |
        Delete a server-storage section.
      responses:
        '200':
          description: Delete store section response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /store/{section}/{variable}:
    parameters:
      - name: section
        in: path
        required: true
        description: |
          Name of the server-storage section.
        schema:
          type: string
          example: dash
      - name: variable
        in: path
        required: true
        description: |
          Name of the section variable.
        schema:
          type: string
          example: dashCfg-default
    get:
      tags:
        - /store
      summary: Get section variable
      operationId: storeSectionVarGet
      responses:
        '200':
          description: Store variable response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreContentObject'
              example:
                name: dash/dashCfg-default
                content:
                  '': '{"name":"default","changed":false,"dashlets":[{"tag":"flow","id":1,"cfg":{"nodes":[{"pos":[0,0],"icon":"house","reg":"use"},{"pos":[0,1],"icon":"solar","reg":"gen"},{"pos":[1,0],"icon":"battery","reg":"bat"},{"pos":[0,-1],"icon":"grid","reg":"Grid","costsMoney":true}]}}],"layouts":[{"designWidth":0,"designHeight":0,"pages":[{"locs":[{"id":1,"x":0,"y":0,"w":10,"h":10}]}]}]}'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /store
      summary: Update section variable
      operationId: storeSectionVarPut
      description: |
        Update a section variable according to the contents of the
        request body.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreSingleVariableUpdate'
            example:
              '': '{"name":"default","changed":false,"dashlets":[{"tag":"flow","id":1,"cfg":{"nodes":[{"pos":[0,0],"icon":"house","reg":"use"},{"pos":[0,1],"icon":"solar","reg":"gen"},{"pos":[1,0],"icon":"battery","reg":"bat"},{"pos":[0,-1],"icon":"grid","reg":"Grid","costsMoney":true}]}}],"layouts":[{"designWidth":0,"designHeight":0,"pages":[{"locs":[{"id":1,"x":0,"y":0,"w":10,"h":10}]}]}]}'
      responses:
        '200':
          description: Delete section variable response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /store
      summary: Delete a section variable
      operationId: storeSectionVarDelete
      description: |
        Delete a server-storage section.
      responses:
        '200':
          description: Delete section variable response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /store/{section}/{paragraph}/:
    parameters:
      - name: section
        in: path
        required: true
        description: |
          Name of the server-storage section.
        schema:
          type: string
          example: global
      - name: paragraph
        in: path
        required: true
        description: |
          Name of the paragraph.
        schema:
          type: string
          example: billing
    get:
      tags:
        - /store
      summary: Get paragraph
      operationId: storeParagraphGet
      responses:
        '200':
          description: Store paragraph response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreContentObject'
              example:
                name: global/billing/
                content:
                  start_day: '6'
                  contract_demand: '10'
                  bill_contracted_demand: 'false'
                  schedule: R%20Residential%20General
                  surcharges: 0%2E07
                  taxes: 8%2E2
                  tariff_uri: https%3A%2F%2Fapi%2Eegauge%2Enet%2Fv1%2Ftariffs%2F2%2Elua
                  provider: Xcel%20Colorado
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /store
      summary: Update paragraph
      operationId: storeParagraphPut
      description: |
        Update a paragraph according to the contents of the request
        body.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreVariableUpdates'
            example:
              start_day: '7'
              taxes: null
      responses:
        '200':
          description: Store update response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /store
      summary: Delete an entire paragraph
      operationId: storeParagraphDelete
      description: |
        Delete a paragraph.
      responses:
        '200':
          description: Delete paragraph response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /store/{section}/{paragraph}/{variable}:
    parameters:
      - name: section
        in: path
        required: true
        description: |
          Name of the server-storage section.
        schema:
          type: string
          example: global
      - name: paragraph
        in: path
        required: true
        description: |
          Name of the paragraph.
        schema:
          type: string
          example: billing
      - name: variable
        in: path
        required: true
        description: |
          Name of the variable.
        schema:
          type: string
          example: start_day
    get:
      tags:
        - /store
      summary: Get variable
      operationId: storeVarGet
      responses:
        '200':
          description: Store content response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreContentObject'
              example:
                name: global/billing/start_day
                content:
                  '': '6'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /store
      summary: Update variable
      operationId: storeVarPut
      description: |
        Update a variable according to the contents of the request body.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreVariableUpdates'
            example:
              '': '7'
      responses:
        '200':
          description: Store update response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /store
      summary: Delete a variable
      operationId: storeVarDelete
      description: |
        Delete a variable.
      responses:
        '200':
          description: Delete store section response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config:
    get:
      tags:
        - /config
      summary: Get /config
      operationId: config:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/config'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config
      summary: Replace /config
      operationId: config:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/config'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config
      summary: Update /config
      operationId: config:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/config'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config
      summary: Delete /config
      operationId: config:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/bacnet:
    get:
      tags:
        - /config/bacnet
      summary: Get /config/bacnet
      operationId: configBacnet:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configBacnet'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/bacnet
      summary: Replace /config/bacnet
      operationId: configBacnet:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configBacnet'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/bacnet
      summary: Update /config/bacnet
      operationId: configBacnet:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configBacnet'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/bacnet
      summary: Delete /config/bacnet
      operationId: configBacnet:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/bacnet/server:
    get:
      tags:
        - /config/bacnet/server
      summary: Get /config/bacnet/server
      operationId: configBacnetServer:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configBacnetServer'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/bacnet/server
      summary: Replace /config/bacnet/server
      operationId: configBacnetServer:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configBacnetServer'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/bacnet/server
      summary: Update /config/bacnet/server
      operationId: configBacnetServer:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configBacnetServer'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/bacnet/server
      summary: Delete /config/bacnet/server
      operationId: configBacnetServer:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/bacnet/server/bip:
    get:
      tags:
        - /config/bacnet/server/bip
      summary: Get /config/bacnet/server/bip
      operationId: configBacnetServerBip:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configBacnetServerBip'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/bacnet/server/bip
      summary: Replace /config/bacnet/server/bip
      operationId: configBacnetServerBip:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configBacnetServerBip'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/bacnet/server/bip
      summary: Update /config/bacnet/server/bip
      operationId: configBacnetServerBip:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configBacnetServerBip'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/bacnet/server/bip
      summary: Delete /config/bacnet/server/bip
      operationId: configBacnetServerBip:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/bacnet/server/bip/port:
    get:
      tags:
        - /config/bacnet/server/bip/port
      summary: Get /config/bacnet/server/bip/port
      operationId: configBacnetServerBipPort:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configBacnetServerBipPort'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/bacnet/server/bip/port
      summary: Replace /config/bacnet/server/bip/port
      operationId: configBacnetServerBipPort:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configBacnetServerBipPort'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/bacnet/server/bip/port
      summary: Update /config/bacnet/server/bip/port
      operationId: configBacnetServerBipPort:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configBacnetServerBipPort'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/bacnet/server/bip/port
      summary: Delete /config/bacnet/server/bip/port
      operationId: configBacnetServerBipPort:delete
      description: |
        Reset to 47808 (BAC0 in hex).
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/bacnet/server/enable:
    get:
      tags:
        - /config/bacnet/server/enable
      summary: Get /config/bacnet/server/enable
      operationId: configBacnetServerEnable:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configBacnetServerEnable'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/bacnet/server/enable
      summary: Replace /config/bacnet/server/enable
      operationId: configBacnetServerEnable:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configBacnetServerEnable'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/bacnet/server/enable
      summary: Update /config/bacnet/server/enable
      operationId: configBacnetServerEnable:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configBacnetServerEnable'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/bacnet/server/enable
      summary: Delete /config/bacnet/server/enable
      operationId: configBacnetServerEnable:delete
      description: |
        Disable the BACnet server.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/bacnet/server/enable/{idx}:
    parameters:
      - name: idx
        in: path
        description: |
          The index of an enabled BACnet protocol.
        required: true
        schema:
          type: integer
          minimum: 0
          maximum: 0
    get:
      tags:
        - /config/bacnet/server/enable/{idx}
      summary: Get /config/bacnet/server/enable/{idx}
      operationId: configBacnetServerEnableItem:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configBacnetServerEnableItem'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/bacnet/server/enable/{idx}
      summary: Replace /config/bacnet/server/enable/{idx}
      operationId: configBacnetServerEnableItem:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configBacnetServerEnableItem'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/bacnet/server/enable/{idx}
      summary: Update /config/bacnet/server/enable/{idx}
      operationId: configBacnetServerEnableItem:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configBacnetServerEnableItem'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/bacnet/server/enable/{idx}
      summary: Delete /config/bacnet/server/enable/{idx}
      operationId: configBacnetServerEnableItem:delete
      description: |
        Disable this protocol.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/bacnet/server/epoch-relative:
    get:
      tags:
        - /config/bacnet/server/epoch-relative
      summary: Get /config/bacnet/server/epoch-relative
      operationId: configBacnetServerEpochRelative:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configBacnetServerEpochRelative'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/bacnet/server/epoch-relative
      summary: Replace /config/bacnet/server/epoch-relative
      operationId: configBacnetServerEpochRelative:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configBacnetServerEpochRelative'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/bacnet/server/epoch-relative
      summary: Update /config/bacnet/server/epoch-relative
      operationId: configBacnetServerEpochRelative:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configBacnetServerEpochRelative'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/bacnet/server/epoch-relative
      summary: Delete /config/bacnet/server/epoch-relative
      operationId: configBacnetServerEpochRelative:delete
      description: |
        Reset to `true`.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/bacnet/server/id:
    get:
      tags:
        - /config/bacnet/server/id
      summary: Get /config/bacnet/server/id
      operationId: configBacnetServerId:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configBacnetServerId'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/bacnet/server/id
      summary: Replace /config/bacnet/server/id
      operationId: configBacnetServerId:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configBacnetServerId'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/bacnet/server/id
      summary: Update /config/bacnet/server/id
      operationId: configBacnetServerId:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configBacnetServerId'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/bacnet/server/id
      summary: Delete /config/bacnet/server/id
      operationId: configBacnetServerId:delete
      description: |
        Reset to 1.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/bacnet/server/mstp:
    get:
      tags:
        - /config/bacnet/server/mstp
      summary: Get /config/bacnet/server/mstp
      operationId: configBacnetServerMstp:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configBacnetServerMstp'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/bacnet/server/mstp
      summary: Replace /config/bacnet/server/mstp
      operationId: configBacnetServerMstp:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configBacnetServerMstp'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/bacnet/server/mstp
      summary: Update /config/bacnet/server/mstp
      operationId: configBacnetServerMstp:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configBacnetServerMstp'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/bacnet/server/mstp
      summary: Delete /config/bacnet/server/mstp
      operationId: configBacnetServerMstp:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/bacnet/server/mstp/mac:
    get:
      tags:
        - /config/bacnet/server/mstp/mac
      summary: Get /config/bacnet/server/mstp/mac
      operationId: configBacnetServerMstpMac:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configBacnetServerMstpMac'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/bacnet/server/mstp/mac
      summary: Replace /config/bacnet/server/mstp/mac
      operationId: configBacnetServerMstpMac:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configBacnetServerMstpMac'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/bacnet/server/mstp/mac
      summary: Update /config/bacnet/server/mstp/mac
      operationId: configBacnetServerMstpMac:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configBacnetServerMstpMac'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/bacnet/server/mstp/mac
      summary: Delete /config/bacnet/server/mstp/mac
      operationId: configBacnetServerMstpMac:delete
      description: Reset to 0.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/bacnet/server/mstp/max-mac:
    get:
      tags:
        - /config/bacnet/server/mstp/max-mac
      summary: Get /config/bacnet/server/mstp/max-mac
      operationId: configBacnetServerMstpMaxMac:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configBacnetServerMstpMaxMac'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/bacnet/server/mstp/max-mac
      summary: Replace /config/bacnet/server/mstp/max-mac
      operationId: configBacnetServerMstpMaxMac:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configBacnetServerMstpMaxMac'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/bacnet/server/mstp/max-mac
      summary: Update /config/bacnet/server/mstp/max-mac
      operationId: configBacnetServerMstpMaxMac:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configBacnetServerMstpMaxMac'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/bacnet/server/mstp/max-mac
      summary: Delete /config/bacnet/server/mstp/max-mac
      operationId: configBacnetServerMstpMaxMac:delete
      description: Reset to 0.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/bacnet/server/mstp/port:
    get:
      tags:
        - /config/bacnet/server/mstp/port
      summary: Get /config/bacnet/server/mstp/port
      operationId: configBacnetServerMstpPort:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configBacnetServerMstpPort'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/bacnet/server/mstp/port
      summary: Replace /config/bacnet/server/mstp/port
      operationId: configBacnetServerMstpPort:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configBacnetServerMstpPort'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/bacnet/server/mstp/port
      summary: Update /config/bacnet/server/mstp/port
      operationId: configBacnetServerMstpPort:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configBacnetServerMstpPort'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/bacnet/server/mstp/port
      summary: Delete /config/bacnet/server/mstp/port
      operationId: configBacnetServerMstpPort:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/db:
    get:
      tags:
        - /config/db
      summary: Get /config/db
      operationId: configDb:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configDb'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/db
      summary: Replace /config/db
      operationId: configDb:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configDb'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/db
      summary: Update /config/db
      operationId: configDb:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configDb'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/db
      summary: Delete /config/db
      operationId: configDb:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/db/epoch:
    get:
      tags:
        - /config/db/epoch
      summary: Get /config/db/epoch
      operationId: configDbEpoch:get
      description: |
        Get the meter epoch.
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configDbEpoch'
                  error:
                    $ref: '#/components/schemas/ErrorString'
              example:
                result: '1194937200'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/db/epoch
      summary: Replace /config/db/epoch
      operationId: configDbEpoch:put
      description: |
        Update the epoch with the value passed in the request body.

        This resource is **not** updated
        [transactionally](#tag/Glossary/Non-Transactional-Updates).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configDbEpoch'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/db/epoch
      summary: Update /config/db/epoch
      operationId: configDbEpoch:post
      description: |
        Update the epoch with the value passed in the request body.

        This resource is **not** updated
        [transactionally](#tag/Glossary/Non-Transactional-Updates).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configDbEpoch'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/db/epoch
      summary: Delete /config/db/epoch
      operationId: configDbEpoch:delete
      description: |
        Reset the database epoch to the current time of the meter.

        This resource is **not** updated
        [transactionally](#tag/Glossary/Non-Transactional-Updates).
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/display:
    get:
      tags:
        - /config/display
      summary: Get /config/display
      operationId: configDisplay:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configDisplay'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/display
      summary: Replace /config/display
      operationId: configDisplay:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configDisplay'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/display
      summary: Update /config/display
      operationId: configDisplay:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configDisplay'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/display
      summary: Delete /config/display
      operationId: configDisplay:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/display/backlight:
    get:
      tags:
        - /config/display/backlight
      summary: Get /config/display/backlight
      operationId: configDisplayBacklight:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configDisplayBacklight'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/display/backlight
      summary: Replace /config/display/backlight
      operationId: configDisplayBacklight:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configDisplayBacklight'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/display/backlight
      summary: Update /config/display/backlight
      operationId: configDisplayBacklight:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configDisplayBacklight'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/display/backlight
      summary: Delete /config/display/backlight
      operationId: configDisplayBacklight:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/display/backlight/brightness:
    get:
      tags:
        - /config/display/backlight/brightness
      summary: Get /config/display/backlight/brightness
      operationId: configDisplayBacklightBrightness:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configDisplayBacklightBrightness'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/display/backlight/brightness
      summary: Replace /config/display/backlight/brightness
      operationId: configDisplayBacklightBrightness:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configDisplayBacklightBrightness'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/display/backlight/brightness
      summary: Update /config/display/backlight/brightness
      operationId: configDisplayBacklightBrightness:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configDisplayBacklightBrightness'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/display/backlight/brightness
      summary: Delete /config/display/backlight/brightness
      operationId: configDisplayBacklightBrightness:delete
      description: Reset to 0.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/display/backlight/duration:
    get:
      tags:
        - /config/display/backlight/duration
      summary: Get /config/display/backlight/duration
      operationId: configDisplayBacklightDuration:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configDisplayBacklightDuration'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/display/backlight/duration
      summary: Replace /config/display/backlight/duration
      operationId: configDisplayBacklightDuration:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configDisplayBacklightDuration'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/display/backlight/duration
      summary: Update /config/display/backlight/duration
      operationId: configDisplayBacklightDuration:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configDisplayBacklightDuration'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/display/backlight/duration
      summary: Delete /config/display/backlight/duration
      operationId: configDisplayBacklightDuration:delete
      description: Reset to 0.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/display/contrast:
    get:
      tags:
        - /config/display/contrast
      summary: Get /config/display/contrast
      operationId: configDisplayContrast:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configDisplayContrast'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/display/contrast
      summary: Replace /config/display/contrast
      operationId: configDisplayContrast:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configDisplayContrast'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/display/contrast
      summary: Update /config/display/contrast
      operationId: configDisplayContrast:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configDisplayContrast'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/display/contrast
      summary: Delete /config/display/contrast
      operationId: configDisplayContrast:delete
      description: Reset to 0.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/display/fontset:
    get:
      tags:
        - /config/display/fontset
      summary: Get /config/display/fontset
      operationId: configDisplayFontset:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configDisplayFontset'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/display/fontset
      summary: Replace /config/display/fontset
      operationId: configDisplayFontset:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configDisplayFontset'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/display/fontset
      summary: Update /config/display/fontset
      operationId: configDisplayFontset:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configDisplayFontset'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/display/fontset
      summary: Delete /config/display/fontset
      operationId: configDisplayFontset:delete
      description: |
        Reset to `normal`.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/display/screen:
    get:
      tags:
        - /config/display/screen
      summary: Get /config/display/screen
      operationId: configDisplayScreen:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configDisplayScreen'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/display/screen
      summary: Replace /config/display/screen
      operationId: configDisplayScreen:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configDisplayScreen'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/display/screen
      summary: Update /config/display/screen
      operationId: configDisplayScreen:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configDisplayScreen'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/display/screen
      summary: Delete /config/display/screen
      operationId: configDisplayScreen:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/display/screen/registers:
    get:
      tags:
        - /config/display/screen/registers
      summary: Get /config/display/screen/registers
      operationId: configDisplayScreenRegisters:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configDisplayScreenRegisters'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/display/screen/registers
      summary: Replace /config/display/screen/registers
      operationId: configDisplayScreenRegisters:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configDisplayScreenRegisters'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/display/screen/registers
      summary: Update /config/display/screen/registers
      operationId: configDisplayScreenRegisters:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configDisplayScreenRegisters'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/display/screen/registers
      summary: Delete /config/display/screen/registers
      operationId: configDisplayScreenRegisters:delete
      description: |
        Reset to empty (no registers displayed).
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/display/screen/registers/{name}:
    parameters:
      - name: name
        in: path
        description: |
          The name of a register or the special keyword `.default`.
        required: true
        schema:
          type: string
          example: Solar
    get:
      tags:
        - /config/display/screen/registers/{name}
      summary: Get /config/display/screen/registers/{name}
      operationId: configDisplayScreenRegistersName:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configDisplayScreenRegistersName'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/display/screen/registers/{name}
      summary: Replace /config/display/screen/registers/{name}
      operationId: configDisplayScreenRegistersName:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configDisplayScreenRegistersName'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/display/screen/registers/{name}
      summary: Update /config/display/screen/registers/{name}
      operationId: configDisplayScreenRegistersName:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configDisplayScreenRegistersName'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/display/screen/registers/{name}
      summary: Delete /config/display/screen/registers/{name}
      operationId: configDisplayScreenRegistersName:delete
      description: |
        Remove this register from the screen.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/display/orientation:
    get:
      tags:
        - /config/display/orientation
      summary: Get /config/display/orientation
      operationId: configDisplayOrientation:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configDisplayOrientation'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/display/orientation
      summary: Replace /config/display/orientation
      operationId: configDisplayOrientation:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configDisplayOrientation'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/display/orientation
      summary: Update /config/display/orientation
      operationId: configDisplayOrientation:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configDisplayOrientation'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/display/orientation
      summary: Delete /config/display/orientation
      operationId: configDisplayOrientation:delete
      description: Reset to 0.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/language_code:
    get:
      tags:
        - /config/language_code
      summary: Get /config/language_code
      operationId: configLanguageCode:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configLanguageCode'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/language_code
      summary: Replace /config/language_code
      operationId: configLanguageCode:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLanguageCode'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/language_code
      summary: Update /config/language_code
      operationId: configLanguageCode:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLanguageCode'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/language_code
      summary: Delete /config/language_code
      operationId: configLanguageCode:delete
      description: |
        Reset to default language code `en`.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/local:
    get:
      tags:
        - /config/local
      summary: Get /config/local
      operationId: configLocal:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configLocal'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/local
      summary: Replace /config/local
      operationId: configLocal:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLocal'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/local
      summary: Update /config/local
      operationId: configLocal:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLocal'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/local
      summary: Delete /config/local
      operationId: configLocal:delete
      description: |
        Reset configuration to the default (all sensors off).
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/local/sensor:
    get:
      tags:
        - /config/local/sensor
      summary: Get /config/local/sensor
      operationId: configLocalSensor:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configLocalSensor'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/local/sensor
      summary: Replace /config/local/sensor
      operationId: configLocalSensor:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLocalSensor'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/local/sensor
      summary: Update /config/local/sensor
      operationId: configLocalSensor:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLocalSensor'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/local/sensor
      summary: Delete /config/local/sensor
      operationId: configLocalSensor:delete
      description: |
        Reset configuration to all sensors off.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/local/sensor/{name}:
    parameters:
      - name: name
        in: path
        description: |
          The name of a sensor (L1-L3, Ldc, or S1-S30).
        required: true
        schema:
          type: string
        example: S1
    get:
      tags:
        - /config/local/sensor/{name}
      summary: Get /config/local/sensor/{name}
      operationId: configLocalSensorName:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configLocalSensorName'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/local/sensor/{name}
      summary: Replace /config/local/sensor/{name}
      operationId: configLocalSensorName:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLocalSensorName'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/local/sensor/{name}
      summary: Update /config/local/sensor/{name}
      operationId: configLocalSensorName:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLocalSensorName'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/local/sensor/{name}
      summary: Delete /config/local/sensor/{name}
      operationId: configLocalSensorName:delete
      description: |
        Reset configuration to off.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/local/sensor/{name}/channel:
    parameters:
      - name: name
        in: path
        description: |
          The name of a sensor (L1-L3, Ldc, or S1-S30).
        required: true
        schema:
          type: string
        example: S1
    get:
      tags:
        - /config/local/sensor/{name}/channel
      summary: Get /config/local/sensor/{name}/channel
      operationId: configLocalSensorNameChannel:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configLocalSensorNameChannel'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/local/sensor/{name}/channel
      summary: Replace /config/local/sensor/{name}/channel
      operationId: configLocalSensorNameChannel:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLocalSensorNameChannel'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/local/sensor/{name}/channel
      summary: Update /config/local/sensor/{name}/channel
      operationId: configLocalSensorNameChannel:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLocalSensorNameChannel'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/local/sensor/{name}/channel
      summary: Delete /config/local/sensor/{name}/channel
      operationId: configLocalSensorNameChannel:delete
      description: |
        Reset channel to default configuration.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/local/sensor/{name}/channel/bias:
    parameters:
      - name: name
        in: path
        description: |
          The name of a sensor (L1-L3, Ldc, or S1-S30).
        required: true
        schema:
          type: string
        example: S1
    get:
      tags:
        - /config/local/sensor/{name}/channel/bias
      summary: Get /config/local/sensor/{name}/channel/bias
      operationId: configLocalSensorNameChannelBias:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configLocalSensorNameChannelBias'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/local/sensor/{name}/channel/bias
      summary: Replace /config/local/sensor/{name}/channel/bias
      operationId: configLocalSensorNameChannelBias:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLocalSensorNameChannelBias'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/local/sensor/{name}/channel/bias
      summary: Update /config/local/sensor/{name}/channel/bias
      operationId: configLocalSensorNameChannelBias:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLocalSensorNameChannelBias'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/local/sensor/{name}/channel/bias
      summary: Delete /config/local/sensor/{name}/channel/bias
      operationId: configLocalSensorNameChannelBias:delete
      description: Reset to 0.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/local/sensor/{name}/channel/mode:
    parameters:
      - name: name
        in: path
        description: |
          The name of a sensor (L1-L3, Ldc, or S1-S30).
        required: true
        schema:
          type: string
        example: S1
    get:
      tags:
        - /config/local/sensor/{name}/channel/mode
      summary: Get /config/local/sensor/{name}/channel/mode
      operationId: configLocalSensorNameChannelMode:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configLocalSensorNameChannelMode'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/local/sensor/{name}/channel/mode
      summary: Replace /config/local/sensor/{name}/channel/mode
      operationId: configLocalSensorNameChannelMode:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLocalSensorNameChannelMode'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/local/sensor/{name}/channel/mode
      summary: Update /config/local/sensor/{name}/channel/mode
      operationId: configLocalSensorNameChannelMode:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLocalSensorNameChannelMode'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/local/sensor/{name}/channel/mode
      summary: Delete /config/local/sensor/{name}/channel/mode
      operationId: configLocalSensorNameChannelMode:delete
      description: |
        Reset to `off`.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/local/sensor/{name}/channel/scale:
    parameters:
      - name: name
        in: path
        description: |
          The name of a sensor (L1-L3, Ldc, or S1-S30).
        required: true
        schema:
          type: string
        example: S1
    get:
      tags:
        - /config/local/sensor/{name}/channel/scale
      summary: Get /config/local/sensor/{name}/channel/scale
      operationId: configLocalSensorNameChannelScale:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configLocalSensorNameChannelScale'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/local/sensor/{name}/channel/scale
      summary: Replace /config/local/sensor/{name}/channel/scale
      operationId: configLocalSensorNameChannelScale:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLocalSensorNameChannelScale'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/local/sensor/{name}/channel/scale
      summary: Update /config/local/sensor/{name}/channel/scale
      operationId: configLocalSensorNameChannelScale:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLocalSensorNameChannelScale'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/local/sensor/{name}/channel/scale
      summary: Delete /config/local/sensor/{name}/channel/scale
      operationId: configLocalSensorNameChannelScale:delete
      description: Reset to 0.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/local/sensor/{name}/error:
    parameters:
      - name: name
        in: path
        description: |
          The name of a sensor (L1-L3, Ldc, or S1-S30).
        required: true
        schema:
          type: string
        example: S1
    get:
      tags:
        - /config/local/sensor/{name}/error
      summary: Get /config/local/sensor/{name}/error
      operationId: configLocalSensorNameError:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configLocalSensorNameError'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/local/sensor/{name}/error
      summary: Replace /config/local/sensor/{name}/error
      operationId: configLocalSensorNameError:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLocalSensorNameError'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/local/sensor/{name}/error
      summary: Update /config/local/sensor/{name}/error
      operationId: configLocalSensorNameError:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLocalSensorNameError'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/local/sensor/{name}/error
      summary: Delete /config/local/sensor/{name}/error
      operationId: configLocalSensorNameError:delete
      description: Reset to 0.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/local/sensor/{name}/model:
    parameters:
      - name: name
        in: path
        description: |
          The name of a sensor (L1-L3, Ldc, or S1-S30).
        required: true
        schema:
          type: string
        example: S1
    get:
      tags:
        - /config/local/sensor/{name}/model
      summary: Get /config/local/sensor/{name}/model
      operationId: configLocalSensorNameModel:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configLocalSensorNameModel'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/local/sensor/{name}/model
      summary: Replace /config/local/sensor/{name}/model
      operationId: configLocalSensorNameModel:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLocalSensorNameModel'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/local/sensor/{name}/model
      summary: Update /config/local/sensor/{name}/model
      operationId: configLocalSensorNameModel:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLocalSensorNameModel'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/local/sensor/{name}/model
      summary: Delete /config/local/sensor/{name}/model
      operationId: configLocalSensorNameModel:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/local/sensor/{name}/phase:
    parameters:
      - name: name
        in: path
        description: |
          The name of a sensor (L1-L3, Ldc, or S1-S30).
        required: true
        schema:
          type: string
        example: S1
    get:
      tags:
        - /config/local/sensor/{name}/phase
      summary: Get /config/local/sensor/{name}/phase
      operationId: configLocalSensorNamePhase:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configLocalSensorNamePhase'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/local/sensor/{name}/phase
      summary: Replace /config/local/sensor/{name}/phase
      operationId: configLocalSensorNamePhase:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLocalSensorNamePhase'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/local/sensor/{name}/phase
      summary: Update /config/local/sensor/{name}/phase
      operationId: configLocalSensorNamePhase:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLocalSensorNamePhase'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/local/sensor/{name}/phase
      summary: Delete /config/local/sensor/{name}/phase
      operationId: configLocalSensorNamePhase:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/local/gain:
    get:
      tags:
        - /config/local/gain
      summary: Get /config/local/gain
      operationId: configLocalGain:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configLocalGain'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/local/gain
      summary: Replace /config/local/gain
      operationId: configLocalGain:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLocalGain'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/local/gain
      summary: Update /config/local/gain
      operationId: configLocalGain:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLocalGain'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/local/gain
      summary: Delete /config/local/gain
      operationId: configLocalGain:delete
      description: |
        Reset gain to `normal`.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/local/update-interval:
    get:
      tags:
        - /config/local/update-interval
      summary: Get /config/local/update-interval
      operationId: configLocalUpdateInterval:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configLocalUpdateInterval'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/local/update-interval
      summary: Replace /config/local/update-interval
      operationId: configLocalUpdateInterval:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLocalUpdateInterval'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/local/update-interval
      summary: Update /config/local/update-interval
      operationId: configLocalUpdateInterval:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLocalUpdateInterval'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/local/update-interval
      summary: Delete /config/local/update-interval
      operationId: configLocalUpdateInterval:delete
      description: |
        Reset to 1000 milliseconds.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/location:
    get:
      tags:
        - /config/location
      summary: Get /config/location
      operationId: configLocation:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configLocation'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/location
      summary: Replace /config/location
      operationId: configLocation:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLocation'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/location
      summary: Update /config/location
      operationId: configLocation:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLocation'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/location
      summary: Delete /config/location
      operationId: configLocation:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/location/latitude:
    get:
      tags:
        - /config/location/latitude
      summary: Get /config/location/latitude
      operationId: configLocationLatitude:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configLocationLatitude'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/location/latitude
      summary: Replace /config/location/latitude
      operationId: configLocationLatitude:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLocationLatitude'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/location/latitude
      summary: Update /config/location/latitude
      operationId: configLocationLatitude:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLocationLatitude'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/location/latitude
      summary: Delete /config/location/latitude
      operationId: configLocationLatitude:delete
      description: Reset to 0.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/location/longitude:
    get:
      tags:
        - /config/location/longitude
      summary: Get /config/location/longitude
      operationId: configLocationLongitude:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configLocationLongitude'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/location/longitude
      summary: Replace /config/location/longitude
      operationId: configLocationLongitude:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLocationLongitude'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/location/longitude
      summary: Update /config/location/longitude
      operationId: configLocationLongitude:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLocationLongitude'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/location/longitude
      summary: Delete /config/location/longitude
      operationId: configLocationLongitude:delete
      description: Reset to 0.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/log:
    get:
      tags:
        - /config/log
      summary: Get /config/log
      operationId: configLog:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configLog'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/log
      summary: Replace /config/log
      operationId: configLog:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLog'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/log
      summary: Update /config/log
      operationId: configLog:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLog'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/log
      summary: Delete /config/log
      operationId: configLog:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/log/system:
    get:
      tags:
        - /config/log/system
      summary: Get /config/log/system
      operationId: configLogSystem:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configLogSystem'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/log/system
      summary: Replace /config/log/system
      operationId: configLogSystem:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLogSystem'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/log/system
      summary: Update /config/log/system
      operationId: configLogSystem:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLogSystem'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/log/system
      summary: Delete /config/log/system
      operationId: configLogSystem:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/log/system/size:
    get:
      tags:
        - /config/log/system/size
      summary: Get /config/log/system/size
      operationId: configLogSystemSize:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configLogSystemSize'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/log/system/size
      summary: Replace /config/log/system/size
      operationId: configLogSystemSize:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLogSystemSize'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/log/system/size
      summary: Update /config/log/system/size
      operationId: configLogSystemSize:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLogSystemSize'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/log/system/size
      summary: Delete /config/log/system/size
      operationId: configLogSystemSize:delete
      description: Reset to 0.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/lua:
    get:
      tags:
        - /config/lua
      summary: Get /config/lua
      operationId: configLua:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configLua'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/lua
      summary: Replace /config/lua
      operationId: configLua:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLua'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/lua
      summary: Update /config/lua
      operationId: configLua:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLua'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/lua
      summary: Delete /config/lua
      operationId: configLua:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/lua/script:
    get:
      tags:
        - /config/lua/script
      summary: Get /config/lua/script
      operationId: configLuaScript:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configLuaScript'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/lua/script
      summary: Replace /config/lua/script
      operationId: configLuaScript:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLuaScript'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/lua/script
      summary: Update /config/lua/script
      operationId: configLuaScript:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLuaScript'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/lua/script
      summary: Delete /config/lua/script
      operationId: configLuaScript:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/lua/script/alertd:
    get:
      tags:
        - /config/lua/script/alertd
      summary: Get /config/lua/script/alertd
      operationId: configLuaScriptAlertd:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configLuaScriptAlertd'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/lua/script/alertd
      summary: Replace /config/lua/script/alertd
      operationId: configLuaScriptAlertd:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLuaScriptAlertd'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/lua/script/alertd
      summary: Update /config/lua/script/alertd
      operationId: configLuaScriptAlertd:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLuaScriptAlertd'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/lua/script/alertd
      summary: Delete /config/lua/script/alertd
      operationId: configLuaScriptAlertd:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/lua/script/tariff:
    get:
      tags:
        - /config/lua/script/tariff
      summary: Get /config/lua/script/tariff
      operationId: configLuaScriptTariff:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configLuaScriptTariff'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/lua/script/tariff
      summary: Replace /config/lua/script/tariff
      operationId: configLuaScriptTariff:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLuaScriptTariff'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/lua/script/tariff
      summary: Update /config/lua/script/tariff
      operationId: configLuaScriptTariff:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLuaScriptTariff'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/lua/script/tariff
      summary: Delete /config/lua/script/tariff
      operationId: configLuaScriptTariff:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/lua/script/teamd:
    get:
      tags:
        - /config/lua/script/teamd
      summary: Get /config/lua/script/teamd
      operationId: configLuaScriptTeamd:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configLuaScriptTeamd'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/lua/script/teamd
      summary: Replace /config/lua/script/teamd
      operationId: configLuaScriptTeamd:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLuaScriptTeamd'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/lua/script/teamd
      summary: Update /config/lua/script/teamd
      operationId: configLuaScriptTeamd:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLuaScriptTeamd'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/lua/script/teamd
      summary: Delete /config/lua/script/teamd
      operationId: configLuaScriptTeamd:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/lua/ctrld:
    get:
      tags:
        - /config/lua/ctrld
      summary: Get /config/lua/ctrld
      operationId: configLuaCtrld:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configLuaCtrld'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/lua/ctrld
      summary: Replace /config/lua/ctrld
      operationId: configLuaCtrld:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLuaCtrld'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/lua/ctrld
      summary: Update /config/lua/ctrld
      operationId: configLuaCtrld:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLuaCtrld'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/lua/ctrld
      summary: Delete /config/lua/ctrld
      operationId: configLuaCtrld:delete
      description: |
        Delete all control scripts.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/lua/ctrld/{script}:
    parameters:
      - name: script
        in: path
        description: |
          The name of a Lua script.
        required: true
        schema:
          type: string
    get:
      tags:
        - /config/lua/ctrld/{script}
      summary: Get /config/lua/ctrld/{script}
      operationId: configLuaCtrldScript:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configLuaCtrldScript'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/lua/ctrld/{script}
      summary: Replace /config/lua/ctrld/{script}
      operationId: configLuaCtrldScript:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLuaCtrldScript'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/lua/ctrld/{script}
      summary: Update /config/lua/ctrld/{script}
      operationId: configLuaCtrldScript:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configLuaCtrldScript'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/lua/ctrld/{script}
      summary: Delete /config/lua/ctrld/{script}
      operationId: configLuaCtrldScript:delete
      description: |
        Delete the script.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/modbus:
    get:
      tags:
        - /config/modbus
      summary: Get /config/modbus
      operationId: configModbus:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configModbus'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/modbus
      summary: Replace /config/modbus
      operationId: configModbus:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbus'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/modbus
      summary: Update /config/modbus
      operationId: configModbus:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbus'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/modbus
      summary: Delete /config/modbus
      operationId: configModbus:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/modbus/client:
    get:
      tags:
        - /config/modbus/client
      summary: Get /config/modbus/client
      operationId: configModbusClient:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configModbusClient'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/modbus/client
      summary: Replace /config/modbus/client
      operationId: configModbusClient:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusClient'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/modbus/client
      summary: Update /config/modbus/client
      operationId: configModbusClient:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusClient'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/modbus/client
      summary: Delete /config/modbus/client
      operationId: configModbusClient:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/modbus/client/map:
    get:
      tags:
        - /config/modbus/client/map
      summary: Get /config/modbus/client/map
      operationId: configModbusClientMap:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configModbusClientMap'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/modbus/client/map
      summary: Replace /config/modbus/client/map
      operationId: configModbusClientMap:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusClientMap'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/modbus/client/map
      summary: Update /config/modbus/client/map
      operationId: configModbusClientMap:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusClientMap'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/modbus/client/map
      summary: Delete /config/modbus/client/map
      operationId: configModbusClientMap:delete
      description: |
        Delete all user maps.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/modbus/client/map/{name}:
    parameters:
      - name: name
        in: path
        description: |
          The name of a user Modbus map (editable).
        required: true
        schema:
          type: string
          example: my_modbus_map
    get:
      tags:
        - /config/modbus/client/map/{name}
      summary: Get /config/modbus/client/map/{name}
      operationId: configModbusClientMapName:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configModbusClientMapName'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/modbus/client/map/{name}
      summary: Replace /config/modbus/client/map/{name}
      operationId: configModbusClientMapName:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusClientMapName'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/modbus/client/map/{name}
      summary: Update /config/modbus/client/map/{name}
      operationId: configModbusClientMapName:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusClientMapName'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/modbus/client/map/{name}
      summary: Delete /config/modbus/client/map/{name}
      operationId: configModbusClientMapName:delete
      description: |
        Delete this map.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/modbus/client/map/{name}/option:
    parameters:
      - name: name
        in: path
        description: |
          The name of a user Modbus map (editable).
        required: true
        schema:
          type: string
          example: my_modbus_map
    get:
      tags:
        - /config/modbus/client/map/{name}/option
      summary: Get /config/modbus/client/map/{name}/option
      operationId: configModbusClientMapNameOption:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configModbusClientMapNameOption'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/modbus/client/map/{name}/option
      summary: Replace /config/modbus/client/map/{name}/option
      operationId: configModbusClientMapNameOption:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusClientMapNameOption'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/modbus/client/map/{name}/option
      summary: Update /config/modbus/client/map/{name}/option
      operationId: configModbusClientMapNameOption:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusClientMapNameOption'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/modbus/client/map/{name}/option
      summary: Delete /config/modbus/client/map/{name}/option
      operationId: configModbusClientMapNameOption:delete
      description: |
        Delete all options.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/modbus/client/map/{name}/option/{opt}:
    parameters:
      - name: name
        in: path
        description: |
          The name of a user Modbus map (editable).
        required: true
        schema:
          type: string
          example: my_modbus_map
      - name: opt
        in: path
        description: |
          The name of a Modbus map option.
        required: true
        schema:
          type: string
          enum:
            - default-modbus-addr
            - default-serial-params
            - default-tcp-port
    get:
      tags:
        - /config/modbus/client/map/{name}/option/{opt}
      summary: Get /config/modbus/client/map/{name}/option/{opt}
      operationId: configModbusClientMapNameOptionOpt:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configModbusClientMapNameOptionOpt'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/modbus/client/map/{name}/option/{opt}
      summary: Replace /config/modbus/client/map/{name}/option/{opt}
      operationId: configModbusClientMapNameOptionOpt:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusClientMapNameOptionOpt'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/modbus/client/map/{name}/option/{opt}
      summary: Update /config/modbus/client/map/{name}/option/{opt}
      operationId: configModbusClientMapNameOptionOpt:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusClientMapNameOptionOpt'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/modbus/client/map/{name}/option/{opt}
      summary: Delete /config/modbus/client/map/{name}/option/{opt}
      operationId: configModbusClientMapNameOptionOpt:delete
      description: |
        Delete this option.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/modbus/client/map/{name}/reg:
    parameters:
      - name: name
        in: path
        description: |
          The name of a user Modbus map (editable).
        required: true
        schema:
          type: string
          example: my_modbus_map
    get:
      tags:
        - /config/modbus/client/map/{name}/reg
      summary: Get /config/modbus/client/map/{name}/reg
      operationId: configModbusClientMapNameReg:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configModbusClientMapNameReg'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/modbus/client/map/{name}/reg
      summary: Replace /config/modbus/client/map/{name}/reg
      operationId: configModbusClientMapNameReg:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusClientMapNameReg'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/modbus/client/map/{name}/reg
      summary: Update /config/modbus/client/map/{name}/reg
      operationId: configModbusClientMapNameReg:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusClientMapNameReg'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/modbus/client/map/{name}/reg
      summary: Delete /config/modbus/client/map/{name}/reg
      operationId: configModbusClientMapNameReg:delete
      description: Reset to empty array.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/modbus/client/map/{name}/reg/{idx}:
    parameters:
      - name: name
        in: path
        description: |
          The name of a user Modbus map (editable).
        required: true
        schema:
          type: string
          example: my_modbus_map
      - name: idx
        in: path
        description: |
          The index of a Modbus map register.
        required: true
        schema:
          type: string
    get:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}
      summary: Get /config/modbus/client/map/{name}/reg/{idx}
      operationId: configModbusClientMapNameRegItem:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configModbusClientMapNameRegItem'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}
      summary: Replace /config/modbus/client/map/{name}/reg/{idx}
      operationId: configModbusClientMapNameRegItem:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusClientMapNameRegItem'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}
      summary: Update /config/modbus/client/map/{name}/reg/{idx}
      operationId: configModbusClientMapNameRegItem:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusClientMapNameRegItem'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}
      summary: Delete /config/modbus/client/map/{name}/reg/{idx}
      operationId: configModbusClientMapNameRegItem:delete
      description: |
        Delete this register definition.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/modbus/client/map/{name}/reg/{idx}/name:
    parameters:
      - name: name
        in: path
        description: |
          The name of a user Modbus map (editable).
        required: true
        schema:
          type: string
          example: my_modbus_map
      - name: idx
        in: path
        description: |
          The index of a Modbus map register.
        required: true
        schema:
          type: string
    get:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}/name
      summary: Get /config/modbus/client/map/{name}/reg/{idx}/name
      operationId: configModbusClientMapNameRegItemName:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configModbusClientMapNameRegItemName'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}/name
      summary: Replace /config/modbus/client/map/{name}/reg/{idx}/name
      operationId: configModbusClientMapNameRegItemName:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusClientMapNameRegItemName'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}/name
      summary: Update /config/modbus/client/map/{name}/reg/{idx}/name
      operationId: configModbusClientMapNameRegItemName:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusClientMapNameRegItemName'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}/name
      summary: Delete /config/modbus/client/map/{name}/reg/{idx}/name
      operationId: configModbusClientMapNameRegItemName:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/modbus/client/map/{name}/reg/{idx}/addr:
    parameters:
      - name: name
        in: path
        description: |
          The name of a user Modbus map (editable).
        required: true
        schema:
          type: string
          example: my_modbus_map
      - name: idx
        in: path
        description: |
          The index of a Modbus map register.
        required: true
        schema:
          type: string
    get:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}/addr
      summary: Get /config/modbus/client/map/{name}/reg/{idx}/addr
      operationId: configModbusClientMapNameRegItemAddr:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configModbusClientMapNameRegItemAddr'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}/addr
      summary: Replace /config/modbus/client/map/{name}/reg/{idx}/addr
      operationId: configModbusClientMapNameRegItemAddr:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusClientMapNameRegItemAddr'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}/addr
      summary: Update /config/modbus/client/map/{name}/reg/{idx}/addr
      operationId: configModbusClientMapNameRegItemAddr:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusClientMapNameRegItemAddr'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}/addr
      summary: Delete /config/modbus/client/map/{name}/reg/{idx}/addr
      operationId: configModbusClientMapNameRegItemAddr:delete
      description: Reset to 0.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/modbus/client/map/{name}/reg/{idx}/type:
    parameters:
      - name: name
        in: path
        description: |
          The name of a user Modbus map (editable).
        required: true
        schema:
          type: string
          example: my_modbus_map
      - name: idx
        in: path
        description: |
          The index of a Modbus map register.
        required: true
        schema:
          type: string
    get:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}/type
      summary: Get /config/modbus/client/map/{name}/reg/{idx}/type
      operationId: configModbusClientMapNameRegItemType:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configModbusClientMapNameRegItemType'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}/type
      summary: Replace /config/modbus/client/map/{name}/reg/{idx}/type
      operationId: configModbusClientMapNameRegItemType:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusClientMapNameRegItemType'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}/type
      summary: Update /config/modbus/client/map/{name}/reg/{idx}/type
      operationId: configModbusClientMapNameRegItemType:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusClientMapNameRegItemType'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}/type
      summary: Delete /config/modbus/client/map/{name}/reg/{idx}/type
      operationId: configModbusClientMapNameRegItemType:delete
      description: |
        Reset to `u16`.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/modbus/client/map/{name}/reg/{idx}/kind:
    parameters:
      - name: name
        in: path
        description: |
          The name of a user Modbus map (editable).
        required: true
        schema:
          type: string
          example: my_modbus_map
      - name: idx
        in: path
        description: |
          The index of a Modbus map register.
        required: true
        schema:
          type: string
    get:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}/kind
      summary: Get /config/modbus/client/map/{name}/reg/{idx}/kind
      operationId: configModbusClientMapNameRegItemKind:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configModbusClientMapNameRegItemKind'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}/kind
      summary: Replace /config/modbus/client/map/{name}/reg/{idx}/kind
      operationId: configModbusClientMapNameRegItemKind:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusClientMapNameRegItemKind'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}/kind
      summary: Update /config/modbus/client/map/{name}/reg/{idx}/kind
      operationId: configModbusClientMapNameRegItemKind:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusClientMapNameRegItemKind'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}/kind
      summary: Delete /config/modbus/client/map/{name}/reg/{idx}/kind
      operationId: configModbusClientMapNameRegItemKind:delete
      description: |
        Reset to `analog`.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/modbus/client/map/{name}/reg/{idx}/unit:
    parameters:
      - name: name
        in: path
        description: |
          The name of a user Modbus map (editable).
        required: true
        schema:
          type: string
          example: my_modbus_map
      - name: idx
        in: path
        description: |
          The index of a Modbus map register.
        required: true
        schema:
          type: string
    get:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}/unit
      summary: Get /config/modbus/client/map/{name}/reg/{idx}/unit
      operationId: configModbusClientMapNameRegItemUnit:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configModbusClientMapNameRegItemUnit'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}/unit
      summary: Replace /config/modbus/client/map/{name}/reg/{idx}/unit
      operationId: configModbusClientMapNameRegItemUnit:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusClientMapNameRegItemUnit'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}/unit
      summary: Update /config/modbus/client/map/{name}/reg/{idx}/unit
      operationId: configModbusClientMapNameRegItemUnit:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusClientMapNameRegItemUnit'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}/unit
      summary: Delete /config/modbus/client/map/{name}/reg/{idx}/unit
      operationId: configModbusClientMapNameRegItemUnit:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/modbus/client/map/{name}/reg/{idx}/offset:
    parameters:
      - name: name
        in: path
        description: |
          The name of a user Modbus map (editable).
        required: true
        schema:
          type: string
          example: my_modbus_map
      - name: idx
        in: path
        description: |
          The index of a Modbus map register.
        required: true
        schema:
          type: string
    get:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}/offset
      summary: Get /config/modbus/client/map/{name}/reg/{idx}/offset
      operationId: configModbusClientMapNameRegItemOffset:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configModbusClientMapNameRegItemOffset'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}/offset
      summary: Replace /config/modbus/client/map/{name}/reg/{idx}/offset
      operationId: configModbusClientMapNameRegItemOffset:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusClientMapNameRegItemOffset'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}/offset
      summary: Update /config/modbus/client/map/{name}/reg/{idx}/offset
      operationId: configModbusClientMapNameRegItemOffset:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusClientMapNameRegItemOffset'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}/offset
      summary: Delete /config/modbus/client/map/{name}/reg/{idx}/offset
      operationId: configModbusClientMapNameRegItemOffset:delete
      description: Reset to 0.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/modbus/client/map/{name}/reg/{idx}/scale:
    parameters:
      - name: name
        in: path
        description: |
          The name of a user Modbus map (editable).
        required: true
        schema:
          type: string
          example: my_modbus_map
      - name: idx
        in: path
        description: |
          The index of a Modbus map register.
        required: true
        schema:
          type: string
    get:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}/scale
      summary: Get /config/modbus/client/map/{name}/reg/{idx}/scale
      operationId: configModbusClientMapNameRegItemScale:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configModbusClientMapNameRegItemScale'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}/scale
      summary: Replace /config/modbus/client/map/{name}/reg/{idx}/scale
      operationId: configModbusClientMapNameRegItemScale:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusClientMapNameRegItemScale'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}/scale
      summary: Update /config/modbus/client/map/{name}/reg/{idx}/scale
      operationId: configModbusClientMapNameRegItemScale:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusClientMapNameRegItemScale'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}/scale
      summary: Delete /config/modbus/client/map/{name}/reg/{idx}/scale
      operationId: configModbusClientMapNameRegItemScale:delete
      description: |
        Reset to 1.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/modbus/client/map/{name}/reg/{idx}/access:
    parameters:
      - name: name
        in: path
        description: |
          The name of a user Modbus map (editable).
        required: true
        schema:
          type: string
          example: my_modbus_map
      - name: idx
        in: path
        description: |
          The index of a Modbus map register.
        required: true
        schema:
          type: string
    get:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}/access
      summary: Get /config/modbus/client/map/{name}/reg/{idx}/access
      operationId: configModbusClientMapNameRegItemAccess:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configModbusClientMapNameRegItemAccess'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}/access
      summary: Replace /config/modbus/client/map/{name}/reg/{idx}/access
      operationId: configModbusClientMapNameRegItemAccess:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusClientMapNameRegItemAccess'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}/access
      summary: Update /config/modbus/client/map/{name}/reg/{idx}/access
      operationId: configModbusClientMapNameRegItemAccess:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusClientMapNameRegItemAccess'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/modbus/client/map/{name}/reg/{idx}/access
      summary: Delete /config/modbus/client/map/{name}/reg/{idx}/access
      operationId: configModbusClientMapNameRegItemAccess:delete
      description: |
        Reset to `rw`.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/modbus/server:
    get:
      tags:
        - /config/modbus/server
      summary: Get /config/modbus/server
      operationId: configModbusServer:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configModbusServer'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/modbus/server
      summary: Replace /config/modbus/server
      operationId: configModbusServer:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusServer'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/modbus/server
      summary: Update /config/modbus/server
      operationId: configModbusServer:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusServer'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/modbus/server
      summary: Delete /config/modbus/server
      operationId: configModbusServer:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/modbus/server/enable:
    get:
      tags:
        - /config/modbus/server/enable
      summary: Get /config/modbus/server/enable
      operationId: configModbusServerEnable:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configModbusServerEnable'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/modbus/server/enable
      summary: Replace /config/modbus/server/enable
      operationId: configModbusServerEnable:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusServerEnable'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/modbus/server/enable
      summary: Update /config/modbus/server/enable
      operationId: configModbusServerEnable:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusServerEnable'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/modbus/server/enable
      summary: Delete /config/modbus/server/enable
      operationId: configModbusServerEnable:delete
      description: Reset to empty array.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/modbus/server/enable/{idx}:
    parameters:
      - name: idx
        in: path
        description: |
          The index of an enabled Modbus protocol.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /config/modbus/server/enable/{idx}
      summary: Get /config/modbus/server/enable/{idx}
      operationId: configModbusServerEnableItem:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configModbusServerEnableItem'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/modbus/server/enable/{idx}
      summary: Replace /config/modbus/server/enable/{idx}
      operationId: configModbusServerEnableItem:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusServerEnableItem'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/modbus/server/enable/{idx}
      summary: Update /config/modbus/server/enable/{idx}
      operationId: configModbusServerEnableItem:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusServerEnableItem'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/modbus/server/enable/{idx}
      summary: Delete /config/modbus/server/enable/{idx}
      operationId: configModbusServerEnableItem:delete
      description: |
        Disable this protocol.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/modbus/server/id:
    get:
      tags:
        - /config/modbus/server/id
      summary: Get /config/modbus/server/id
      operationId: configModbusServerId:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configModbusServerId'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/modbus/server/id
      summary: Replace /config/modbus/server/id
      operationId: configModbusServerId:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusServerId'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/modbus/server/id
      summary: Update /config/modbus/server/id
      operationId: configModbusServerId:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusServerId'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/modbus/server/id
      summary: Delete /config/modbus/server/id
      operationId: configModbusServerId:delete
      description: |
        Reset to 1.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/modbus/server/rtu:
    get:
      tags:
        - /config/modbus/server/rtu
      summary: Get /config/modbus/server/rtu
      operationId: configModbusServerRtu:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configModbusServerRtu'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/modbus/server/rtu
      summary: Replace /config/modbus/server/rtu
      operationId: configModbusServerRtu:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusServerRtu'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/modbus/server/rtu
      summary: Update /config/modbus/server/rtu
      operationId: configModbusServerRtu:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusServerRtu'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/modbus/server/rtu
      summary: Delete /config/modbus/server/rtu
      operationId: configModbusServerRtu:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/modbus/server/rtu/port:
    get:
      tags:
        - /config/modbus/server/rtu/port
      summary: Get /config/modbus/server/rtu/port
      operationId: configModbusServerRtuPort:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configModbusServerRtuPort'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/modbus/server/rtu/port
      summary: Replace /config/modbus/server/rtu/port
      operationId: configModbusServerRtuPort:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusServerRtuPort'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/modbus/server/rtu/port
      summary: Update /config/modbus/server/rtu/port
      operationId: configModbusServerRtuPort:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusServerRtuPort'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/modbus/server/rtu/port
      summary: Delete /config/modbus/server/rtu/port
      operationId: configModbusServerRtuPort:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/modbus/server/tcp:
    get:
      tags:
        - /config/modbus/server/tcp
      summary: Get /config/modbus/server/tcp
      operationId: configModbusServerTcp:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configModbusServerTcp'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/modbus/server/tcp
      summary: Replace /config/modbus/server/tcp
      operationId: configModbusServerTcp:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusServerTcp'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/modbus/server/tcp
      summary: Update /config/modbus/server/tcp
      operationId: configModbusServerTcp:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusServerTcp'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/modbus/server/tcp
      summary: Delete /config/modbus/server/tcp
      operationId: configModbusServerTcp:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/modbus/server/tcp/port:
    get:
      tags:
        - /config/modbus/server/tcp/port
      summary: Get /config/modbus/server/tcp/port
      operationId: configModbusServerTcpPort:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configModbusServerTcpPort'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/modbus/server/tcp/port
      summary: Replace /config/modbus/server/tcp/port
      operationId: configModbusServerTcpPort:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusServerTcpPort'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/modbus/server/tcp/port
      summary: Update /config/modbus/server/tcp/port
      operationId: configModbusServerTcpPort:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configModbusServerTcpPort'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/modbus/server/tcp/port
      summary: Delete /config/modbus/server/tcp/port
      operationId: configModbusServerTcpPort:delete
      description: |
        Reset to 502.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net:
    get:
      tags:
        - /config/net
      summary: Get /config/net
      operationId: configNet:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNet'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net
      summary: Replace /config/net
      operationId: configNet:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNet'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net
      summary: Update /config/net
      operationId: configNet:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNet'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net
      summary: Delete /config/net
      operationId: configNet:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/ethernet:
    get:
      tags:
        - /config/net/ethernet
      summary: Get /config/net/ethernet
      operationId: configNetEthernet:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetEthernet'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/ethernet
      summary: Replace /config/net/ethernet
      operationId: configNetEthernet:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetEthernet'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/ethernet
      summary: Update /config/net/ethernet
      operationId: configNetEthernet:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetEthernet'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/ethernet
      summary: Delete /config/net/ethernet
      operationId: configNetEthernet:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/ethernet/watchdog:
    get:
      tags:
        - /config/net/ethernet/watchdog
      summary: Get /config/net/ethernet/watchdog
      operationId: configNetEthernetWatchdog:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetEthernetWatchdog'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/ethernet/watchdog
      summary: Replace /config/net/ethernet/watchdog
      operationId: configNetEthernetWatchdog:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetEthernetWatchdog'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/ethernet/watchdog
      summary: Update /config/net/ethernet/watchdog
      operationId: configNetEthernetWatchdog:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetEthernetWatchdog'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/ethernet/watchdog
      summary: Delete /config/net/ethernet/watchdog
      operationId: configNetEthernetWatchdog:delete
      description: |
        Reset to `true`.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/goproxy:
    get:
      tags:
        - /config/net/goproxy
      summary: Get /config/net/goproxy
      operationId: configNetGoproxy:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetGoproxy'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/goproxy
      summary: Replace /config/net/goproxy
      operationId: configNetGoproxy:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetGoproxy'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/goproxy
      summary: Update /config/net/goproxy
      operationId: configNetGoproxy:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetGoproxy'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/goproxy
      summary: Delete /config/net/goproxy
      operationId: configNetGoproxy:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/goproxy/enable:
    get:
      tags:
        - /config/net/goproxy/enable
      summary: Get /config/net/goproxy/enable
      operationId: configNetGoproxyEnable:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetGoproxyEnable'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/goproxy/enable
      summary: Replace /config/net/goproxy/enable
      operationId: configNetGoproxyEnable:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetGoproxyEnable'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/goproxy/enable
      summary: Update /config/net/goproxy/enable
      operationId: configNetGoproxyEnable:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetGoproxyEnable'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/goproxy/enable
      summary: Delete /config/net/goproxy/enable
      operationId: configNetGoproxyEnable:delete
      description: Reset to `false`.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/goproxy/server:
    get:
      tags:
        - /config/net/goproxy/server
      summary: Get /config/net/goproxy/server
      operationId: configNetGoproxyServer:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetGoproxyServer'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/goproxy/server
      summary: Replace /config/net/goproxy/server
      operationId: configNetGoproxyServer:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetGoproxyServer'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/goproxy/server
      summary: Update /config/net/goproxy/server
      operationId: configNetGoproxyServer:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetGoproxyServer'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/goproxy/server
      summary: Delete /config/net/goproxy/server
      operationId: configNetGoproxyServer:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/homeplug:
    get:
      tags:
        - /config/net/homeplug
      summary: Get /config/net/homeplug
      operationId: configNetHomeplug:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetHomeplug'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/homeplug
      summary: Replace /config/net/homeplug
      operationId: configNetHomeplug:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetHomeplug'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/homeplug
      summary: Update /config/net/homeplug
      operationId: configNetHomeplug:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetHomeplug'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/homeplug
      summary: Delete /config/net/homeplug
      operationId: configNetHomeplug:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/homeplug/region:
    get:
      tags:
        - /config/net/homeplug/region
      summary: Get /config/net/homeplug/region
      operationId: configNetHomeplugRegion:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetHomeplugRegion'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/homeplug/region
      summary: Replace /config/net/homeplug/region
      operationId: configNetHomeplugRegion:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetHomeplugRegion'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/homeplug/region
      summary: Update /config/net/homeplug/region
      operationId: configNetHomeplugRegion:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetHomeplugRegion'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/homeplug/region
      summary: Delete /config/net/homeplug/region
      operationId: configNetHomeplugRegion:delete
      description: |
        Reset to `NA`.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/hostname:
    get:
      tags:
        - /config/net/hostname
      summary: Get /config/net/hostname
      operationId: configNetHostname:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetHostname'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/hostname
      summary: Replace /config/net/hostname
      operationId: configNetHostname:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetHostname'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/hostname
      summary: Update /config/net/hostname
      operationId: configNetHostname:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetHostname'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/hostname
      summary: Delete /config/net/hostname
      operationId: configNetHostname:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/http:
    get:
      tags:
        - /config/net/http
      summary: Get /config/net/http
      operationId: configNetHttp:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetHttp'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/http
      summary: Replace /config/net/http
      operationId: configNetHttp:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetHttp'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/http
      summary: Update /config/net/http
      operationId: configNetHttp:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetHttp'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/http
      summary: Delete /config/net/http
      operationId: configNetHttp:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/http/client:
    get:
      tags:
        - /config/net/http/client
      summary: Get /config/net/http/client
      operationId: configNetHttpClient:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetHttpClient'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/http/client
      summary: Replace /config/net/http/client
      operationId: configNetHttpClient:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetHttpClient'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/http/client
      summary: Update /config/net/http/client
      operationId: configNetHttpClient:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetHttpClient'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/http/client
      summary: Delete /config/net/http/client
      operationId: configNetHttpClient:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/http/client/insecure:
    get:
      tags:
        - /config/net/http/client/insecure
      summary: Get /config/net/http/client/insecure
      operationId: configNetHttpClientInsecure:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetHttpClientInsecure'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/http/client/insecure
      summary: Replace /config/net/http/client/insecure
      operationId: configNetHttpClientInsecure:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetHttpClientInsecure'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/http/client/insecure
      summary: Update /config/net/http/client/insecure
      operationId: configNetHttpClientInsecure:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetHttpClientInsecure'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/http/client/insecure
      summary: Delete /config/net/http/client/insecure
      operationId: configNetHttpClientInsecure:delete
      description: Reset to `false`.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/http/certificate:
    put:
      tags:
        - /config/net/http/certificate
      summary: Replace /config/net/http/certificate
      operationId: configNetHttpCertificate:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetHttpCertificate'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/http/certificate
      summary: Update /config/net/http/certificate
      operationId: configNetHttpCertificate:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetHttpCertificate'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/http/certificate
      summary: Delete /config/net/http/certificate
      operationId: configNetHttpCertificate:delete
      description: |
        Reset to a factory-installed self-signed certificate.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/http/cgi-bin:
    get:
      tags:
        - /config/net/http/cgi-bin
      summary: Get /config/net/http/cgi-bin
      operationId: configNetHttpCgiBin:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetHttpCgiBin'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/http/cgi-bin
      summary: Replace /config/net/http/cgi-bin
      operationId: configNetHttpCgiBin:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetHttpCgiBin'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/http/cgi-bin
      summary: Update /config/net/http/cgi-bin
      operationId: configNetHttpCgiBin:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetHttpCgiBin'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/http/cgi-bin
      summary: Delete /config/net/http/cgi-bin
      operationId: configNetHttpCgiBin:delete
      description: |
        Reset to `disable`.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/ipv4:
    get:
      tags:
        - /config/net/ipv4
      summary: Get /config/net/ipv4
      operationId: configNetIpv4:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetIpv4'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/ipv4
      summary: Replace /config/net/ipv4
      operationId: configNetIpv4:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetIpv4'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/ipv4
      summary: Update /config/net/ipv4
      operationId: configNetIpv4:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetIpv4'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/ipv4
      summary: Delete /config/net/ipv4
      operationId: configNetIpv4:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/ipv4/dhcp:
    get:
      tags:
        - /config/net/ipv4/dhcp
      summary: Get /config/net/ipv4/dhcp
      operationId: configNetIpv4Dhcp:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetIpv4Dhcp'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/ipv4/dhcp
      summary: Replace /config/net/ipv4/dhcp
      operationId: configNetIpv4Dhcp:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetIpv4Dhcp'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/ipv4/dhcp
      summary: Update /config/net/ipv4/dhcp
      operationId: configNetIpv4Dhcp:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetIpv4Dhcp'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/ipv4/dhcp
      summary: Delete /config/net/ipv4/dhcp
      operationId: configNetIpv4Dhcp:delete
      description: |
        Reset to `true`.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/ipv4/address:
    get:
      tags:
        - /config/net/ipv4/address
      summary: Get /config/net/ipv4/address
      operationId: configNetIpv4Address:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetIpv4Address'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/ipv4/address
      summary: Replace /config/net/ipv4/address
      operationId: configNetIpv4Address:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetIpv4Address'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/ipv4/address
      summary: Update /config/net/ipv4/address
      operationId: configNetIpv4Address:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetIpv4Address'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/ipv4/address
      summary: Delete /config/net/ipv4/address
      operationId: configNetIpv4Address:delete
      description: |
        Reset to 0.0.0.0.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/ipv4/broadcast:
    get:
      tags:
        - /config/net/ipv4/broadcast
      summary: Get /config/net/ipv4/broadcast
      operationId: configNetIpv4Broadcast:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetIpv4Broadcast'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/ipv4/broadcast
      summary: Replace /config/net/ipv4/broadcast
      operationId: configNetIpv4Broadcast:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetIpv4Broadcast'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/ipv4/broadcast
      summary: Update /config/net/ipv4/broadcast
      operationId: configNetIpv4Broadcast:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetIpv4Broadcast'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/ipv4/broadcast
      summary: Delete /config/net/ipv4/broadcast
      operationId: configNetIpv4Broadcast:delete
      description: |
        Reset to 0.0.0.0.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/ipv4/netmask:
    get:
      tags:
        - /config/net/ipv4/netmask
      summary: Get /config/net/ipv4/netmask
      operationId: configNetIpv4Netmask:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetIpv4Netmask'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/ipv4/netmask
      summary: Replace /config/net/ipv4/netmask
      operationId: configNetIpv4Netmask:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetIpv4Netmask'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/ipv4/netmask
      summary: Update /config/net/ipv4/netmask
      operationId: configNetIpv4Netmask:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetIpv4Netmask'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/ipv4/netmask
      summary: Delete /config/net/ipv4/netmask
      operationId: configNetIpv4Netmask:delete
      description: |
        Reset to 0.0.0.0.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/ipv4/network:
    get:
      tags:
        - /config/net/ipv4/network
      summary: Get /config/net/ipv4/network
      operationId: configNetIpv4Network:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetIpv4Network'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/ipv4/network
      summary: Replace /config/net/ipv4/network
      operationId: configNetIpv4Network:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetIpv4Network'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/ipv4/network
      summary: Update /config/net/ipv4/network
      operationId: configNetIpv4Network:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetIpv4Network'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/ipv4/network
      summary: Delete /config/net/ipv4/network
      operationId: configNetIpv4Network:delete
      description: |
        Reset to 0.0.0.0.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/ipv4/gateway:
    get:
      tags:
        - /config/net/ipv4/gateway
      summary: Get /config/net/ipv4/gateway
      operationId: configNetIpv4Gateway:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetIpv4Gateway'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/ipv4/gateway
      summary: Replace /config/net/ipv4/gateway
      operationId: configNetIpv4Gateway:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetIpv4Gateway'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/ipv4/gateway
      summary: Update /config/net/ipv4/gateway
      operationId: configNetIpv4Gateway:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetIpv4Gateway'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/ipv4/gateway
      summary: Delete /config/net/ipv4/gateway
      operationId: configNetIpv4Gateway:delete
      description: |
        Reset to 0.0.0.0.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/nameserver:
    get:
      tags:
        - /config/net/nameserver
      summary: Get /config/net/nameserver
      operationId: configNetNameserver:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetNameserver'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/nameserver
      summary: Replace /config/net/nameserver
      operationId: configNetNameserver:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetNameserver'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/nameserver
      summary: Update /config/net/nameserver
      operationId: configNetNameserver:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetNameserver'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/nameserver
      summary: Delete /config/net/nameserver
      operationId: configNetNameserver:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/nameserver/server:
    get:
      tags:
        - /config/net/nameserver/server
      summary: Get /config/net/nameserver/server
      operationId: configNetNameserverServer:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetNameserverServer'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/nameserver/server
      summary: Replace /config/net/nameserver/server
      operationId: configNetNameserverServer:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetNameserverServer'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/nameserver/server
      summary: Update /config/net/nameserver/server
      operationId: configNetNameserverServer:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetNameserverServer'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/nameserver/server
      summary: Delete /config/net/nameserver/server
      operationId: configNetNameserverServer:delete
      description: Reset to empty array.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/nameserver/server/{idx}:
    parameters:
      - name: idx
        in: path
        description: |
          The index of a DNS server.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /config/net/nameserver/server/{idx}
      summary: Get /config/net/nameserver/server/{idx}
      operationId: configNetNameserverServerItem:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetNameserverServerItem'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/nameserver/server/{idx}
      summary: Replace /config/net/nameserver/server/{idx}
      operationId: configNetNameserverServerItem:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetNameserverServerItem'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/nameserver/server/{idx}
      summary: Update /config/net/nameserver/server/{idx}
      operationId: configNetNameserverServerItem:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetNameserverServerItem'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/nameserver/server/{idx}
      summary: Delete /config/net/nameserver/server/{idx}
      operationId: configNetNameserverServerItem:delete
      description: |
        Remove this name server.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/ntp:
    get:
      tags:
        - /config/net/ntp
      summary: Get /config/net/ntp
      operationId: configNetNtp:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetNtp'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/ntp
      summary: Replace /config/net/ntp
      operationId: configNetNtp:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetNtp'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/ntp
      summary: Update /config/net/ntp
      operationId: configNetNtp:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetNtp'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/ntp
      summary: Delete /config/net/ntp
      operationId: configNetNtp:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/ntp/server:
    get:
      tags:
        - /config/net/ntp/server
      summary: Get /config/net/ntp/server
      operationId: configNetNtpServer:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetNtpServer'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/ntp/server
      summary: Replace /config/net/ntp/server
      operationId: configNetNtpServer:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetNtpServer'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/ntp/server
      summary: Update /config/net/ntp/server
      operationId: configNetNtpServer:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetNtpServer'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/ntp/server
      summary: Delete /config/net/ntp/server
      operationId: configNetNtpServer:delete
      description: Reset to empty array.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/ntp/server/{idx}:
    parameters:
      - name: idx
        in: path
        description: |
          The index of an NTP server.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /config/net/ntp/server/{idx}
      summary: Get /config/net/ntp/server/{idx}
      operationId: configNetNtpServerItem:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetNtpServerItem'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/ntp/server/{idx}
      summary: Replace /config/net/ntp/server/{idx}
      operationId: configNetNtpServerItem:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetNtpServerItem'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/ntp/server/{idx}
      summary: Update /config/net/ntp/server/{idx}
      operationId: configNetNtpServerItem:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetNtpServerItem'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/ntp/server/{idx}
      summary: Delete /config/net/ntp/server/{idx}
      operationId: configNetNtpServerItem:delete
      description: |
        Remove this NTP server.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/proxy:
    get:
      tags:
        - /config/net/proxy
      summary: Get /config/net/proxy
      operationId: configNetProxy:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetProxy'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/proxy
      summary: Replace /config/net/proxy
      operationId: configNetProxy:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetProxy'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/proxy
      summary: Update /config/net/proxy
      operationId: configNetProxy:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetProxy'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/proxy
      summary: Delete /config/net/proxy
      operationId: configNetProxy:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/proxy/enable:
    get:
      tags:
        - /config/net/proxy/enable
      summary: Get /config/net/proxy/enable
      operationId: configNetProxyEnable:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetProxyEnable'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/proxy/enable
      summary: Replace /config/net/proxy/enable
      operationId: configNetProxyEnable:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetProxyEnable'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/proxy/enable
      summary: Update /config/net/proxy/enable
      operationId: configNetProxyEnable:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetProxyEnable'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/proxy/enable
      summary: Delete /config/net/proxy/enable
      operationId: configNetProxyEnable:delete
      description: Reset to `false`.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/proxy/server:
    get:
      tags:
        - /config/net/proxy/server
      summary: Get /config/net/proxy/server
      operationId: configNetProxyServer:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetProxyServer'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/proxy/server
      summary: Replace /config/net/proxy/server
      operationId: configNetProxyServer:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetProxyServer'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/proxy/server
      summary: Update /config/net/proxy/server
      operationId: configNetProxyServer:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetProxyServer'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/proxy/server
      summary: Delete /config/net/proxy/server
      operationId: configNetProxyServer:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/ptp:
    get:
      tags:
        - /config/net/ptp
      summary: Get /config/net/ptp
      operationId: configNetPtp:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetPtp'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/ptp
      summary: Replace /config/net/ptp
      operationId: configNetPtp:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetPtp'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/ptp
      summary: Update /config/net/ptp
      operationId: configNetPtp:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetPtp'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/ptp
      summary: Delete /config/net/ptp
      operationId: configNetPtp:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/ptp/client_only:
    get:
      tags:
        - /config/net/ptp/client_only
      summary: Get /config/net/ptp/client_only
      operationId: configNetPtpClientOnly:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetPtpClientOnly'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/ptp/client_only
      summary: Replace /config/net/ptp/client_only
      operationId: configNetPtpClientOnly:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetPtpClientOnly'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/ptp/client_only
      summary: Update /config/net/ptp/client_only
      operationId: configNetPtpClientOnly:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetPtpClientOnly'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/ptp/client_only
      summary: Delete /config/net/ptp/client_only
      operationId: configNetPtpClientOnly:delete
      description: Reset to `false`.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/ptp/interface:
    get:
      tags:
        - /config/net/ptp/interface
      summary: Get /config/net/ptp/interface
      operationId: configNetPtpInterface:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetPtpInterface'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/ptp/interface
      summary: Replace /config/net/ptp/interface
      operationId: configNetPtpInterface:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetPtpInterface'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/ptp/interface
      summary: Update /config/net/ptp/interface
      operationId: configNetPtpInterface:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetPtpInterface'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/ptp/interface
      summary: Delete /config/net/ptp/interface
      operationId: configNetPtpInterface:delete
      description: |
        Reset to empty (PTP disabled).
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/ptp/interface/{if}:
    parameters:
      - name: if
        in: path
        description: |
          The name of a network interface to use for PTP.
        required: true
        schema:
          type: string
          example: eth0
    get:
      tags:
        - /config/net/ptp/interface/{if}
      summary: Get /config/net/ptp/interface/{if}
      operationId: configNetPtpInterfaceIf:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetPtpInterfaceIf'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/ptp/interface/{if}
      summary: Replace /config/net/ptp/interface/{if}
      operationId: configNetPtpInterfaceIf:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetPtpInterfaceIf'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/ptp/interface/{if}
      summary: Update /config/net/ptp/interface/{if}
      operationId: configNetPtpInterfaceIf:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetPtpInterfaceIf'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/ptp/interface/{if}
      summary: Delete /config/net/ptp/interface/{if}
      operationId: configNetPtpInterfaceIf:delete
      description: |
        Remove this interface.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/net/ptp/interface/{if}/transport:
    parameters:
      - name: if
        in: path
        description: |
          The name of a network interface to use for PTP.
        required: true
        schema:
          type: string
          example: eth0
    get:
      tags:
        - /config/net/ptp/interface/{if}/transport
      summary: Get /config/net/ptp/interface/{if}/transport
      operationId: configNetPtpInterfaceIfTransport:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configNetPtpInterfaceIfTransport'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/net/ptp/interface/{if}/transport
      summary: Replace /config/net/ptp/interface/{if}/transport
      operationId: configNetPtpInterfaceIfTransport:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetPtpInterfaceIfTransport'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/net/ptp/interface/{if}/transport
      summary: Update /config/net/ptp/interface/{if}/transport
      operationId: configNetPtpInterfaceIfTransport:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configNetPtpInterfaceIfTransport'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/net/ptp/interface/{if}/transport
      summary: Delete /config/net/ptp/interface/{if}/transport
      operationId: configNetPtpInterfaceIfTransport:delete
      description: |
        Reset to `UDPv4`.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/push:
    get:
      tags:
        - /config/push
      summary: Get /config/push
      operationId: configPush:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configPush'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/push
      summary: Replace /config/push
      operationId: configPush:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configPush'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/push
      summary: Update /config/push
      operationId: configPush:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configPush'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/push
      summary: Delete /config/push
      operationId: configPush:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/push/interval:
    get:
      tags:
        - /config/push/interval
      summary: Get /config/push/interval
      operationId: configPushInterval:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configPushInterval'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/push/interval
      summary: Replace /config/push/interval
      operationId: configPushInterval:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configPushInterval'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/push/interval
      summary: Update /config/push/interval
      operationId: configPushInterval:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configPushInterval'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/push/interval
      summary: Delete /config/push/interval
      operationId: configPushInterval:delete
      description: |
        Reset to 60.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/push/options:
    get:
      tags:
        - /config/push/options
      summary: Get /config/push/options
      operationId: configPushOptions:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configPushOptions'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/push/options
      summary: Replace /config/push/options
      operationId: configPushOptions:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configPushOptions'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/push/options
      summary: Update /config/push/options
      operationId: configPushOptions:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configPushOptions'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/push/options
      summary: Delete /config/push/options
      operationId: configPushOptions:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/push/password:
    put:
      tags:
        - /config/push/password
      summary: Replace /config/push/password
      operationId: configPushPassword:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configPushPassword'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/push/password
      summary: Update /config/push/password
      operationId: configPushPassword:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configPushPassword'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/push/password
      summary: Delete /config/push/password
      operationId: configPushPassword:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/push/service:
    get:
      tags:
        - /config/push/service
      summary: Get /config/push/service
      operationId: configPushService:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configPushService'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/push/service
      summary: Replace /config/push/service
      operationId: configPushService:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configPushService'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/push/service
      summary: Update /config/push/service
      operationId: configPushService:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configPushService'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/push/service
      summary: Delete /config/push/service
      operationId: configPushService:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/push/uri:
    get:
      tags:
        - /config/push/uri
      summary: Get /config/push/uri
      operationId: configPushUri:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configPushUri'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/push/uri
      summary: Replace /config/push/uri
      operationId: configPushUri:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configPushUri'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/push/uri
      summary: Update /config/push/uri
      operationId: configPushUri:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configPushUri'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/push/uri
      summary: Delete /config/push/uri
      operationId: configPushUri:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/push/user:
    get:
      tags:
        - /config/push/user
      summary: Get /config/push/user
      operationId: configPushUser:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configPushUser'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/push/user
      summary: Replace /config/push/user
      operationId: configPushUser:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configPushUser'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/push/user
      summary: Update /config/push/user
      operationId: configPushUser:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configPushUser'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/push/user
      summary: Delete /config/push/user
      operationId: configPushUser:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/register:
    get:
      tags:
        - /config/register
      summary: Get /config/register
      operationId: configRegister:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configRegister'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/register
      summary: Replace /config/register
      operationId: configRegister:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configRegister'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/register
      summary: Update /config/register
      operationId: configRegister:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configRegister'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/register
      summary: Delete /config/register
      operationId: configRegister:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/register/physical:
    get:
      tags:
        - /config/register/physical
      summary: Get /config/register/physical
      operationId: configRegisterPhysical:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configRegisterPhysical'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/register/physical
      summary: Replace /config/register/physical
      operationId: configRegisterPhysical:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configRegisterPhysical'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/register/physical
      summary: Update /config/register/physical
      operationId: configRegisterPhysical:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configRegisterPhysical'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/register/physical
      summary: Delete /config/register/physical
      operationId: configRegisterPhysical:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/register/physical/{reg}:
    parameters:
      - name: reg
        in: path
        description: |
          The name of a register.  May not be empty, contain control
          characters, dots (`.`), or commas (`,`) and may not consist
          entirely of digits.
        required: true
        schema:
          type: string
    get:
      tags:
        - /config/register/physical/{reg}
      summary: Get /config/register/physical/{reg}
      operationId: configRegisterPhysicalReg:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configRegisterPhysicalReg'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/register/physical/{reg}
      summary: Replace /config/register/physical/{reg}
      operationId: configRegisterPhysicalReg:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configRegisterPhysicalReg'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/register/physical/{reg}
      summary: Update /config/register/physical/{reg}
      operationId: configRegisterPhysicalReg:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configRegisterPhysicalReg'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/register/physical/{reg}
      summary: Delete /config/register/physical/{reg}
      operationId: configRegisterPhysicalReg:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/register/physical/{reg}/dev:
    parameters:
      - name: reg
        in: path
        description: |
          The name of a register.  May not be empty, contain control
          characters, dots (`.`), or commas (`,`) and may not consist
          entirely of digits.
        required: true
        schema:
          type: string
    get:
      tags:
        - /config/register/physical/{reg}/dev
      summary: Get /config/register/physical/{reg}/dev
      operationId: configRegisterPhysicalRegDev:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configRegisterPhysicalRegDev'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/register/physical/{reg}/dev
      summary: Replace /config/register/physical/{reg}/dev
      operationId: configRegisterPhysicalRegDev:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configRegisterPhysicalRegDev'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/register/physical/{reg}/dev
      summary: Update /config/register/physical/{reg}/dev
      operationId: configRegisterPhysicalRegDev:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configRegisterPhysicalRegDev'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/register/physical/{reg}/dev
      summary: Delete /config/register/physical/{reg}/dev
      operationId: configRegisterPhysicalRegDev:delete
      description: |
        Reset to `local`.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/register/physical/{reg}/did:
    parameters:
      - name: reg
        in: path
        description: |
          The name of a register.  May not be empty, contain control
          characters, dots (`.`), or commas (`,`) and may not consist
          entirely of digits.
        required: true
        schema:
          type: string
    get:
      tags:
        - /config/register/physical/{reg}/did
      summary: Get /config/register/physical/{reg}/did
      operationId: configRegisterPhysicalRegDid:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configRegisterPhysicalRegDid'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/register/physical/{reg}/did
      summary: Replace /config/register/physical/{reg}/did
      operationId: configRegisterPhysicalRegDid:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configRegisterPhysicalRegDid'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/register/physical/{reg}/did
      summary: Update /config/register/physical/{reg}/did
      operationId: configRegisterPhysicalRegDid:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configRegisterPhysicalRegDid'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/register/physical/{reg}/did
      summary: Delete /config/register/physical/{reg}/did
      operationId: configRegisterPhysicalRegDid:delete
      description: Reset to 0.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/register/physical/{reg}/type:
    parameters:
      - name: reg
        in: path
        description: |
          The name of a register.  May not be empty, contain control
          characters, dots (`.`), or commas (`,`) and may not consist
          entirely of digits.
        required: true
        schema:
          type: string
    get:
      tags:
        - /config/register/physical/{reg}/type
      summary: Get /config/register/physical/{reg}/type
      operationId: configRegisterPhysicalRegType:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configRegisterPhysicalRegType'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/register/physical/{reg}/type
      summary: Replace /config/register/physical/{reg}/type
      operationId: configRegisterPhysicalRegType:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configRegisterPhysicalRegType'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/register/physical/{reg}/type
      summary: Update /config/register/physical/{reg}/type
      operationId: configRegisterPhysicalRegType:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configRegisterPhysicalRegType'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/register/physical/{reg}/type
      summary: Delete /config/register/physical/{reg}/type
      operationId: configRegisterPhysicalRegType:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/register/physical/{reg}/value:
    parameters:
      - name: reg
        in: path
        description: |
          The name of a register.  May not be empty, contain control
          characters, dots (`.`), or commas (`,`) and may not consist
          entirely of digits.
        required: true
        schema:
          type: string
    get:
      tags:
        - /config/register/physical/{reg}/value
      summary: Get /config/register/physical/{reg}/value
      operationId: configRegisterPhysicalRegValue:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configRegisterPhysicalRegValue'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/register/physical/{reg}/value
      summary: Replace /config/register/physical/{reg}/value
      operationId: configRegisterPhysicalRegValue:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configRegisterPhysicalRegValue'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/register/physical/{reg}/value
      summary: Update /config/register/physical/{reg}/value
      operationId: configRegisterPhysicalRegValue:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configRegisterPhysicalRegValue'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/register/physical/{reg}/value
      summary: Delete /config/register/physical/{reg}/value
      operationId: configRegisterPhysicalRegValue:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/register/virtual:
    get:
      tags:
        - /config/register/virtual
      summary: Get /config/register/virtual
      operationId: configRegisterVirtual:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configRegisterVirtual'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/register/virtual
      summary: Replace /config/register/virtual
      operationId: configRegisterVirtual:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configRegisterVirtual'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/register/virtual
      summary: Update /config/register/virtual
      operationId: configRegisterVirtual:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configRegisterVirtual'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/register/virtual
      summary: Delete /config/register/virtual
      operationId: configRegisterVirtual:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/register/virtual/{reg}:
    parameters:
      - name: reg
        in: path
        description: |
          The name of a virtual register.  May not be empty, contain
          commas (`,`), and may not consist entirely of digits. Virtual
          register names may contain a single dot (`.`) between a prefix
          and a suffix.  The prefix is called the [view
          name](#tag/Glossary/View-Names).
        required: true
        schema:
          type: string
    get:
      tags:
        - /config/register/virtual/{reg}
      summary: Get /config/register/virtual/{reg}
      operationId: configRegisterVirtualReg:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configRegisterVirtualReg'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/register/virtual/{reg}
      summary: Replace /config/register/virtual/{reg}
      operationId: configRegisterVirtualReg:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configRegisterVirtualReg'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/register/virtual/{reg}
      summary: Update /config/register/virtual/{reg}
      operationId: configRegisterVirtualReg:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configRegisterVirtualReg'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/register/virtual/{reg}
      summary: Delete /config/register/virtual/{reg}
      operationId: configRegisterVirtualReg:delete
      description: |
        Remove this virtual register.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/register/virtual/{reg}/value:
    parameters:
      - name: reg
        in: path
        description: |
          The name of a virtual register.  May not be empty, contain
          commas (`,`), and may not consist entirely of digits. Virtual
          register names may contain a single dot (`.`) between a prefix
          and a suffix.  The prefix is called the [view
          name](#tag/Glossary/View-Names).
        required: true
        schema:
          type: string
    get:
      tags:
        - /config/register/virtual/{reg}/value
      summary: Get /config/register/virtual/{reg}/value
      operationId: configRegisterVirtualRegValue:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configRegisterVirtualRegValue'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/register/virtual/{reg}/value
      summary: Replace /config/register/virtual/{reg}/value
      operationId: configRegisterVirtualRegValue:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configRegisterVirtualRegValue'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/register/virtual/{reg}/value
      summary: Update /config/register/virtual/{reg}/value
      operationId: configRegisterVirtualRegValue:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configRegisterVirtualRegValue'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/register/virtual/{reg}/value
      summary: Delete /config/register/virtual/{reg}/value
      operationId: configRegisterVirtualRegValue:delete
      description: Reset to empty array.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/register/virtual/{reg}/value/{idx}:
    parameters:
      - name: reg
        in: path
        description: |
          The name of a virtual register.  May not be empty, contain
          commas (`,`), and may not consist entirely of digits. Virtual
          register names may contain a single dot (`.`) between a prefix
          and a suffix.  The prefix is called the [view
          name](#tag/Glossary/View-Names).
        required: true
        schema:
          type: string
      - name: idx
        in: path
        description: |
          The index of a virtual register addend.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /config/register/virtual/{reg}/value/{idx}
      summary: Get /config/register/virtual/{reg}/value/{idx}
      operationId: configRegisterVirtualRegValueItem:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configRegisterVirtualRegValueItem'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/register/virtual/{reg}/value/{idx}
      summary: Replace /config/register/virtual/{reg}/value/{idx}
      operationId: configRegisterVirtualRegValueItem:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configRegisterVirtualRegValueItem'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/register/virtual/{reg}/value/{idx}
      summary: Update /config/register/virtual/{reg}/value/{idx}
      operationId: configRegisterVirtualRegValueItem:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configRegisterVirtualRegValueItem'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/register/virtual/{reg}/value/{idx}
      summary: Delete /config/register/virtual/{reg}/value/{idx}
      operationId: configRegisterVirtualRegValueItem:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/register/virtual/{reg}/value/{idx}/op:
    parameters:
      - name: reg
        in: path
        description: |
          The name of a virtual register.  May not be empty, contain
          commas (`,`), and may not consist entirely of digits. Virtual
          register names may contain a single dot (`.`) between a prefix
          and a suffix.  The prefix is called the [view
          name](#tag/Glossary/View-Names).
        required: true
        schema:
          type: string
      - name: idx
        in: path
        description: |
          The index of a virtual register addend.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /config/register/virtual/{reg}/value/{idx}/op
      summary: Get /config/register/virtual/{reg}/value/{idx}/op
      operationId: configRegisterVirtualRegValueItemOp:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configRegisterVirtualRegValueItemOp'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/register/virtual/{reg}/value/{idx}/op
      summary: Replace /config/register/virtual/{reg}/value/{idx}/op
      operationId: configRegisterVirtualRegValueItemOp:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configRegisterVirtualRegValueItemOp'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/register/virtual/{reg}/value/{idx}/op
      summary: Update /config/register/virtual/{reg}/value/{idx}/op
      operationId: configRegisterVirtualRegValueItemOp:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configRegisterVirtualRegValueItemOp'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/register/virtual/{reg}/value/{idx}/op
      summary: Delete /config/register/virtual/{reg}/value/{idx}/op
      operationId: configRegisterVirtualRegValueItemOp:delete
      description: |
        Reset to `+`.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/register/virtual/{reg}/value/{idx}/register:
    parameters:
      - name: reg
        in: path
        description: |
          The name of a virtual register.  May not be empty, contain
          commas (`,`), and may not consist entirely of digits. Virtual
          register names may contain a single dot (`.`) between a prefix
          and a suffix.  The prefix is called the [view
          name](#tag/Glossary/View-Names).
        required: true
        schema:
          type: string
      - name: idx
        in: path
        description: |
          The index of a virtual register addend.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /config/register/virtual/{reg}/value/{idx}/register
      summary: Get /config/register/virtual/{reg}/value/{idx}/register
      operationId: configRegisterVirtualRegValueItemRegister:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configRegisterVirtualRegValueItemRegister'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/register/virtual/{reg}/value/{idx}/register
      summary: Replace /config/register/virtual/{reg}/value/{idx}/register
      operationId: configRegisterVirtualRegValueItemRegister:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configRegisterVirtualRegValueItemRegister'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/register/virtual/{reg}/value/{idx}/register
      summary: Update /config/register/virtual/{reg}/value/{idx}/register
      operationId: configRegisterVirtualRegValueItemRegister:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configRegisterVirtualRegValueItemRegister'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/register/virtual/{reg}/value/{idx}/register
      summary: Delete /config/register/virtual/{reg}/value/{idx}/register
      operationId: configRegisterVirtualRegValueItemRegister:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/time:
    get:
      tags:
        - /config/time
      summary: Get /config/time
      operationId: configTime:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configTime'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/time
      summary: Replace /config/time
      operationId: configTime:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configTime'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/time
      summary: Update /config/time
      operationId: configTime:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configTime'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/time
      summary: Delete /config/time
      operationId: configTime:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/time/zone:
    get:
      tags:
        - /config/time/zone
      summary: Get /config/time/zone
      operationId: configTimeZone:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configTimeZone'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/time/zone
      summary: Replace /config/time/zone
      operationId: configTimeZone:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configTimeZone'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/time/zone
      summary: Update /config/time/zone
      operationId: configTimeZone:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configTimeZone'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/time/zone
      summary: Delete /config/time/zone
      operationId: configTimeZone:delete
      description: |
        Reset to [`UTC`](https://en.wikipedia.org/wiki/Coordinated_Universal_Time).
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/user:
    get:
      tags:
        - /config/user
      summary: Get /config/user
      operationId: configUser:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configUser'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/user
      summary: Replace /config/user
      operationId: configUser:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configUser'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/user
      summary: Update /config/user
      operationId: configUser:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configUser'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/user
      summary: Delete /config/user
      operationId: configUser:delete
      description: |
        Delete all user accounts.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/user/{name}:
    parameters:
      - name: name
        in: path
        description: |
          The name of a user.  Must consist of alpha-numeric characters or
          underscores (`_`).
        required: true
        schema:
          type: string
    get:
      tags:
        - /config/user/{name}
      summary: Get /config/user/{name}
      operationId: configUserName:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configUserName'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/user/{name}
      summary: Replace /config/user/{name}
      operationId: configUserName:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configUserName'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/user/{name}
      summary: Update /config/user/{name}
      operationId: configUserName:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configUserName'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/user/{name}
      summary: Delete /config/user/{name}
      operationId: configUserName:delete
      description: |
        Delete this user account.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/user/{name}/priv:
    parameters:
      - name: name
        in: path
        description: |
          The name of a user.  Must consist of alpha-numeric characters or
          underscores (`_`).
        required: true
        schema:
          type: string
    get:
      tags:
        - /config/user/{name}/priv
      summary: Get /config/user/{name}/priv
      operationId: configUserNamePriv:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configUserNamePriv'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/user/{name}/priv
      summary: Replace /config/user/{name}/priv
      operationId: configUserNamePriv:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configUserNamePriv'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/user/{name}/priv
      summary: Update /config/user/{name}/priv
      operationId: configUserNamePriv:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configUserNamePriv'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/user/{name}/priv
      summary: Delete /config/user/{name}/priv
      operationId: configUserNamePriv:delete
      description: Reset to empty array.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/user/{name}/priv/{idx}:
    parameters:
      - name: name
        in: path
        description: |
          The name of a user.  Must consist of alpha-numeric characters or
          underscores (`_`).
        required: true
        schema:
          type: string
      - name: idx
        in: path
        description: |
          The index of a privilege.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /config/user/{name}/priv/{idx}
      summary: Get /config/user/{name}/priv/{idx}
      operationId: configUserNamePrivItem:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configUserNamePrivItem'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/user/{name}/priv/{idx}
      summary: Replace /config/user/{name}/priv/{idx}
      operationId: configUserNamePrivItem:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configUserNamePrivItem'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/user/{name}/priv/{idx}
      summary: Update /config/user/{name}/priv/{idx}
      operationId: configUserNamePrivItem:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configUserNamePrivItem'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/user/{name}/priv/{idx}
      summary: Delete /config/user/{name}/priv/{idx}
      operationId: configUserNamePrivItem:delete
      description: |
        Remove this privilege.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/user/{name}/hash:
    parameters:
      - name: name
        in: path
        description: |
          The name of a user.  Must consist of alpha-numeric characters or
          underscores (`_`).
        required: true
        schema:
          type: string
    put:
      tags:
        - /config/user/{name}/hash
      summary: Replace /config/user/{name}/hash
      operationId: configUserNameHash:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configUserNameHash'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/user/{name}/hash
      summary: Update /config/user/{name}/hash
      operationId: configUserNameHash:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configUserNameHash'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/user/{name}/hash
      summary: Delete /config/user/{name}/hash
      operationId: configUserNameHash:delete
      description: |
        Delete this user account.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/alert:
    get:
      tags:
        - /config/alert
      summary: Get /config/alert
      operationId: configAlert:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configAlert'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/alert
      summary: Replace /config/alert
      operationId: configAlert:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlert'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/alert
      summary: Update /config/alert
      operationId: configAlert:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlert'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/alert
      summary: Delete /config/alert
      operationId: configAlert:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/alert/custom:
    get:
      tags:
        - /config/alert/custom
      summary: Get /config/alert/custom
      operationId: configAlertCustom:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configAlertCustom'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/alert/custom
      summary: Replace /config/alert/custom
      operationId: configAlertCustom:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertCustom'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/alert/custom
      summary: Update /config/alert/custom
      operationId: configAlertCustom:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertCustom'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/alert/custom
      summary: Delete /config/alert/custom
      operationId: configAlertCustom:delete
      description: Reset to empty array.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/alert/custom/{idx}:
    parameters:
      - name: idx
        in: path
        description: |
          The index of a custom alert.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /config/alert/custom/{idx}
      summary: Get /config/alert/custom/{idx}
      operationId: configAlertCustomItem:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configAlertCustomItem'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/alert/custom/{idx}
      summary: Replace /config/alert/custom/{idx}
      operationId: configAlertCustomItem:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertCustomItem'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/alert/custom/{idx}
      summary: Update /config/alert/custom/{idx}
      operationId: configAlertCustomItem:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertCustomItem'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/alert/custom/{idx}
      summary: Delete /config/alert/custom/{idx}
      operationId: configAlertCustomItem:delete
      description: |
        Delete this custom alert.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/alert/custom/{idx}/name:
    parameters:
      - name: idx
        in: path
        description: |
          The index of a custom alert.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /config/alert/custom/{idx}/name
      summary: Get /config/alert/custom/{idx}/name
      operationId: configAlertCustomItemName:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configAlertCustomItemName'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/alert/custom/{idx}/name
      summary: Replace /config/alert/custom/{idx}/name
      operationId: configAlertCustomItemName:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertCustomItemName'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/alert/custom/{idx}/name
      summary: Update /config/alert/custom/{idx}/name
      operationId: configAlertCustomItemName:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertCustomItemName'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/alert/custom/{idx}/name
      summary: Delete /config/alert/custom/{idx}/name
      operationId: configAlertCustomItemName:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/alert/custom/{idx}/detail:
    parameters:
      - name: idx
        in: path
        description: |
          The index of a custom alert.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /config/alert/custom/{idx}/detail
      summary: Get /config/alert/custom/{idx}/detail
      operationId: configAlertCustomItemDetail:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configAlertCustomItemDetail'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/alert/custom/{idx}/detail
      summary: Replace /config/alert/custom/{idx}/detail
      operationId: configAlertCustomItemDetail:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertCustomItemDetail'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/alert/custom/{idx}/detail
      summary: Update /config/alert/custom/{idx}/detail
      operationId: configAlertCustomItemDetail:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertCustomItemDetail'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/alert/custom/{idx}/detail
      summary: Delete /config/alert/custom/{idx}/detail
      operationId: configAlertCustomItemDetail:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/alert/custom/{idx}/frequency:
    parameters:
      - name: idx
        in: path
        description: |
          The index of a custom alert.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /config/alert/custom/{idx}/frequency
      summary: Get /config/alert/custom/{idx}/frequency
      operationId: configAlertCustomItemFrequency:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configAlertCustomItemFrequency'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/alert/custom/{idx}/frequency
      summary: Replace /config/alert/custom/{idx}/frequency
      operationId: configAlertCustomItemFrequency:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertCustomItemFrequency'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/alert/custom/{idx}/frequency
      summary: Update /config/alert/custom/{idx}/frequency
      operationId: configAlertCustomItemFrequency:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertCustomItemFrequency'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/alert/custom/{idx}/frequency
      summary: Delete /config/alert/custom/{idx}/frequency
      operationId: configAlertCustomItemFrequency:delete
      description: |
        Reset to `sec`.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/alert/custom/{idx}/priority:
    parameters:
      - name: idx
        in: path
        description: |
          The index of a custom alert.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /config/alert/custom/{idx}/priority
      summary: Get /config/alert/custom/{idx}/priority
      operationId: configAlertCustomItemPriority:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configAlertCustomItemPriority'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/alert/custom/{idx}/priority
      summary: Replace /config/alert/custom/{idx}/priority
      operationId: configAlertCustomItemPriority:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertCustomItemPriority'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/alert/custom/{idx}/priority
      summary: Update /config/alert/custom/{idx}/priority
      operationId: configAlertCustomItemPriority:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertCustomItemPriority'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/alert/custom/{idx}/priority
      summary: Delete /config/alert/custom/{idx}/priority
      operationId: configAlertCustomItemPriority:delete
      description: Reset to 0.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/alert/custom/{idx}/cond:
    parameters:
      - name: idx
        in: path
        description: |
          The index of a custom alert.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /config/alert/custom/{idx}/cond
      summary: Get /config/alert/custom/{idx}/cond
      operationId: configAlertCustomItemCond:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configAlertCustomItemCond'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/alert/custom/{idx}/cond
      summary: Replace /config/alert/custom/{idx}/cond
      operationId: configAlertCustomItemCond:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertCustomItemCond'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/alert/custom/{idx}/cond
      summary: Update /config/alert/custom/{idx}/cond
      operationId: configAlertCustomItemCond:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertCustomItemCond'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/alert/custom/{idx}/cond
      summary: Delete /config/alert/custom/{idx}/cond
      operationId: configAlertCustomItemCond:delete
      description: |
        Reset to default condition which is always false.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/alert/custom/{idx}/cond/lhs:
    parameters:
      - name: idx
        in: path
        description: |
          The index of a custom alert.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /config/alert/custom/{idx}/cond/lhs
      summary: Get /config/alert/custom/{idx}/cond/lhs
      operationId: configAlertCustomItemCondLhs:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configAlertCustomItemCondLhs'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/alert/custom/{idx}/cond/lhs
      summary: Replace /config/alert/custom/{idx}/cond/lhs
      operationId: configAlertCustomItemCondLhs:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertCustomItemCondLhs'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/alert/custom/{idx}/cond/lhs
      summary: Update /config/alert/custom/{idx}/cond/lhs
      operationId: configAlertCustomItemCondLhs:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertCustomItemCondLhs'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/alert/custom/{idx}/cond/lhs
      summary: Delete /config/alert/custom/{idx}/cond/lhs
      operationId: configAlertCustomItemCondLhs:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/alert/custom/{idx}/cond/op:
    parameters:
      - name: idx
        in: path
        description: |
          The index of a custom alert.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /config/alert/custom/{idx}/cond/op
      summary: Get /config/alert/custom/{idx}/cond/op
      operationId: configAlertCustomItemCondOp:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configAlertCustomItemCondOp'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/alert/custom/{idx}/cond/op
      summary: Replace /config/alert/custom/{idx}/cond/op
      operationId: configAlertCustomItemCondOp:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertCustomItemCondOp'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/alert/custom/{idx}/cond/op
      summary: Update /config/alert/custom/{idx}/cond/op
      operationId: configAlertCustomItemCondOp:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertCustomItemCondOp'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/alert/custom/{idx}/cond/op
      summary: Delete /config/alert/custom/{idx}/cond/op
      operationId: configAlertCustomItemCondOp:delete
      description: |
        Reset to `<`.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/alert/custom/{idx}/cond/rhs:
    parameters:
      - name: idx
        in: path
        description: |
          The index of a custom alert.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /config/alert/custom/{idx}/cond/rhs
      summary: Get /config/alert/custom/{idx}/cond/rhs
      operationId: configAlertCustomItemCondRhs:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configAlertCustomItemCondRhs'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/alert/custom/{idx}/cond/rhs
      summary: Replace /config/alert/custom/{idx}/cond/rhs
      operationId: configAlertCustomItemCondRhs:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertCustomItemCondRhs'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/alert/custom/{idx}/cond/rhs
      summary: Update /config/alert/custom/{idx}/cond/rhs
      operationId: configAlertCustomItemCondRhs:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertCustomItemCondRhs'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/alert/custom/{idx}/cond/rhs
      summary: Delete /config/alert/custom/{idx}/cond/rhs
      operationId: configAlertCustomItemCondRhs:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/alert/reporter:
    get:
      tags:
        - /config/alert/reporter
      summary: Get /config/alert/reporter
      operationId: configAlertReporter:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configAlertReporter'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/alert/reporter
      summary: Replace /config/alert/reporter
      operationId: configAlertReporter:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporter'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/alert/reporter
      summary: Update /config/alert/reporter
      operationId: configAlertReporter:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporter'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/alert/reporter
      summary: Delete /config/alert/reporter
      operationId: configAlertReporter:delete
      description: |
        Reset to default (reporting disabled).
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/alert/reporter/web:
    get:
      tags:
        - /config/alert/reporter/web
      summary: Get /config/alert/reporter/web
      operationId: configAlertReporterWeb:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configAlertReporterWeb'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/alert/reporter/web
      summary: Replace /config/alert/reporter/web
      operationId: configAlertReporterWeb:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterWeb'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/alert/reporter/web
      summary: Update /config/alert/reporter/web
      operationId: configAlertReporterWeb:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterWeb'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/alert/reporter/web
      summary: Delete /config/alert/reporter/web
      operationId: configAlertReporterWeb:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/alert/reporter/web/min-priority:
    get:
      tags:
        - /config/alert/reporter/web/min-priority
      summary: Get /config/alert/reporter/web/min-priority
      operationId: configAlertReporterWebMinPriority:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configAlertReporterWebMinPriority'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/alert/reporter/web/min-priority
      summary: Replace /config/alert/reporter/web/min-priority
      operationId: configAlertReporterWebMinPriority:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterWebMinPriority'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/alert/reporter/web/min-priority
      summary: Update /config/alert/reporter/web/min-priority
      operationId: configAlertReporterWebMinPriority:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterWebMinPriority'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/alert/reporter/web/min-priority
      summary: Delete /config/alert/reporter/web/min-priority
      operationId: configAlertReporterWebMinPriority:delete
      description: Reset to 0.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/alert/reporter/web/service:
    get:
      tags:
        - /config/alert/reporter/web/service
      summary: Get /config/alert/reporter/web/service
      operationId: configAlertReporterWebService:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configAlertReporterWebService'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/alert/reporter/web/service
      summary: Replace /config/alert/reporter/web/service
      operationId: configAlertReporterWebService:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterWebService'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/alert/reporter/web/service
      summary: Update /config/alert/reporter/web/service
      operationId: configAlertReporterWebService:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterWebService'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/alert/reporter/web/service
      summary: Delete /config/alert/reporter/web/service
      operationId: configAlertReporterWebService:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/alert/reporter/web/uri:
    get:
      tags:
        - /config/alert/reporter/web/uri
      summary: Get /config/alert/reporter/web/uri
      operationId: configAlertReporterWebUri:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configAlertReporterWebUri'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/alert/reporter/web/uri
      summary: Replace /config/alert/reporter/web/uri
      operationId: configAlertReporterWebUri:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterWebUri'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/alert/reporter/web/uri
      summary: Update /config/alert/reporter/web/uri
      operationId: configAlertReporterWebUri:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterWebUri'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/alert/reporter/web/uri
      summary: Delete /config/alert/reporter/web/uri
      operationId: configAlertReporterWebUri:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/alert/reporter/web/options:
    get:
      tags:
        - /config/alert/reporter/web/options
      summary: Get /config/alert/reporter/web/options
      operationId: configAlertReporterWebOptions:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configAlertReporterWebOptions'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/alert/reporter/web/options
      summary: Replace /config/alert/reporter/web/options
      operationId: configAlertReporterWebOptions:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterWebOptions'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/alert/reporter/web/options
      summary: Update /config/alert/reporter/web/options
      operationId: configAlertReporterWebOptions:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterWebOptions'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/alert/reporter/web/options
      summary: Delete /config/alert/reporter/web/options
      operationId: configAlertReporterWebOptions:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/alert/reporter/web/user:
    get:
      tags:
        - /config/alert/reporter/web/user
      summary: Get /config/alert/reporter/web/user
      operationId: configAlertReporterWebUser:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configAlertReporterWebUser'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/alert/reporter/web/user
      summary: Replace /config/alert/reporter/web/user
      operationId: configAlertReporterWebUser:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterWebUser'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/alert/reporter/web/user
      summary: Update /config/alert/reporter/web/user
      operationId: configAlertReporterWebUser:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterWebUser'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/alert/reporter/web/user
      summary: Delete /config/alert/reporter/web/user
      operationId: configAlertReporterWebUser:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/alert/reporter/web/password:
    put:
      tags:
        - /config/alert/reporter/web/password
      summary: Replace /config/alert/reporter/web/password
      operationId: configAlertReporterWebPassword:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterWebPassword'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/alert/reporter/web/password
      summary: Update /config/alert/reporter/web/password
      operationId: configAlertReporterWebPassword:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterWebPassword'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/alert/reporter/web/password
      summary: Delete /config/alert/reporter/web/password
      operationId: configAlertReporterWebPassword:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/alert/reporter/mail:
    get:
      tags:
        - /config/alert/reporter/mail
      summary: Get /config/alert/reporter/mail
      operationId: configAlertReporterMail:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configAlertReporterMail'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/alert/reporter/mail
      summary: Replace /config/alert/reporter/mail
      operationId: configAlertReporterMail:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterMail'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/alert/reporter/mail
      summary: Update /config/alert/reporter/mail
      operationId: configAlertReporterMail:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterMail'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/alert/reporter/mail
      summary: Delete /config/alert/reporter/mail
      operationId: configAlertReporterMail:delete
      description: |
        Reset to default (email reporting disabled).
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/alert/reporter/mail/server:
    get:
      tags:
        - /config/alert/reporter/mail/server
      summary: Get /config/alert/reporter/mail/server
      operationId: configAlertReporterMailServer:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configAlertReporterMailServer'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/alert/reporter/mail/server
      summary: Replace /config/alert/reporter/mail/server
      operationId: configAlertReporterMailServer:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterMailServer'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/alert/reporter/mail/server
      summary: Update /config/alert/reporter/mail/server
      operationId: configAlertReporterMailServer:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterMailServer'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/alert/reporter/mail/server
      summary: Delete /config/alert/reporter/mail/server
      operationId: configAlertReporterMailServer:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/alert/reporter/mail/user:
    get:
      tags:
        - /config/alert/reporter/mail/user
      summary: Get /config/alert/reporter/mail/user
      operationId: configAlertReporterMailUser:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configAlertReporterMailUser'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/alert/reporter/mail/user
      summary: Replace /config/alert/reporter/mail/user
      operationId: configAlertReporterMailUser:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterMailUser'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/alert/reporter/mail/user
      summary: Update /config/alert/reporter/mail/user
      operationId: configAlertReporterMailUser:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterMailUser'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/alert/reporter/mail/user
      summary: Delete /config/alert/reporter/mail/user
      operationId: configAlertReporterMailUser:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/alert/reporter/mail/password:
    put:
      tags:
        - /config/alert/reporter/mail/password
      summary: Replace /config/alert/reporter/mail/password
      operationId: configAlertReporterMailPassword:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterMailPassword'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/alert/reporter/mail/password
      summary: Update /config/alert/reporter/mail/password
      operationId: configAlertReporterMailPassword:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterMailPassword'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/alert/reporter/mail/password
      summary: Delete /config/alert/reporter/mail/password
      operationId: configAlertReporterMailPassword:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/alert/reporter/mail/from-address:
    get:
      tags:
        - /config/alert/reporter/mail/from-address
      summary: Get /config/alert/reporter/mail/from-address
      operationId: configAlertReporterMailFromAddress:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configAlertReporterMailFromAddress'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/alert/reporter/mail/from-address
      summary: Replace /config/alert/reporter/mail/from-address
      operationId: configAlertReporterMailFromAddress:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterMailFromAddress'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/alert/reporter/mail/from-address
      summary: Update /config/alert/reporter/mail/from-address
      operationId: configAlertReporterMailFromAddress:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterMailFromAddress'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/alert/reporter/mail/from-address
      summary: Delete /config/alert/reporter/mail/from-address
      operationId: configAlertReporterMailFromAddress:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/alert/reporter/mail/to:
    get:
      tags:
        - /config/alert/reporter/mail/to
      summary: Get /config/alert/reporter/mail/to
      operationId: configAlertReporterMailTo:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configAlertReporterMailTo'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/alert/reporter/mail/to
      summary: Replace /config/alert/reporter/mail/to
      operationId: configAlertReporterMailTo:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterMailTo'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/alert/reporter/mail/to
      summary: Update /config/alert/reporter/mail/to
      operationId: configAlertReporterMailTo:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterMailTo'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/alert/reporter/mail/to
      summary: Delete /config/alert/reporter/mail/to
      operationId: configAlertReporterMailTo:delete
      description: Reset to empty array.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/alert/reporter/mail/to/{idx}:
    parameters:
      - name: idx
        in: path
        description: |
          The index of an alert destination.
        required: true
        schema:
          type: integer
          minimum: 0
          maximum: 3
    get:
      tags:
        - /config/alert/reporter/mail/to/{idx}
      summary: Get /config/alert/reporter/mail/to/{idx}
      operationId: configAlertReporterMailToItem:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configAlertReporterMailToItem'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/alert/reporter/mail/to/{idx}
      summary: Replace /config/alert/reporter/mail/to/{idx}
      operationId: configAlertReporterMailToItem:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterMailToItem'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/alert/reporter/mail/to/{idx}
      summary: Update /config/alert/reporter/mail/to/{idx}
      operationId: configAlertReporterMailToItem:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterMailToItem'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/alert/reporter/mail/to/{idx}
      summary: Delete /config/alert/reporter/mail/to/{idx}
      operationId: configAlertReporterMailToItem:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/alert/reporter/mail/to/{idx}/format:
    parameters:
      - name: idx
        in: path
        description: |
          The index of an alert destination.
        required: true
        schema:
          type: integer
          minimum: 0
          maximum: 3
    get:
      tags:
        - /config/alert/reporter/mail/to/{idx}/format
      summary: Get /config/alert/reporter/mail/to/{idx}/format
      operationId: configAlertReporterMailToItemFormat:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configAlertReporterMailToItemFormat'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/alert/reporter/mail/to/{idx}/format
      summary: Replace /config/alert/reporter/mail/to/{idx}/format
      operationId: configAlertReporterMailToItemFormat:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterMailToItemFormat'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/alert/reporter/mail/to/{idx}/format
      summary: Update /config/alert/reporter/mail/to/{idx}/format
      operationId: configAlertReporterMailToItemFormat:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterMailToItemFormat'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/alert/reporter/mail/to/{idx}/format
      summary: Delete /config/alert/reporter/mail/to/{idx}/format
      operationId: configAlertReporterMailToItemFormat:delete
      description: |
        Delete this mail destination.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/alert/reporter/mail/to/{idx}/min-priority:
    parameters:
      - name: idx
        in: path
        description: |
          The index of an alert destination.
        required: true
        schema:
          type: integer
          minimum: 0
          maximum: 3
    get:
      tags:
        - /config/alert/reporter/mail/to/{idx}/min-priority
      summary: Get /config/alert/reporter/mail/to/{idx}/min-priority
      operationId: configAlertReporterMailToItemMinPriority:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configAlertReporterMailToItemMinPriority'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/alert/reporter/mail/to/{idx}/min-priority
      summary: Replace /config/alert/reporter/mail/to/{idx}/min-priority
      operationId: configAlertReporterMailToItemMinPriority:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterMailToItemMinPriority'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/alert/reporter/mail/to/{idx}/min-priority
      summary: Update /config/alert/reporter/mail/to/{idx}/min-priority
      operationId: configAlertReporterMailToItemMinPriority:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterMailToItemMinPriority'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/alert/reporter/mail/to/{idx}/min-priority
      summary: Delete /config/alert/reporter/mail/to/{idx}/min-priority
      operationId: configAlertReporterMailToItemMinPriority:delete
      description: Reset to 0.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/alert/reporter/mail/to/{idx}/address:
    parameters:
      - name: idx
        in: path
        description: |
          The index of an alert destination.
        required: true
        schema:
          type: integer
          minimum: 0
          maximum: 3
    get:
      tags:
        - /config/alert/reporter/mail/to/{idx}/address
      summary: Get /config/alert/reporter/mail/to/{idx}/address
      operationId: configAlertReporterMailToItemAddress:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configAlertReporterMailToItemAddress'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/alert/reporter/mail/to/{idx}/address
      summary: Replace /config/alert/reporter/mail/to/{idx}/address
      operationId: configAlertReporterMailToItemAddress:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterMailToItemAddress'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/alert/reporter/mail/to/{idx}/address
      summary: Update /config/alert/reporter/mail/to/{idx}/address
      operationId: configAlertReporterMailToItemAddress:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertReporterMailToItemAddress'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/alert/reporter/mail/to/{idx}/address
      summary: Delete /config/alert/reporter/mail/to/{idx}/address
      operationId: configAlertReporterMailToItemAddress:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/alert/sys-prio:
    get:
      tags:
        - /config/alert/sys-prio
      summary: Get /config/alert/sys-prio
      operationId: configAlertSysPrio:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configAlertSysPrio'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/alert/sys-prio
      summary: Replace /config/alert/sys-prio
      operationId: configAlertSysPrio:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertSysPrio'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/alert/sys-prio
      summary: Update /config/alert/sys-prio
      operationId: configAlertSysPrio:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertSysPrio'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/alert/sys-prio
      summary: Delete /config/alert/sys-prio
      operationId: configAlertSysPrio:delete
      description: |
        Reset system alert priorities to 0.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /config/alert/sys-prio/{idx}:
    parameters:
      - name: idx
        in: path
        description: |
          The index of a system alert.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /config/alert/sys-prio/{idx}
      summary: Get /config/alert/sys-prio/{idx}
      operationId: configAlertSysPrioItem:get
      responses:
        '200':
          description: Normal response.
          headers:
            ETag:
              $ref: '#/components/headers/ETagHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/configAlertSysPrioItem'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /config/alert/sys-prio/{idx}
      summary: Replace /config/alert/sys-prio/{idx}
      operationId: configAlertSysPrioItem:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertSysPrioItem'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /config/alert/sys-prio/{idx}
      summary: Update /config/alert/sys-prio/{idx}
      operationId: configAlertSysPrioItem:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configAlertSysPrioItem'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /config/alert/sys-prio/{idx}
      summary: Delete /config/alert/sys-prio/{idx}
      operationId: configAlertSysPrioItem:delete
      description: Reset to 0.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /ctrl/interface:
    get:
      tags:
        - /ctrl/interface
      summary: Get /ctrl/interface
      operationId: ctrlInterface:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/ctrlInterface'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /ctrl/interface/{if}:
    parameters:
      - name: if
        in: path
        description: |
          The name of an interface.  Valid interface names must start with
          a letter and consist entirely of letters, digits, or
          underscores.
        required: true
        schema:
          type: string
        example: relay
    get:
      tags:
        - /ctrl/interface/{if}
      summary: Get /ctrl/interface/{if}
      operationId: ctrlInterfaceIf:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/ctrlInterfaceIf'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /ctrl/interface/{if}/method:
    parameters:
      - name: if
        in: path
        description: |
          The name of an interface.  Valid interface names must start with
          a letter and consist entirely of letters, digits, or
          underscores.
        required: true
        schema:
          type: string
        example: relay
    get:
      tags:
        - /ctrl/interface/{if}/method
      summary: Get /ctrl/interface/{if}/method
      operationId: ctrlInterfaceIfMethod:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/ctrlInterfaceIfMethod'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /ctrl/interface/{if}/method/{idx}:
    parameters:
      - name: if
        in: path
        description: |
          The name of an interface.  Valid interface names must start with
          a letter and consist entirely of letters, digits, or
          underscores.
        required: true
        schema:
          type: string
        example: relay
      - name: idx
        in: path
        description: |
          The index of a method.
        required: true
        schema:
          type: integer
          minimum: 0
        example: 0
    get:
      tags:
        - /ctrl/interface/{if}/method/{idx}
      summary: Get /ctrl/interface/{if}/method/{idx}
      operationId: ctrlInterfaceIfMethodItem:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/ctrlInterfaceIfMethodItem'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /ctrl/interface/{if}/method/{idx}/name:
    parameters:
      - name: if
        in: path
        description: |
          The name of an interface.  Valid interface names must start with
          a letter and consist entirely of letters, digits, or
          underscores.
        required: true
        schema:
          type: string
        example: relay
      - name: idx
        in: path
        description: |
          The index of a method.
        required: true
        schema:
          type: integer
          minimum: 0
        example: 0
    get:
      tags:
        - /ctrl/interface/{if}/method/{idx}/name
      summary: Get /ctrl/interface/{if}/method/{idx}/name
      operationId: ctrlInterfaceIfMethodItemName:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/ctrlInterfaceIfMethodItemName'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /ctrl/interface/{if}/method/{idx}/in:
    parameters:
      - name: if
        in: path
        description: |
          The name of an interface.  Valid interface names must start with
          a letter and consist entirely of letters, digits, or
          underscores.
        required: true
        schema:
          type: string
        example: relay
      - name: idx
        in: path
        description: |
          The index of a method.
        required: true
        schema:
          type: integer
          minimum: 0
        example: 0
    get:
      tags:
        - /ctrl/interface/{if}/method/{idx}/in
      summary: Get /ctrl/interface/{if}/method/{idx}/in
      operationId: ctrlInterfaceIfMethodItemIn:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/ctrlInterfaceIfMethodItemIn'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /ctrl/interface/{if}/method/{idx}/in_names:
    parameters:
      - name: if
        in: path
        description: |
          The name of an interface.  Valid interface names must start with
          a letter and consist entirely of letters, digits, or
          underscores.
        required: true
        schema:
          type: string
        example: relay
      - name: idx
        in: path
        description: |
          The index of a method.
        required: true
        schema:
          type: integer
          minimum: 0
        example: 0
    get:
      tags:
        - /ctrl/interface/{if}/method/{idx}/in_names
      summary: Get /ctrl/interface/{if}/method/{idx}/in_names
      operationId: ctrlInterfaceIfMethodItemInNames:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/ctrlInterfaceIfMethodItemInNames'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /ctrl/interface/{if}/method/{idx}/in_names/{argidx}:
    parameters:
      - name: if
        in: path
        description: |
          The name of an interface.  Valid interface names must start with
          a letter and consist entirely of letters, digits, or
          underscores.
        required: true
        schema:
          type: string
        example: relay
      - name: idx
        in: path
        description: |
          The index of a method.
        required: true
        schema:
          type: integer
          minimum: 0
        example: 0
      - name: argidx
        in: path
        description: |
          The index of a method argument.
        required: true
        schema:
          type: integer
          minimum: 0
        example: 0
    get:
      tags:
        - /ctrl/interface/{if}/method/{idx}/in_names/{argidx}
      summary: Get /ctrl/interface/{if}/method/{idx}/in_names/{argidx}
      operationId: ctrlInterfaceIfMethodItemInNamesItem:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/ctrlInterfaceIfMethodItemInNamesItem'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /ctrl/interface/{if}/method/{idx}/out:
    parameters:
      - name: if
        in: path
        description: |
          The name of an interface.  Valid interface names must start with
          a letter and consist entirely of letters, digits, or
          underscores.
        required: true
        schema:
          type: string
        example: relay
      - name: idx
        in: path
        description: |
          The index of a method.
        required: true
        schema:
          type: integer
          minimum: 0
        example: 0
    get:
      tags:
        - /ctrl/interface/{if}/method/{idx}/out
      summary: Get /ctrl/interface/{if}/method/{idx}/out
      operationId: ctrlInterfaceIfMethodItemOut:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/ctrlInterfaceIfMethodItemOut'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /ctrl/interface/{if}/method/{idx}/doc:
    parameters:
      - name: if
        in: path
        description: |
          The name of an interface.  Valid interface names must start with
          a letter and consist entirely of letters, digits, or
          underscores.
        required: true
        schema:
          type: string
        example: relay
      - name: idx
        in: path
        description: |
          The index of a method.
        required: true
        schema:
          type: integer
          minimum: 0
        example: 0
    get:
      tags:
        - /ctrl/interface/{if}/method/{idx}/doc
      summary: Get /ctrl/interface/{if}/method/{idx}/doc
      operationId: ctrlInterfaceIfMethodItemDoc:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/ctrlInterfaceIfMethodItemDoc'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /lua:
    get:
      tags:
        - /lua
      summary: Get /lua
      operationId: lua:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/lua'
                  error:
                    $ref: '#/components/schemas/ErrorString'
              example:
                result:
                  var:
                    sob_Grid-RD:
                      value: '1677697200'
                      desc: Start of the current billing interval.
                    kwh_sob_Grid-RD:
                      value: '0'
                      desc: Accumulated kWh for billing period.
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /lua
      summary: Replace /lua
      operationId: lua:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lua'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /lua
      summary: Update /lua
      operationId: lua:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lua'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /lua
      summary: Delete /lua
      operationId: lua:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /lua/var:
    get:
      tags:
        - /lua/var
      summary: Get /lua/var
      operationId: luaVar:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/luaVar'
                  error:
                    $ref: '#/components/schemas/ErrorString'
              example:
                result:
                  sob_Grid-RD:
                    value: '1677697200'
                    desc: Start of the current billing interval.
                  kwh_sob_Grid-RD:
                    value: '0'
                    desc: Accumulated kWh for billing period.
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /lua/var
      summary: Replace /lua/var
      operationId: luaVar:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/luaVar'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /lua/var
      summary: Update /lua/var
      operationId: luaVar:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/luaVar'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /lua/var
      summary: Delete /lua/var
      operationId: luaVar:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /lua/var/{name}:
    parameters:
      - name: name
        in: path
        description: |
          The name of a persistent Lua variable.
        required: true
        schema:
          type: string
    get:
      tags:
        - /lua/var/{name}
      summary: Get /lua/var/{name}
      operationId: luaVarName:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/luaVarName'
                  error:
                    $ref: '#/components/schemas/ErrorString'
              example:
                result:
                  value: '1677697200'
                  desc: Start of the current billing interval.
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /lua/var/{name}
      summary: Replace /lua/var/{name}
      operationId: luaVarName:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/luaVarName'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /lua/var/{name}
      summary: Update /lua/var/{name}
      operationId: luaVarName:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/luaVarName'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /lua/var/{name}
      summary: Delete /lua/var/{name}
      operationId: luaVarName:delete
      description: Reset to default.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /lua/var/{name}/value:
    parameters:
      - name: name
        in: path
        description: |
          The name of a persistent Lua variable.
        required: true
        schema:
          type: string
    get:
      tags:
        - /lua/var/{name}/value
      summary: Get /lua/var/{name}/value
      operationId: luaVarNameValue:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/luaVarNameValue'
                  error:
                    $ref: '#/components/schemas/ErrorString'
              example:
                result: '1677697200'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /lua/var/{name}/value
      summary: Replace /lua/var/{name}/value
      operationId: luaVarNameValue:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/luaVarNameValue'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /lua/var/{name}/value
      summary: Update /lua/var/{name}/value
      operationId: luaVarNameValue:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/luaVarNameValue'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /lua/var/{name}/value
      summary: Delete /lua/var/{name}/value
      operationId: luaVarNameValue:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /lua/var/{name}/desc:
    parameters:
      - name: name
        in: path
        description: |
          The name of a persistent Lua variable.
        required: true
        schema:
          type: string
    get:
      tags:
        - /lua/var/{name}/desc
      summary: Get /lua/var/{name}/desc
      operationId: luaVarNameDesc:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/luaVarNameDesc'
                  error:
                    $ref: '#/components/schemas/ErrorString'
              example:
                result: Start of the current billing interval.
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    put:
      tags:
        - /lua/var/{name}/desc
      summary: Replace /lua/var/{name}/desc
      operationId: luaVarNameDesc:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/luaVarNameDesc'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    post:
      tags:
        - /lua/var/{name}/desc
      summary: Update /lua/var/{name}/desc
      operationId: luaVarNameDesc:post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/luaVarNameDesc'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
    delete:
      tags:
        - /lua/var/{name}/desc
      summary: Delete /lua/var/{name}/desc
      operationId: luaVarNameDesc:delete
      description: Reset to empty string.
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/StatusObject'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys:
    get:
      tags:
        - /sys
      summary: Get /sys
      operationId: sys:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sys'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/alert:
    get:
      tags:
        - /sys/alert
      summary: Get /sys/alert
      operationId: sysAlert:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysAlert'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/alert/{idx}:
    parameters:
      - name: idx
        in: path
        description: |
          The index of a system alert.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/alert/{idx}
      summary: Get /sys/alert/{idx}
      operationId: sysAlertItem:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysAlertItem'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/alert/{idx}/id:
    parameters:
      - name: idx
        in: path
        description: |
          The index of a system alert.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/alert/{idx}/id
      summary: Get /sys/alert/{idx}/id
      operationId: sysAlertItemId:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysAlertItemId'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/alert/{idx}/reason:
    parameters:
      - name: idx
        in: path
        description: |
          The index of a system alert.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/alert/{idx}/reason
      summary: Get /sys/alert/{idx}/reason
      operationId: sysAlertItemReason:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysAlertItemReason'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/boot:
    get:
      tags:
        - /sys/boot
      summary: Get /sys/boot
      operationId: sysBoot:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysBoot'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/boot/reason:
    get:
      tags:
        - /sys/boot/reason
      summary: Get /sys/boot/reason
      operationId: sysBootReason:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysBootReason'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/boot/time:
    get:
      tags:
        - /sys/boot/time
      summary: Get /sys/boot/time
      operationId: sysBootTime:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysBootTime'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/db:
    get:
      tags:
        - /sys/db
      summary: Get /sys/db
      operationId: sysDb:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysDb'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/db/max-registers:
    get:
      tags:
        - /sys/db/max-registers
      summary: Get /sys/db/max-registers
      operationId: sysDbMaxRegisters:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysDbMaxRegisters'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/db/level:
    get:
      tags:
        - /sys/db/level
      summary: Get /sys/db/level
      operationId: sysDbLevel:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysDbLevel'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/db/level/{idx}:
    parameters:
      - name: idx
        in: path
        description: |
          The index of a db level.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/db/level/{idx}
      summary: Get /sys/db/level/{idx}
      operationId: sysDbLevelItem:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysDbLevelItem'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/db/level/{idx}/interval:
    parameters:
      - name: idx
        in: path
        description: |
          The index of a db level.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/db/level/{idx}/interval
      summary: Get /sys/db/level/{idx}/interval
      operationId: sysDbLevelItemInterval:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysDbLevelItemInterval'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/db/level/{idx}/row-count:
    parameters:
      - name: idx
        in: path
        description: |
          The index of a db level.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/db/level/{idx}/row-count
      summary: Get /sys/db/level/{idx}/row-count
      operationId: sysDbLevelItemRowCount:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysDbLevelItemRowCount'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/db/level/{idx}/volatile:
    parameters:
      - name: idx
        in: path
        description: |
          The index of a db level.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/db/level/{idx}/volatile
      summary: Get /sys/db/level/{idx}/volatile
      operationId: sysDbLevelItemVolatile:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysDbLevelItemVolatile'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/dev:
    get:
      tags:
        - /sys/dev
      summary: Get /sys/dev
      operationId: sysDev:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysDev'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/dev/serial:
    get:
      tags:
        - /sys/dev/serial
      summary: Get /sys/dev/serial
      operationId: sysDevSerial:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysDevSerial'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/dev/serial/{seridx}:
    parameters:
      - name: seridx
        in: path
        description: |
          The index of a serial port device.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/dev/serial/{seridx}
      summary: Get /sys/dev/serial/{seridx}
      operationId: sysDevSerialItem:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysDevSerialItem'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/dev/serial/{seridx}/devpath:
    parameters:
      - name: seridx
        in: path
        description: |
          The index of a serial port device.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/dev/serial/{seridx}/devpath
      summary: Get /sys/dev/serial/{seridx}/devpath
      operationId: sysDevSerialItemDevpath:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysDevSerialItemDevpath'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/dev/serial/{seridx}/manufacturer:
    parameters:
      - name: seridx
        in: path
        description: |
          The index of a serial port device.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/dev/serial/{seridx}/manufacturer
      summary: Get /sys/dev/serial/{seridx}/manufacturer
      operationId: sysDevSerialItemManufacturer:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysDevSerialItemManufacturer'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/dev/serial/{seridx}/product:
    parameters:
      - name: seridx
        in: path
        description: |
          The index of a serial port device.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/dev/serial/{seridx}/product
      summary: Get /sys/dev/serial/{seridx}/product
      operationId: sysDevSerialItemProduct:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysDevSerialItemProduct'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/dev/serial/{seridx}/sn:
    parameters:
      - name: seridx
        in: path
        description: |
          The index of a serial port device.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/dev/serial/{seridx}/sn
      summary: Get /sys/dev/serial/{seridx}/sn
      operationId: sysDevSerialItemSn:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysDevSerialItemSn'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/dev/serial/{seridx}/version:
    parameters:
      - name: seridx
        in: path
        description: |
          The index of a serial port device.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/dev/serial/{seridx}/version
      summary: Get /sys/dev/serial/{seridx}/version
      operationId: sysDevSerialItemVersion:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysDevSerialItemVersion'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/func:
    get:
      tags:
        - /sys/func
      summary: Get /sys/func
      operationId: sysFunc:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysFunc'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/func/basic:
    get:
      tags:
        - /sys/func/basic
      summary: Get /sys/func/basic
      operationId: sysFuncBasic:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysFuncBasic'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/func/basic/{name}:
    parameters:
      - name: name
        in: path
        description: |
          The name of an eScript basic function.
        required: true
        schema:
          type: string
    get:
      tags:
        - /sys/func/basic/{name}
      summary: Get /sys/func/basic/{name}
      operationId: sysFuncBasicName:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysFuncBasicName'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/func/basic/{name}/arg:
    parameters:
      - name: name
        in: path
        description: |
          The name of an eScript basic function.
        required: true
        schema:
          type: string
    get:
      tags:
        - /sys/func/basic/{name}/arg
      summary: Get /sys/func/basic/{name}/arg
      operationId: sysFuncBasicNameArg:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysFuncBasicNameArg'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/func/basic/{name}/arg/{idx}:
    parameters:
      - name: name
        in: path
        description: |
          The name of an eScript basic function.
        required: true
        schema:
          type: string
      - name: idx
        in: path
        description: |
          The name index of a function argument.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/func/basic/{name}/arg/{idx}
      summary: Get /sys/func/basic/{name}/arg/{idx}
      operationId: sysFuncBasicNameArgItem:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysFuncBasicNameArgItem'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/func/basic/{name}/arg/{idx}/name:
    parameters:
      - name: name
        in: path
        description: |
          The name of an eScript basic function.
        required: true
        schema:
          type: string
      - name: idx
        in: path
        description: |
          The name index of a function argument.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/func/basic/{name}/arg/{idx}/name
      summary: Get /sys/func/basic/{name}/arg/{idx}/name
      operationId: sysFuncBasicNameArgItemName:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysFuncBasicNameArgItemName'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/func/basic/{name}/arg/{idx}/type:
    parameters:
      - name: name
        in: path
        description: |
          The name of an eScript basic function.
        required: true
        schema:
          type: string
      - name: idx
        in: path
        description: |
          The name index of a function argument.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/func/basic/{name}/arg/{idx}/type
      summary: Get /sys/func/basic/{name}/arg/{idx}/type
      operationId: sysFuncBasicNameArgItemType:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysFuncBasicNameArgItemType'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/func/basic/{name}/help:
    parameters:
      - name: name
        in: path
        description: |
          The name of an eScript basic function.
        required: true
        schema:
          type: string
    get:
      tags:
        - /sys/func/basic/{name}/help
      summary: Get /sys/func/basic/{name}/help
      operationId: sysFuncBasicNameHelp:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysFuncBasicNameHelp'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/func/basic/{name}/min-args:
    parameters:
      - name: name
        in: path
        description: |
          The name of an eScript basic function.
        required: true
        schema:
          type: string
    get:
      tags:
        - /sys/func/basic/{name}/min-args
      summary: Get /sys/func/basic/{name}/min-args
      operationId: sysFuncBasicNameMinArgs:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysFuncBasicNameMinArgs'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/func/alert:
    get:
      tags:
        - /sys/func/alert
      summary: Get /sys/func/alert
      operationId: sysFuncAlert:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysFuncAlert'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/func/alert/{name}:
    parameters:
      - name: name
        in: path
        description: |
          The name of an eScript alert function.
        required: true
        schema:
          type: string
    get:
      tags:
        - /sys/func/alert/{name}
      summary: Get /sys/func/alert/{name}
      operationId: sysFuncAlertName:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysFuncAlertName'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/func/alert/{name}/arg:
    parameters:
      - name: name
        in: path
        description: |
          The name of an eScript alert function.
        required: true
        schema:
          type: string
    get:
      tags:
        - /sys/func/alert/{name}/arg
      summary: Get /sys/func/alert/{name}/arg
      operationId: sysFuncAlertNameArg:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysFuncAlertNameArg'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/func/alert/{name}/arg/{idx}:
    parameters:
      - name: name
        in: path
        description: |
          The name of an eScript alert function.
        required: true
        schema:
          type: string
      - name: idx
        in: path
        description: |
          The name index of a function argument.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/func/alert/{name}/arg/{idx}
      summary: Get /sys/func/alert/{name}/arg/{idx}
      operationId: sysFuncAlertNameArgItem:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysFuncAlertNameArgItem'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/func/alert/{name}/arg/{idx}/name:
    parameters:
      - name: name
        in: path
        description: |
          The name of an eScript alert function.
        required: true
        schema:
          type: string
      - name: idx
        in: path
        description: |
          The name index of a function argument.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/func/alert/{name}/arg/{idx}/name
      summary: Get /sys/func/alert/{name}/arg/{idx}/name
      operationId: sysFuncAlertNameArgItemName:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysFuncAlertNameArgItemName'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/func/alert/{name}/arg/{idx}/type:
    parameters:
      - name: name
        in: path
        description: |
          The name of an eScript alert function.
        required: true
        schema:
          type: string
      - name: idx
        in: path
        description: |
          The name index of a function argument.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/func/alert/{name}/arg/{idx}/type
      summary: Get /sys/func/alert/{name}/arg/{idx}/type
      operationId: sysFuncAlertNameArgItemType:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysFuncAlertNameArgItemType'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/func/alert/{name}/help:
    parameters:
      - name: name
        in: path
        description: |
          The name of an eScript alert function.
        required: true
        schema:
          type: string
    get:
      tags:
        - /sys/func/alert/{name}/help
      summary: Get /sys/func/alert/{name}/help
      operationId: sysFuncAlertNameHelp:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysFuncAlertNameHelp'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/func/alert/{name}/min-args:
    parameters:
      - name: name
        in: path
        description: |
          The name of an eScript alert function.
        required: true
        schema:
          type: string
    get:
      tags:
        - /sys/func/alert/{name}/min-args
      summary: Get /sys/func/alert/{name}/min-args
      operationId: sysFuncAlertNameMinArgs:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysFuncAlertNameMinArgs'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/modbus:
    get:
      tags:
        - /sys/modbus
      summary: Get /sys/modbus
      operationId: sysModbus:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysModbus'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/modbus/client:
    get:
      tags:
        - /sys/modbus/client
      summary: Get /sys/modbus/client
      operationId: sysModbusClient:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysModbusClient'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/modbus/client/map:
    get:
      tags:
        - /sys/modbus/client/map
      summary: Get /sys/modbus/client/map
      operationId: sysModbusClientMap:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysModbusClientMap'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/modbus/client/map/{name}:
    parameters:
      - name: name
        in: path
        description: |
          The name of a system Modbus map (read-only).
        required: true
        schema:
          type: string
          example: egauge_prm3
    get:
      tags:
        - /sys/modbus/client/map/{name}
      summary: Get /sys/modbus/client/map/{name}
      operationId: sysModbusClientMapName:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysModbusClientMapName'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/modbus/client/map/{name}/option:
    parameters:
      - name: name
        in: path
        description: |
          The name of a system Modbus map (read-only).
        required: true
        schema:
          type: string
          example: egauge_prm3
    get:
      tags:
        - /sys/modbus/client/map/{name}/option
      summary: Get /sys/modbus/client/map/{name}/option
      operationId: sysModbusClientMapNameOption:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysModbusClientMapNameOption'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/modbus/client/map/{name}/option/{opt}:
    parameters:
      - name: name
        in: path
        description: |
          The name of a system Modbus map (read-only).
        required: true
        schema:
          type: string
          example: egauge_prm3
      - name: opt
        in: path
        description: |
          The name of a Modbus map option.
        required: true
        schema:
          type: string
    get:
      tags:
        - /sys/modbus/client/map/{name}/option/{opt}
      summary: Get /sys/modbus/client/map/{name}/option/{opt}
      operationId: sysModbusClientMapNameOptionOpt:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysModbusClientMapNameOptionOpt'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/modbus/client/map/{name}/reg:
    parameters:
      - name: name
        in: path
        description: |
          The name of a system Modbus map (read-only).
        required: true
        schema:
          type: string
          example: egauge_prm3
    get:
      tags:
        - /sys/modbus/client/map/{name}/reg
      summary: Get /sys/modbus/client/map/{name}/reg
      operationId: sysModbusClientMapNameReg:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysModbusClientMapNameReg'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/modbus/client/map/{name}/reg/{idx}:
    parameters:
      - name: name
        in: path
        description: |
          The name of a system Modbus map (read-only).
        required: true
        schema:
          type: string
          example: egauge_prm3
      - name: idx
        in: path
        description: |
          The index of a Modbus map register.
        required: true
        schema:
          type: string
    get:
      tags:
        - /sys/modbus/client/map/{name}/reg/{idx}
      summary: Get /sys/modbus/client/map/{name}/reg/{idx}
      operationId: sysModbusClientMapNameRegItem:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysModbusClientMapNameRegItem'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/modbus/client/map/{name}/reg/{idx}/name:
    parameters:
      - name: name
        in: path
        description: |
          The name of a system Modbus map (read-only).
        required: true
        schema:
          type: string
          example: egauge_prm3
      - name: idx
        in: path
        description: |
          The index of a Modbus map register.
        required: true
        schema:
          type: string
    get:
      tags:
        - /sys/modbus/client/map/{name}/reg/{idx}/name
      summary: Get /sys/modbus/client/map/{name}/reg/{idx}/name
      operationId: sysModbusClientMapNameRegItemName:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysModbusClientMapNameRegItemName'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/modbus/client/map/{name}/reg/{idx}/addr:
    parameters:
      - name: name
        in: path
        description: |
          The name of a system Modbus map (read-only).
        required: true
        schema:
          type: string
          example: egauge_prm3
      - name: idx
        in: path
        description: |
          The index of a Modbus map register.
        required: true
        schema:
          type: string
    get:
      tags:
        - /sys/modbus/client/map/{name}/reg/{idx}/addr
      summary: Get /sys/modbus/client/map/{name}/reg/{idx}/addr
      operationId: sysModbusClientMapNameRegItemAddr:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysModbusClientMapNameRegItemAddr'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/modbus/client/map/{name}/reg/{idx}/type:
    parameters:
      - name: name
        in: path
        description: |
          The name of a system Modbus map (read-only).
        required: true
        schema:
          type: string
          example: egauge_prm3
      - name: idx
        in: path
        description: |
          The index of a Modbus map register.
        required: true
        schema:
          type: string
    get:
      tags:
        - /sys/modbus/client/map/{name}/reg/{idx}/type
      summary: Get /sys/modbus/client/map/{name}/reg/{idx}/type
      operationId: sysModbusClientMapNameRegItemType:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysModbusClientMapNameRegItemType'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/modbus/client/map/{name}/reg/{idx}/kind:
    parameters:
      - name: name
        in: path
        description: |
          The name of a system Modbus map (read-only).
        required: true
        schema:
          type: string
          example: egauge_prm3
      - name: idx
        in: path
        description: |
          The index of a Modbus map register.
        required: true
        schema:
          type: string
    get:
      tags:
        - /sys/modbus/client/map/{name}/reg/{idx}/kind
      summary: Get /sys/modbus/client/map/{name}/reg/{idx}/kind
      operationId: sysModbusClientMapNameRegItemKind:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysModbusClientMapNameRegItemKind'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/modbus/client/map/{name}/reg/{idx}/unit:
    parameters:
      - name: name
        in: path
        description: |
          The name of a system Modbus map (read-only).
        required: true
        schema:
          type: string
          example: egauge_prm3
      - name: idx
        in: path
        description: |
          The index of a Modbus map register.
        required: true
        schema:
          type: string
    get:
      tags:
        - /sys/modbus/client/map/{name}/reg/{idx}/unit
      summary: Get /sys/modbus/client/map/{name}/reg/{idx}/unit
      operationId: sysModbusClientMapNameRegItemUnit:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysModbusClientMapNameRegItemUnit'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/modbus/client/map/{name}/reg/{idx}/offset:
    parameters:
      - name: name
        in: path
        description: |
          The name of a system Modbus map (read-only).
        required: true
        schema:
          type: string
          example: egauge_prm3
      - name: idx
        in: path
        description: |
          The index of a Modbus map register.
        required: true
        schema:
          type: string
    get:
      tags:
        - /sys/modbus/client/map/{name}/reg/{idx}/offset
      summary: Get /sys/modbus/client/map/{name}/reg/{idx}/offset
      operationId: sysModbusClientMapNameRegItemOffset:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysModbusClientMapNameRegItemOffset'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/modbus/client/map/{name}/reg/{idx}/scale:
    parameters:
      - name: name
        in: path
        description: |
          The name of a system Modbus map (read-only).
        required: true
        schema:
          type: string
          example: egauge_prm3
      - name: idx
        in: path
        description: |
          The index of a Modbus map register.
        required: true
        schema:
          type: string
    get:
      tags:
        - /sys/modbus/client/map/{name}/reg/{idx}/scale
      summary: Get /sys/modbus/client/map/{name}/reg/{idx}/scale
      operationId: sysModbusClientMapNameRegItemScale:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysModbusClientMapNameRegItemScale'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/modbus/client/map/{name}/reg/{idx}/access:
    parameters:
      - name: name
        in: path
        description: |
          The name of a system Modbus map (read-only).
        required: true
        schema:
          type: string
          example: egauge_prm3
      - name: idx
        in: path
        description: |
          The index of a Modbus map register.
        required: true
        schema:
          type: string
    get:
      tags:
        - /sys/modbus/client/map/{name}/reg/{idx}/access
      summary: Get /sys/modbus/client/map/{name}/reg/{idx}/access
      operationId: sysModbusClientMapNameRegItemAccess:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysModbusClientMapNameRegItemAccess'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/model:
    get:
      tags:
        - /sys/model
      summary: Get /sys/model
      operationId: sysModel:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysModel'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net:
    get:
      tags:
        - /sys/net
      summary: Get /sys/net
      operationId: sysNet:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNet'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/ipv4:
    get:
      tags:
        - /sys/net/ipv4
      summary: Get /sys/net/ipv4
      operationId: sysNetIpv4:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetIpv4'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/ipv4/dhcp:
    get:
      tags:
        - /sys/net/ipv4/dhcp
      summary: Get /sys/net/ipv4/dhcp
      operationId: sysNetIpv4Dhcp:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetIpv4Dhcp'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/ipv4/address:
    get:
      tags:
        - /sys/net/ipv4/address
      summary: Get /sys/net/ipv4/address
      operationId: sysNetIpv4Address:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetIpv4Address'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/ipv4/broadcast:
    get:
      tags:
        - /sys/net/ipv4/broadcast
      summary: Get /sys/net/ipv4/broadcast
      operationId: sysNetIpv4Broadcast:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetIpv4Broadcast'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/ipv4/netmask:
    get:
      tags:
        - /sys/net/ipv4/netmask
      summary: Get /sys/net/ipv4/netmask
      operationId: sysNetIpv4Netmask:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetIpv4Netmask'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/ipv4/network:
    get:
      tags:
        - /sys/net/ipv4/network
      summary: Get /sys/net/ipv4/network
      operationId: sysNetIpv4Network:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetIpv4Network'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/ipv4/gateway:
    get:
      tags:
        - /sys/net/ipv4/gateway
      summary: Get /sys/net/ipv4/gateway
      operationId: sysNetIpv4Gateway:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetIpv4Gateway'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/ntp:
    get:
      tags:
        - /sys/net/ntp
      summary: Get /sys/net/ntp
      operationId: sysNetNtp:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetNtp'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/ntp/server:
    get:
      tags:
        - /sys/net/ntp/server
      summary: Get /sys/net/ntp/server
      operationId: sysNetNtpServer:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetNtpServer'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/ntp/server/{idx}:
    parameters:
      - name: idx
        in: path
        description: |
          The index of an NTP server.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/net/ntp/server/{idx}
      summary: Get /sys/net/ntp/server/{idx}
      operationId: sysNetNtpServerItem:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetNtpServerItem'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/ntp/server/{idx}/address:
    parameters:
      - name: idx
        in: path
        description: |
          The index of an NTP server.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/net/ntp/server/{idx}/address
      summary: Get /sys/net/ntp/server/{idx}/address
      operationId: sysNetNtpServerItemAddress:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetNtpServerItemAddress'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/ntp/server/{idx}/name:
    parameters:
      - name: idx
        in: path
        description: |
          The index of an NTP server.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/net/ntp/server/{idx}/name
      summary: Get /sys/net/ntp/server/{idx}/name
      operationId: sysNetNtpServerItemName:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetNtpServerItemName'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/ntp/server/{idx}/state:
    parameters:
      - name: idx
        in: path
        description: |
          The index of an NTP server.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/net/ntp/server/{idx}/state
      summary: Get /sys/net/ntp/server/{idx}/state
      operationId: sysNetNtpServerItemState:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetNtpServerItemState'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/ntp/server/{idx}/weight:
    parameters:
      - name: idx
        in: path
        description: |
          The index of an NTP server.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/net/ntp/server/{idx}/weight
      summary: Get /sys/net/ntp/server/{idx}/weight
      operationId: sysNetNtpServerItemWeight:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetNtpServerItemWeight'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/ntp/server/{idx}/trust_level:
    parameters:
      - name: idx
        in: path
        description: |
          The index of an NTP server.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/net/ntp/server/{idx}/trust_level
      summary: Get /sys/net/ntp/server/{idx}/trust_level
      operationId: sysNetNtpServerItemTrustLevel:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetNtpServerItemTrustLevel'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/ntp/server/{idx}/stratum:
    parameters:
      - name: idx
        in: path
        description: |
          The index of an NTP server.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/net/ntp/server/{idx}/stratum
      summary: Get /sys/net/ntp/server/{idx}/stratum
      operationId: sysNetNtpServerItemStratum:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetNtpServerItemStratum'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/ntp/server/{idx}/next_poll:
    parameters:
      - name: idx
        in: path
        description: |
          The index of an NTP server.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/net/ntp/server/{idx}/next_poll
      summary: Get /sys/net/ntp/server/{idx}/next_poll
      operationId: sysNetNtpServerItemNextPoll:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetNtpServerItemNextPoll'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/ntp/server/{idx}/poll_interval:
    parameters:
      - name: idx
        in: path
        description: |
          The index of an NTP server.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/net/ntp/server/{idx}/poll_interval
      summary: Get /sys/net/ntp/server/{idx}/poll_interval
      operationId: sysNetNtpServerItemPollInterval:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetNtpServerItemPollInterval'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/ntp/server/{idx}/offset:
    parameters:
      - name: idx
        in: path
        description: |
          The index of an NTP server.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/net/ntp/server/{idx}/offset
      summary: Get /sys/net/ntp/server/{idx}/offset
      operationId: sysNetNtpServerItemOffset:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetNtpServerItemOffset'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/ntp/server/{idx}/delay:
    parameters:
      - name: idx
        in: path
        description: |
          The index of an NTP server.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/net/ntp/server/{idx}/delay
      summary: Get /sys/net/ntp/server/{idx}/delay
      operationId: sysNetNtpServerItemDelay:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetNtpServerItemDelay'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/ntp/server/{idx}/jitter:
    parameters:
      - name: idx
        in: path
        description: |
          The index of an NTP server.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/net/ntp/server/{idx}/jitter
      summary: Get /sys/net/ntp/server/{idx}/jitter
      operationId: sysNetNtpServerItemJitter:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetNtpServerItemJitter'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/wlan:
    get:
      tags:
        - /sys/net/wlan
      summary: Get /sys/net/wlan
      operationId: sysNetWlan:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetWlan'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/wlan/ap:
    get:
      tags:
        - /sys/net/wlan/ap
      summary: Get /sys/net/wlan/ap
      operationId: sysNetWlanAp:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetWlanAp'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/wlan/ap/{idx}:
    parameters:
      - name: idx
        in: path
        description: |
          The index of a WLAN access point.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/net/wlan/ap/{idx}
      summary: Get /sys/net/wlan/ap/{idx}
      operationId: sysNetWlanApItem:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetWlanApItem'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/wlan/ap/{idx}/bssid:
    parameters:
      - name: idx
        in: path
        description: |
          The index of a WLAN access point.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/net/wlan/ap/{idx}/bssid
      summary: Get /sys/net/wlan/ap/{idx}/bssid
      operationId: sysNetWlanApItemBssid:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetWlanApItemBssid'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/wlan/ap/{idx}/flags:
    parameters:
      - name: idx
        in: path
        description: |
          The index of a WLAN access point.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/net/wlan/ap/{idx}/flags
      summary: Get /sys/net/wlan/ap/{idx}/flags
      operationId: sysNetWlanApItemFlags:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetWlanApItemFlags'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/wlan/ap/{idx}/frequency:
    parameters:
      - name: idx
        in: path
        description: |
          The index of a WLAN access point.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/net/wlan/ap/{idx}/frequency
      summary: Get /sys/net/wlan/ap/{idx}/frequency
      operationId: sysNetWlanApItemFrequency:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetWlanApItemFrequency'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/wlan/ap/{idx}/signal_level:
    parameters:
      - name: idx
        in: path
        description: |
          The index of a WLAN access point.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/net/wlan/ap/{idx}/signal_level
      summary: Get /sys/net/wlan/ap/{idx}/signal_level
      operationId: sysNetWlanApItemSignalLevel:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetWlanApItemSignalLevel'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/wlan/ap/{idx}/ssid:
    parameters:
      - name: idx
        in: path
        description: |
          The index of a WLAN access point.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/net/wlan/ap/{idx}/ssid
      summary: Get /sys/net/wlan/ap/{idx}/ssid
      operationId: sysNetWlanApItemSsid:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetWlanApItemSsid'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/wlan/net:
    get:
      tags:
        - /sys/net/wlan/net
      summary: Get /sys/net/wlan/net
      operationId: sysNetWlanNet:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetWlanNet'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/wlan/net/{idx}:
    parameters:
      - name: idx
        in: path
        description: |
          The index of a WLAN network.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/net/wlan/net/{idx}
      summary: Get /sys/net/wlan/net/{idx}
      operationId: sysNetWlanNetItem:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetWlanNetItem'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/wlan/net/{idx}/network_id:
    parameters:
      - name: idx
        in: path
        description: |
          The index of a WLAN network.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/net/wlan/net/{idx}/network_id
      summary: Get /sys/net/wlan/net/{idx}/network_id
      operationId: sysNetWlanNetItemNetworkId:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetWlanNetItemNetworkId'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/wlan/net/{idx}/bssid:
    parameters:
      - name: idx
        in: path
        description: |
          The index of a WLAN network.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/net/wlan/net/{idx}/bssid
      summary: Get /sys/net/wlan/net/{idx}/bssid
      operationId: sysNetWlanNetItemBssid:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetWlanNetItemBssid'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/wlan/net/{idx}/flags:
    parameters:
      - name: idx
        in: path
        description: |
          The index of a WLAN network.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/net/wlan/net/{idx}/flags
      summary: Get /sys/net/wlan/net/{idx}/flags
      operationId: sysNetWlanNetItemFlags:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetWlanNetItemFlags'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/net/wlan/net/{idx}/ssid:
    parameters:
      - name: idx
        in: path
        description: |
          The index of a WLAN network.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/net/wlan/net/{idx}/ssid
      summary: Get /sys/net/wlan/net/{idx}/ssid
      operationId: sysNetWlanNetItemSsid:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysNetWlanNetItemSsid'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/reboot:
    get:
      tags:
        - /sys/reboot
      summary: Get /sys/reboot
      operationId: sysReboot:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysReboot'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/sn:
    get:
      tags:
        - /sys/sn
      summary: Get /sys/sn
      operationId: sysSn:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysSn'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/status:
    get:
      tags:
        - /sys/status
      summary: Get /sys/status
      operationId: sysStatus:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysStatus'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/status/{token}:
    parameters:
      - name: token
        in: path
        description: |
          The token returned when a long-running operation was started.
        required: true
        schema:
          type: string
    get:
      tags:
        - /sys/status/{token}
      summary: Get /sys/status/{token}
      operationId: sysStatusToken:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysStatusToken'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/status/{token}/args:
    parameters:
      - name: token
        in: path
        description: |
          The token returned when a long-running operation was started.
        required: true
        schema:
          type: string
    get:
      tags:
        - /sys/status/{token}/args
      summary: Get /sys/status/{token}/args
      operationId: sysStatusTokenArgs:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysStatusTokenArgs'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/status/{token}/args/{idx}:
    parameters:
      - name: token
        in: path
        description: |
          The token returned when a long-running operation was started.
        required: true
        schema:
          type: string
      - name: idx
        in: path
        description: |
          The index of a status argument.
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      tags:
        - /sys/status/{token}/args/{idx}
      summary: Get /sys/status/{token}/args/{idx}
      operationId: sysStatusTokenArgsItem:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysStatusTokenArgsItem'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/status/{token}/done:
    parameters:
      - name: token
        in: path
        description: |
          The token returned when a long-running operation was started.
        required: true
        schema:
          type: string
    get:
      tags:
        - /sys/status/{token}/done
      summary: Get /sys/status/{token}/done
      operationId: sysStatusTokenDone:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysStatusTokenDone'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/status/{token}/error:
    parameters:
      - name: token
        in: path
        description: |
          The token returned when a long-running operation was started.
        required: true
        schema:
          type: string
    get:
      tags:
        - /sys/status/{token}/error
      summary: Get /sys/status/{token}/error
      operationId: sysStatusTokenError:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysStatusTokenError'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/status/{token}/info:
    parameters:
      - name: token
        in: path
        description: |
          The token returned when a long-running operation was started.
        required: true
        schema:
          type: string
    get:
      tags:
        - /sys/status/{token}/info
      summary: Get /sys/status/{token}/info
      operationId: sysStatusTokenInfo:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysStatusTokenInfo'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/status/{token}/progress:
    parameters:
      - name: token
        in: path
        description: |
          The token returned when a long-running operation was started.
        required: true
        schema:
          type: string
    get:
      tags:
        - /sys/status/{token}/progress
      summary: Get /sys/status/{token}/progress
      operationId: sysStatusTokenProgress:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysStatusTokenProgress'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/status/{token}/ts:
    parameters:
      - name: token
        in: path
        description: |
          The token returned when a long-running operation was started.
        required: true
        schema:
          type: string
    get:
      tags:
        - /sys/status/{token}/ts
      summary: Get /sys/status/{token}/ts
      operationId: sysStatusTokenTs:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysStatusTokenTs'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/time:
    get:
      tags:
        - /sys/time
      summary: Get /sys/time
      operationId: sysTime:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysTime'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/uptime:
    get:
      tags:
        - /sys/uptime
      summary: Get /sys/uptime
      operationId: sysUptime:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysUptime'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/version:
    get:
      tags:
        - /sys/version
      summary: Get /sys/version
      operationId: sysVersion:get
      parameters:
        - $ref: '#/components/parameters/maxDepthParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysVersion'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/version/firmware:
    get:
      tags:
        - /sys/version/firmware
      summary: Get /sys/version/firmware
      operationId: sysVersionFirmware:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysVersionFirmware'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/version/hardware:
    get:
      tags:
        - /sys/version/hardware
      summary: Get /sys/version/hardware
      operationId: sysVersionHardware:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysVersionHardware'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
  /sys/version/kernel:
    get:
      tags:
        - /sys/version/kernel
      summary: Get /sys/version/kernel
      operationId: sysVersionKernel:get
      responses:
        '200':
          description: Normal response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/sysVersionKernel'
                  error:
                    $ref: '#/components/schemas/ErrorString'
        '401':
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedObject'
components:
  parameters:
    afterParam:
      name: after
      in: query
      description: |
        Limits the output to messages with a timestamp that is newer than
        the value specified by this parameter.  The value must be a
        decimal number and may include a fractional part.  The number is
        interpreted as seconds since the epoch.  For most logs, the epoch
        is the Unix epoch (i.e., seconds since the start of Jan 1, 1970
        UTC).  However, for the [kernel log](#tag/logkernel), the epoch is
        the time the meter was powered up (booted).
      schema:
        type: number
      example: 6.9801816
    maxDepthParam:
      name: max-depth
      in: query
      description: Limit output depth of the response.  See [Max-Depth](#tag/Glossary/Max-Depth).
      schema:
        type: integer
        minimum: 1
      example: 2
    filterParam:
      name: filter
      in: query
      description: Response filter string. See [Filter-Spec](#tag/Glossary/Filter-Spec).
      schema:
        type: string
      example: '{foo,bar}'
  pathItems:
    FuncObjectName:
      description: |
        The name of the eScript function.
        Function names start with a letter and consist entirely of alpha-numeric
        characters or underscores (`_`).
    FuncObjectArg:
      description: |
        The list of input arguments the function expects.
    FuncObjectArgItem:
      description: |
        Description of the argument expected at index {idx} of the
        argument list.
    FuncObjectArgItemName:
      description: |
        The formal name of the argument.  The name starts with a letter
        and consist entirely of alpha-numeric characters or underscores
        (`_`).  The name usually suggests the purpose of the
        argument.  It may also be referenced within the help string
        (member `help`).  Other than that, the name has no significance.
    FuncObjectArgItemType:
      description: |
        A [type code](#tag/Glossary/Type-Codes) indicating the type of the
        argument.  The special value `string` indicates that the value
        must be a string.
    FuncObjectHelp:
      description: |
        The help string (documentation) for this function.  In this
        string, references to argument names are enclosed in `arg` tags
        using an XML-like syntax. For example, a reference to an argument
        with name `count` would appear as `<arg>count</arg>` in this
        string.  This can be used to highlight argument names in the
        document string, for example.
    FuncObjectMinArgs:
      description: |
        The minimum number of arguments that need to be passed when
        calling this function.  If zero, all arguments are optional.  This
        value is never larger than the length of the array given for
        member `arg`.
    IPv4Object:
      description: |
        The Internet Protocol v4 ([IPv4](https://www.rfc-editor.org/rfc/rfc791))
        configuration.
    IPv4ObjectAddress:
      x-schema-example: 192.168.1.42
      description: |
        An IPv4 address in dotted decimal notation.
    IPv4ObjectBroadcast:
      x-schema-example: 192.168.1.255
      description: |
        An IPv4 broadcast address in dotted decimal notation.
    IPv4ObjectDHCP:
      description: |
        Whether or not to use [DHCP](https://www.ietf.org/rfc/rfc2131.txt)
        to automatically provision the IPv4 address.  If `true`, DHCP is
        enabled. If `false`, the manually configured IPv4 settings are
        used.
    IPv4ObjectNetmask:
      x-schema-example: 255.255.255.0
      description: |
        The address of the IPv4 gateway in dotted decimal notation.
    IPv4ObjectNetwork:
      x-schema-example: 192.168.1.0
      description: |
        The IPv4 network mask in dotted decimal notation.
    IPv4ObjectGateway:
      x-schema-example: 192.168.1.1
      description: |
        The IPv4 network number in dotted decimal notation.
    ModbusClientMapObject:
      x-schema-example:
        option:
          default-modbus-addr: '2'
          default-serial-params: 9600/8n1
        reg:
          - name: irradiance
            addr: 0
            type: u32
            kind: analog
            unit: W
            offset: 0
            scale: 0.1
            access: ro
          - name: temp
            addr: 1
            type: s32
            kind: analog
            unit: degC
            offset: 0
            scale: 0.01
            access: ro
      description: |
        Modbus map consisting of a list of register definitions and a set
        of options.
    ModbusClientMapObjectOption:
      x-schema-example:
        default-modbus-addr: '2'
        default-serial-params: 9600/8n1
      description: |
        A set of options.  The meter currently supports the following
        options:

          * `default-modbus-addr`: The Modbus unit-number to use by
          default.  This must be a decimal string.  For example: `"1"`.

          * `default-serial-params`: The default serial parameters to use
          when the remote device is connected via a serial port
          (Modbus/RTU).  This must be a string.  For example: `"9600/8n1"`
          for 9600 baud, 8 databits, no parity, 1 stop bit.

          * `default-tcp-port`: The default TCP port number to use when
          the remote device is connected via Modbus/TCP.  This must be a
          decimal string.  For example: `"6001"`.
    ModbusClientMapObjectOptionObject:
      x-schema-example: 9600/8n1
      description: |
        The value of the Modbus map option.
    ModbusClientMapObjectReg:
      description: |
        A list of Modbus register definitions.
    ModbusClientMapObjectRegObject:
      description: |
        A Modbus register definition.
    ModbusClientMapObjectRegObjectName:
      x-schema-example: irradiance
      description: |
        The name of the register.  The user can choose this name freely so
        long as each register within a map has a unique name.
    ModbusClientMapObjectRegObjectAddr:
      x-schema-minimum: 0
      x-schema-maximum: 65535
      description: |
        The Modbus address of the register.
    ModbusClientMapObjectRegObjectType:
      x-schema-example: u32
      x-schema-enum:
        - bit
        - s16
        - u16
        - s32
        - u32
        - s32l
        - u32l
        - s64
        - u64
        - float16
        - float16l
        - float
        - floatl
        - double
      description: |
        The type of the register value.  This may be one of the following:

          * `bit`: One-bit value (a coil, in Modbus terminology).
          * `s16`: Signed 16-bit integer.
          * `u16`: Unsigned 16-bit integer.
          * `s32`: Signed 32-bit integer.
          * `u32`: Unsigned 32-bit integer.
          * `s32l`: Signed 32-bit integer, word-swapped.
          * `u32l`: Unsigned 32-bit integer, word-swapped.
          * `s64`: Signed 64-bit integer.
          * `u64`: Unsigned 64-bit integer.
          * `float16`: IEEE-754 half-precision float.
          * `float16l`: IEEE-754 half-precision floating point,
            little-endian (byte-swapped).
          * `float`: IEEE-754 single-precision float.
          * `floatl`: IEEE-754 single-precision float, word-swapped.
          * `double`: IEEE-754 double-precision float.
    ModbusClientMapObjectRegObjectKind:
      x-schema-enum:
        - analog
        - enum
        - bitset
      description: |
        The kind of the register. Possible values are:

          * `analog`: The value is continuous (the average of two values is
            meaningful).

          * `enum`: The value is discrete (the average of two values is not
            meaningful).  An example for this would be a numeric error code.

          * `bitset`: Each bit in the value is a discrete on/off value.
          An example for this would be a set of error flags.
    ModbusClientMapObjectRegObjectUnit:
      x-schema-example: W
      description: |
        For register of the `analog` kind, this defines the physical unit of
        the register value.  This must be one of the following:

          * `#3`: Unit-less number with 3 decimal digits of precision.
          * `%`: Percentage.
          * `A`: Electric current in amperes.
          * `Ah`: Electric charge in ampere-hours.
          * `As`: Electric charge in ampere-seconds.
          * `C`: Temperature in degree celsius.
          * `Degrees`: Angle in degrees.
          * `Hz`: Frequency in hertz.
          * `Ohm`: Resistance in ohm.
          * `Pa`: Pressure in pascals.
          * `Pct`: Percentage.
          * `RH`: Relative humidity.
          * `Tmd`: Time in days.
          * `Tmh`: Time in hours.
          * `Tms`: Time in seconds.
          * `VA`: Apparent power in volt-amperes.
          * `VAh`: Apparent energy in volt-ampere-hours.
          * `V`: Electric potential in volts.
          * `W/m2`: Irradiance in watts-per-square-meter.
          * `W/m^2`: Irradiance in watts-per-square-meter.
          * `W`: Power in watts.
          * `Wh`: Energy in watt-hours.
          * `degC`: Temperature in degree celsius.
          * `deg`: Angle in degrees.
          * `g`: Mass in grams.
          * `hPa`: Pressure in hecto-pascals.
          * `h`: Time in hours.
          * `kAh`: Electric charge in kilo-ampere-hours.
          * `kO`: Resistance in kilo-ohms.
          * `kPa`: Pressure in kilo-pascals.
          * `kVAh`: Apparent energy in kilo-volt-ampere-hours.
          * `kW`: Power in kilo-watts.
          * `kWh`: Energy in kilo-watt-hours.
          * `kg`: Mass in kilo-grams.
          * `kvarh`: Reactive energy in kilo-volt-ampere-hours.
          * `m/s`: Speed in meters-per-second.
          * `m3/s`: Volume flow in cubic-meters-per-second.
          * `m3`: Volume in cubic-meters.
          * `mA`: Electric current in milli-amperes.
          * `mAh`: Electric charge in milli-ampere-hours.
          * `mSecs`: Time in milli-seconds.
          * `mV`: Electric potential in milli-volts.
          * `mV`: Electric potential in milli-volts.
          * `m^3/s`: Volume flow in cubic-meters-per-second.
          * `m^3`: Volume in cubic-meters.
          * `meters`: Distance in meters.
          * `mm`: Distance in milli-meters.
          * `mps`: Speed in meters-per-second.
          * `ms`: Time in milli-seconds.
          * `ohms`: Resistance in ohm.
          * `ppm`: Parts-per-million.
          * `s`: Time in seconds.
          * `secs`: Time in seconds.
          * `var`: Reactive power in volt-ampere.
          * `varh`: Reactive energy in volt-ampere-hours.
          * `°C`: Temperature in degree celsius.
    ModbusClientMapObjectRegObjectOffset:
      description: |
        An offset value that is used to convert the Modbus register value
        to a value in the specified physical unit.  Specifically, when the
        Modbus value of the register is *reg*, then corresponding physical
        value *phys* is calculated as:

          > *phys* = (*reg* + `offset`) * `scale`

        where `offset` is the value defined here and `scale` is
        the value defined for member `scale`.
    ModbusClientMapObjectRegObjectScale:
      x-schema-example: 0.1
      description: |
        A scale value that is used to convert the Modbus register value
        to a value in the specified physical unit.  Specifically, when the
        Modbus value of the register is *reg*, then corresponding physical
        value *phys* is calculated as:

          > *phys* = (*reg* + `offset`) * `scale`

        where `scale` is the value defined here and `offset` is
        the value defined for member `offset`.
    ModbusClientMapObjectRegObjectAccess:
      x-schema-enum:
        - ro
        - rw
      description: |
        The access-mode of the register.  It must be one of:
          * `ro`: read-only
          * `rw`: read-write
  securitySchemes:
    ApiKey:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    DigestObject:
      type: object
      properties:
        rlm:
          type: string
          description: The authentication realm as returned in a 401 response.
          example: eGauge Administration
        usr:
          type: string
          description: The username to authenticate with.
          example: owner
        nnc:
          type: string
          description: |
            The server nonce as returned in a 401 response.  Server
            nonces have a lifetime of about 1 minute.  This means a
            client has to be able to complete the digest login within a
            minute of receiving a 401 response. If it fails to do so,
            the server would reject an authentication request, even
            though the credentials may have been valid. If this were to
            happen, the client would simply have to redo the digest
            login with the new nonce. It is therefore advisable for the
            client to (temporarily) save the password the user entered,
            so that if the 1 minute lifetime were to expire, the client
            could reissue the request without having to prompt the user
            for credentials again.
          example: eyJ0eXAi...w5GCvM
        cnnc:
          type: string
          description: |
            A client-selected nonce.  This should be generated with a
            cryptographically strong random number generator.

            The purpose of the client-nonce is to prevent chosen
            plain-text attacks by a malicious server (or
            intermediary). Without the client nonce, a malicious server
            could try to guess the password by sending specially crafted
            nonce values. The client nonce prevents such attacks as long
            as the client uses new and cryptographically strong random
            value on each login attempt.
          example: 565ce9541eddec103347b5174704e188
        hash:
          type: string
          description: |
            The hash which proves that the client possesses
            the password of the specified username.  This must be
            calculated as the MD5 hash of the string obtained by
            concatenating *ha1*, a colon, *nnc*, a colon, and *cnnc*.
            *nnc* is the server nonce
            returned in a 401 response, *cnnc* is the client-selected
            nonce, and *ha1* is the string obtained by calculating the
            MD5 hash of the string obtained by concatenating the
            username *usr*, a colon, realm *rlm*, a colon, and
            password *pwd*.  More formally:

              > *ha1 = MD5(usr:rlm:pwd)* \
              > *hash = MD5(ha1:nnc:cnnc)*
          example: ce5e308c27da651964de14f65bd8b059
      required:
        - rlm
        - usr
        - nnc
        - cnnc
        - hash
    PasswordObject:
      type: object
      properties:
        pwd:
          type: string
          format: password
          description: The password to authenticate with.
          example: secrets-secrets
        rlm:
          type: string
          description: The authentication realm as returned in a 401 response.
          example: eGauge Administration
        usr:
          type: string
          description: The username to authenticate with.
          example: owner
      required:
        - rlm
        - usr
        - pwd
    ErrorString:
      type: string
      description: |
        A message describing the first error that occurred.  This
        member is present only if an error occurred.
      example: Error message (present if an error occurred).
    JWTObject:
      type: object
      properties:
        jwt:
          type: string
          format: jwt
          description: A JWT which can be used to authenticate accesses to protected resources.
          example: eyJ0eXAi...aQvQxY
        error:
          $ref: '#/components/schemas/ErrorString'
    StatusObject:
      type: object
      properties:
        status:
          type: string
          description: A string describing the successful completion of an operation.
          example: OK
        error:
          $ref: '#/components/schemas/ErrorString'
    UnauthorizedObject:
      description: Unauthorized response.
      properties:
        rlm:
          type: string
          description: The authentication realm.
          example: eGauge Administration
        nnc:
          type: string
          description: The server nonce to use for obtaining JWT token via the digest protocol.
          example: eyJ0eXAi...w5GCvM
        error:
          type: string
          description: The reason the 401 response was returned.
          example: Authentication required.
    RightsObject:
      properties:
        usr:
          type: string
          description: The username of the authenticated user.
          example: owner
        rights:
          description: |
            The array of rights the user possesses.  Possible rights
            are:

              1) `save`: The user has the right to change (save) the meter
              configuration.

              1) `ctrl`: The user has the right to perform control operations
              such as putting a device in a particular operational state
              (e.g., opening or closing a relay or setting the temperature
              on a thermostat).  The device being controlled may be a remote
              device attached to the meter implementing this API.
          type: array
          items:
            type: string
            enum:
              - save
              - ctrl
          example:
            - save
            - ctrl
    CaptureChannelInfoObject:
      type: object
      properties:
        channels:
          description: |
            Map of available (configured) channels.  For each channel
            number, the name name and the physical unit of the sample
            values are given.
          type: object
          patternProperties:
            ^[0-9]+$:
              type: object
              properties:
                name:
                  description: Channel name.
                  type: string
                unit:
                  description: Physical unit of channel values.
                  type: string
              required:
                - name
                - unit
          example:
            '0':
              name: L1
              unit: V
            '4':
              name: S1
              unit: A
        error:
          $ref: '#/components/schemas/ErrorString'
      required:
        - channels
    CaptureState:
      type: string
      description: |
        Current state of the capture interface:

          * `available`: The capture interface is idle and available for use.
          * `armed`: A capture has been initiated and the system is waiting
            for the trigger condition to be satisfied.
          * `capturing`: The capture interface is busy collecting samples.
          * `full`: The capture has finished and the sampled data is included
            in the response.
      enum:
        - available
        - armed
        - capturing
        - full
    CaptureCookieObject:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/CaptureState'
        cookie:
          description: The token that identifies the newly started capture.
          type: integer
          minimum: 0
          maximum: 4294967295
        error:
          $ref: '#/components/schemas/ErrorString'
      required:
        - state
        - cookie
      example:
        state: armed
        cookie: 34551455
    CaptureProgressObject:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/CaptureState'
        count:
          description: The number of samples acquired so far.
          type: integer
          minimum: 0
        max_count:
          description: The total number of samples being acquired.
          type: integer
          minimum: 1
        error:
          $ref: '#/components/schemas/ErrorString'
      required:
        - state
        - count
        - max_count
      example:
        state: capturing
        count: 235
        max_count: 600
    ForeverStamp:
      type: string
      description: |
        A [Unix timestamp](#tag/Glossary/Unix-Timestamp) expressed as a
        decimal string that may contain a fractional value for sub-second
        resolution.  A string is used here since most JSON libraries store
        numbers as IEEE-754 double-precision numbers and the 54-bit
        mantissa of that format may not be sufficient to accurately
        represent the timestamp.
      example: '1677523091.000900435'
    CaptureResultObject:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/CaptureState'
        ts_freq:
          description: The frequency of the timestamp counter in hertz.
          type: integer
          minimum: 0
        first_sample:
          description: The absolute timestamp of the first sample.
          $ref: '#/components/schemas/ForeverStamp'
        ch_mask:
          description: |
            Bit mask of channels included in `r` member. Each array
            element contains 32 bits in little-endian word order.  Note
            that `r` may contain more channels than requested.
          type: array
          items:
            type: integer
            minItems: 1
            minimum: 0
            maximum: 4294967295
        r:
          description: |
            The sampled data in order of lowest-numbered channel to
            highest numbered channel.
          type: array
          items:
            description: The data sampled for one timestamp.
            type: object
            properties:
              t:
                description: |
                  Timestamp relative to previous sample in units of
                  timestamp ticks, ticking at the frequency given
                  by member `ts_freq`.
                type: integer
              d:
                description: Channel data acquired for this timestamp.
                type: array
                items:
                  type: number
                  minItems: 1
              trigger:
                description: |
                  This is `true` if the trigger occurred at the time
                  indicated by member `t`.
                type: boolean
            required:
              - t
              - d
        error:
          $ref: '#/components/schemas/ErrorString'
      required:
        - state
        - ts_freq
        - first_sample
        - ch_mask
        - r
      example:
        state: full
        ts_freq: 1000000
        first_sample: '1676992626.953'
        ch_mask:
          - 5
          - 0
        r:
          - t: 5300
            d:
              - 515.5
              - 1034.5
          - t: 42
            d:
              - -515.5
    VersionObject:
      properties:
        version:
          type: string
          description: The latest available firmware/kernel version.
          example: 4.4
        error:
          $ref: '#/components/schemas/ErrorString'
    TokenObject:
      properties:
        token:
          type: string
          description: |
            A status token.  This token is a hexadecimal string
            (typically 32 characters long) which can be used to check on
            the current status of a potentially long-running operation.
            The current status can be retrieved from URL
            [/sys/status/*token*](#tag/sysstatustoken).
          example: 473c31462e62848b5352314dfc608669
        error:
          $ref: '#/components/schemas/ErrorString'
    CTidInfoObject:
      type: object
      description: Provides information about the sensor attached to a port.
      properties:
        error:
          $ref: '#/components/schemas/ErrorString'
        k:
          type: integer
          minimum: 0
          description: |
            The type of the sensor (kind).
        mfgid:
          type: integer
          minimum: 0
          description: |
            The numeric identifier of the manufacturer of the sensor.
        model:
          type: string
          description: |
            The model name of the sensor.
        params:
          type: object
          description: Sensor-type dependent parameters.
          patternProperties:
            ^[a-zA-Z_][a-zA-Z_0-9]+$:
              description: A sensor-type dependent parameter.
        polarity:
          type: string
          enum:
            - +
            - '-'
          description: |
            The polarity of the voltage that was used to read this info.
        port:
          type: integer
          minimum: 1
          description: |
            The port number this information is associated with.
        rload:
          type: number
          description: |
            The load resistance that was applied when characterizing the
            other parameters of this sensor.
        rsrc:
          type: number
          description: |
            The output resistance of the sensor.
        sn:
          type: integer
          minimum: 0
          maximum: 16777215
          description: |
            The serial number of the sensor.
        tid:
          type: integer
          minimum: 0
          description: |
            Transaction ID of the scan that initiated the reading of this
            information.
        ts:
          description: |
            The [Unix timestamp](#tag/Glossary/Unix-Timestamp) of when the
            information was scanned.
          $ref: '#/components/schemas/ForeverStamp'
        version:
          type: integer
          minimum: 0
          description: |
            The CTid protocol version that the sensor implements.
      required:
        - ts
        - tid
        - port
        - mfgid
        - model
        - sn
      example:
        ts: '1668455577'
        tid: 2008264382
        port: 2
        polarity: +
        version: 2
        mfgid: 0
        model: ERA
        sn: 2
        k: 2
        rsrc: 176
        rload: 10000000
        params:
          size: 106
          i: 2775
          v: 0.33333
          a: 0.45
          tv: 0
          ta: 0
          cal:
            '1.5':
              v: 0
              a: 0
            '5.0':
              v: 0
              a: 0
            '15.0':
              v: 0
              a: 0
            '50.0':
              v: 0
              a: 0
    EmptyObject:
      properties:
        error:
          $ref: '#/components/schemas/ErrorString'
    DeviceAttributesWithIndexObject:
      type: object
      properties:
        index:
          type: number
          description: |
            The optional index used to select a unique device in case the
            other attributes are ambiguous and match multiple devices.  If
            not specified explicitly, an index of 0 is implied.
        path:
          type: array
          items:
            type: string
          description: The unique path identifying the device.
        interface:
          type: array
          items:
            type: string
            description: |
              The interface name that must be supported by the target
              device.
      additionalProperties:
        patternProperties:
          ^[-_a-zA-Z0-9]*$:
            type: string
            description: |
              The value of the attribute.
    CtrlCallResponseObject:
      type: object
      properties:
        result:
          type: object
          properties:
            tid:
              type: integer
              format: int54
              minimum: 0
              description: |
                The transaction id that uniquely identifies the newly
                issued call.  This id can be used to fetch the result of
                the method call or to cancel the call.
        error:
          $ref: '#/components/schemas/ErrorString'
      example:
        result:
          tid: 4294967360
    CtrlCallResultObject:
      type: object
      properties:
        result:
          description: |
            The value returned by the method.  If the method returns
            no value, this member is not present.
        error:
          description: |
            If this string starts with `EAGAIN:`, the call is still in
            progress and the application should retry the same request at
            a later time.
          $ref: '#/components/schemas/ErrorString'
    CtrlDeviceResultObject:
      type: object
      properties:
        result:
          type: array
          description: The list of detected devices.
          items:
            type: object
            description: Detected device description.
            properties:
              path:
                type: array
                items:
                  type: string
                description: The unique path identifying the device.
              interface:
                type: array
                items:
                  type: string
                  description: The list interface names supported by the device.
            additionalProperties:
              patternProperties:
                ^[-_a-zA-Z0-9]*$:
                  type: string
                  description: |
                    The value of the attribute.
        error:
          $ref: '#/components/schemas/ErrorString'
    LocalApparentObject:
      type: object
      description: |
        Calculated apparent energy values (product of the normal values of two
        sensors).
      patternProperties:
        .*$:
          type: object
          description: |
            Apparent energy metrics.  The member names indicate the pair
            of sensors used to calculate the apparent energy.  For
            example, `S3*L3` is the apparent energy of sensor
            inputs `S3` and `L3`.  If the member name starts with a dash
            (`-`), it indicates that the produce was negated.
          properties:
            cumul:
              type: string
              description: |
                Accumulated apparent energy.  This is a signed 64-bit integer
                encoded as a decimal string.
              example: '-3452345'
            rate:
              type: number
              description: Rate of change of apparent energy (apparent power).
    LocalEnergyObject:
      type: object
      description: |
        Calculated (real) energy values (time-integral of the product of
        two sensors).
      patternProperties:
        ^.*$:
          description: |
            Real energy metrics. The member names indicate the pair of
            sensors used to calculate the energy.  For example, `S3*L3`
            is the energy of sensor inputs `S3` and `L3`.  If the
            member name starts with a dash (`-`), it indicates that the
            value of the first sensor was negated before
            time-integrating the product.
          type: object
          properties:
            cumul:
              type: string
              description: |
                Accumulated energy.  This is a signed 64-bit integer
                encoded as a decimal string.
              example: '-1234'
            rate:
              description: Rate of change of energy (power).
              type: number
    LocalStatsObject:
      type: object
      properties:
        dt_overflow:
          type: integer
        upos_overflow:
          type: integer
        zc_overflow:
          type: integer
        dt2_overflow:
          type: integer
        dt2_out_of_10percent_bounds:
          type: integer
        ring_buffer_overflows:
          type: integer
        dma_late:
          type: integer
        intgr_overflows:
          type: integer
    LocalValuesObject:
      type: object
      description: Sensor values.
      patternProperties:
        ^.*$:
          description: Sensor metric and/or type.
          type: object
          properties:
            type:
              description: |
                [Type code](#tag/Glossary/Type-Codes) indicating physical unit.
              type: string
            cumul:
              description: Accumulated sensor values.
              type: object
              properties:
                'n':
                  type: string
                  description: |
                    Accumulated normal value (usually RMS).  This is a
                    signed 64-bit integer encoded as a decimal string.
                  example: '42'
                m:
                  type: string
                  description: |
                    Accumulated mean (average) value.  This is a
                    signed 64-bit integer encoded as a decimal string.
                  example: '345'
                f:
                  type: string
                  description: |
                    Accumulated frequency [Hz·s].  This is a
                    signed 64-bit integer encoded as a decimal string.
                  example: '345'
            rate:
              description: Rate of change (current) values.
              type: object
              properties:
                'n':
                  description: Normal value (usually RMS value).
                  type: number
                m:
                  description: Mean (average) value.
                  type: number
                f:
                  description: Frequency [Hz].
                  type: number
    LocalObject:
      type: object
      properties:
        ts:
          description: |
            The realtime stamp of when the returned values where measured.
          $ref: '#/components/schemas/ForeverStamp'
        apparent:
          $ref: '#/components/schemas/LocalApparentObject'
        energy:
          $ref: '#/components/schemas/LocalEnergyObject'
        stats:
          $ref: '#/components/schemas/LocalStatsObject'
        values:
          $ref: '#/components/schemas/LocalValuesObject'
      required:
        - ts
      example:
        ts: '1579893622.000132'
        values:
          L1:
            rate:
              'n': 125.01754
              f: 60.0079803
          L3-L1:
            rate:
              'n': 0.631658375
              f: 59.9902229
          S15:
            rate:
              'n': 0.554819047
              f: 0
          S5:
            rate:
              'n': 3.87214255
              f: 0
        energy:
          S1*L1:
            rate: -145.436066
          S15*(L3-L1):
            rate: -0.000681963167
          '-S5*L1':
            rate: -0.846870422
    KernelLogObject:
      type: object
      properties:
        log:
          type: array
          description: |
            The kernel log, sorted from oldest to youngest.
          items:
            type: object
            properties:
              prio:
                type: integer
                minimum: 0
                description: |
                  The priority of the log message, 0 being lowest
                  priority and 7 being the highest.
              ts:
                type: number
                description: |
                  The timestamp of when the entry was added to
                  the log.  It is measured as seconds since the meter was
                  booted (powered up).
              msg:
                type: string
                description: The log message.
          example:
            - prio: 6
              ts: '6.9801816'
              msg: '    6.980181] ehci-atmel: EHCI Atmel driver'
            - prio: 3
              ts: '6.9886136'
              msg: '    6.988613] atmel-ehci 500000.ehci: EHCI Host Controller'
        error:
          $ref: '#/components/schemas/ErrorString'
    LuaLogObject:
      type: object
      properties:
        log:
          type: array
          description: |
            The Lua output log, sorted from oldest to youngest.
          items:
            type: object
            properties:
              ts:
                description: |
                  The [Unix timestamp](#tag/Glossary/Unix-Timestamp) indicating
                  when the entry was added to the log.
                $ref: '#/components/schemas/ForeverStamp'
              msg:
                type: string
                description: The log message.
        error:
          $ref: '#/components/schemas/ErrorString'
      example:
        log:
          - ts: '1677872469.109779248'
            msg: 'Register cost script failed: Lua error: unknown register Grid.'
          - ts: '1677872470.100956573'
            msg: 'Tariff season: Winter'
    SystemLogObject:
      type: object
      properties:
        log:
          type: array
          description: |
            The system log, sorted from oldest to youngest.
          items:
            type: object
            properties:
              msg:
                type: string
                description: |
                  The syslog message.  The message starts with a
                  human-readable timestamp.  However, there is no
                  indication of the timezone in this timestamp and,
                  depending on the source of the message, the timestamp
                  may be in UTC or in the local timezone.
        error:
          $ref: '#/components/schemas/ErrorString'
      example:
        log:
          - msg: 'Aug 31 22:11:08 devname syslog.info syslogd started: BusyBox v1.26.2'
          - msg: 'Aug 31 22:11:08 devname daemon.err statusd[427]: failed'
    ServiceProvidersObject:
      type: object
      properties:
        reply:
          type: object
          properties:
            providers:
              type: array
              description: |
                The list of available service providers.
              items:
                type: object
                description: |
                  A service provider.
                properties:
                  name:
                    type: string
                    description: |
                      The name of the service provider.
                  control:
                    type: string
                    description: |
                      The control URL through which a customer can sign up
                      for this service.
    TariffProvidersObject:
      type: object
      properties:
        reply:
          type: object
          properties:
            providers:
              type: array
              description: |
                The list of available tariff service providers.
              items:
                type: object
                description: |
                  A tariff service provider.
                properties:
                  name:
                    type: string
                    description: |
                      The tariff name.
                  country:
                    type: string
                    description: |
                      The name of the country in which this tariff
                      provider operates.
                  utility:
                    type: string
                    description: |
                      The name of the service provider.
                  tariffs:
                    type: string
                    description: |
                      The URL of a [Lua](#tag/Glossary/Lua-Scripts) script
                      which calculates the applicable rate.
                  params:
                    type: array
                    description: |
                      An array of tariff parameters that need to be
                      defined for this tariff provider.  User interfaces
                      need to make sure that the listed parameters are
                      filled in by the user and then save them in the
                      corresponding [server-storage](#tag/store) variables
                      before activating the tariff.  The Lua tariff script
                      can then rely on these variables to correctly
                      calculate cost.

                      The parameters have the following meaning:

                        * `bill_contracted_demand`: If present,
                        [server-storage](#tag/store) variable
                        `global/billing/bill_contracted_demand` needs to
                        be set up to indicated whether or not the contract
                        demand should be billed, regardless of the actual
                        demand.  If the value of this variable is the
                        string `"true"`, the contract demand needs to be
                        billed.

                        * `contract_demand`: If present,
                        [server-storage](#tag/store) variable
                        `global/billing/contract_demand` needs to be set
                        up to indicate the demand (typically in kilowatts)
                        that was contracted from the utility.  This must
                        be a decimal number string.

                        * `start_day`: If present,
                        [server-storage](#tag/store) variable
                        `global/billing/start_day` needs to be set up to
                        indicate the day of the month that the meter is
                        read.  This must be a decimal integer string in
                        the range from 1 to 31.

                        * `surcharges`: If present,
                        [server-storage](#tag/store) variable
                        `global/billing/surcharges` needs to be set up to
                        indicate energy surcharges as a cost per unit
                        energy (e.g., dollars per kWh).  This must be a
                        decimal number string.

                        * `taxes`: If present,
                        [server-storage](#tag/store) variable
                        `global/billing/taxes` needs to be set up to
                        indicate the percentage of taxes to add to the
                        calculated energy cost.  This must be a positive
                        decimal number string.
                    items:
                      type: string
                      enum:
                        - bill_contracted_demand
                        - contract_demand
                        - start_day
                        - surcharges
                        - taxes
    Int64:
      type: string
      description: Decimal signed 64-bit integer.
      example: '345359'
    RegisterResponseObject:
      properties:
        error:
          $ref: '#/components/schemas/ErrorString'
        ranges:
          type: array
          items:
            type: object
            properties:
              ts:
                description: |
                  The timestamp of the first row in member `rows`.
                $ref: '#/components/schemas/ForeverStamp'
              delta:
                type: number
                minimum: 0
                description: |
                  The number of seconds that elapsed between adjacent
                  entries in array `rows`.
              rows:
                type: array
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/Int64'
                description: |
                  An array of register rows ordered from youngest to
                  oldest.  The first row was measured at the timestamp
                  given by member `ts`.  Each subsequent row is `delta`
                  seconds older than its preceeding row.  A row consists
                  of an array of strings which list the register values
                  in order of increasing register index.  Only selected
                  registers are present in this array (see query option
                  `reg`).  The register values are signed 64-bit
                  integers, represented as decimal strings.
        registers:
          type: array
          items:
            type: object
            properties:
              did:
                type: integer
                minimum: 0
                description: |
                  This member is present only for physical registers.  It
                  indicates the column number in which the database stores
                  the register value.  Each physical register has a
                  unique column number.  If a register is renamed, this
                  number remains the same.  On the other hand, if a
                  register is deleted and then another one is added back,
                  the new one may get assigned the column number of the
                  old, deleted register.
              formula:
                type: string
                description: |
                  This member is present for virtual registers but only if
                  query parameter `virtual=formula` is specified.  It
                  provides the
                  [formula](#tag/Glossary/Virtual-Register-Formulas) that
                  is used to calculate the value of the virtual register.
              idx:
                type: integer
                minimum: 0
                description: |
                  The index of this register.  Register indices are used
                  to provide a compact way to specify sets of registers
                  (see query parameter `reg`).
              name:
                type: string
                description: The register name.
              rate:
                type: number
                description: |
                  The rate at which the value of the register is changing
                  as of the most recent measurement.  For example, for a
                  register that records energy used, the number reported
                  here is the current power consumption.
              type:
                type: string
                description: |
                  The [type code](#tag/Glossary/Type-Codes) of the register.
            required:
              - name
              - type
              - idx
        ts:
          description: |
            The realtime stamp of the most recent measurement.  This is
            the time the `rate` members returned in section `registers`
            were measured.
          $ref: '#/components/schemas/ForeverStamp'
      example:
        ts: '1678330813.000129799'
        registers:
          - name: use
            type: P
            idx: 0
            formula: +"Grid"+"Solar"
          - name: Grid
            type: P
            idx: 17
            did: 0
            rate: 1798
          - name: Solar
            type: P
            idx: 20
            did: 1
            rate: -4
        ranges:
          - ts: '1678298313.000129799'
            delta: 1
            rows:
              - - '117607805899'
                - '268487638108'
              - - '-224'
                - '-480'
              - - '-218'
                - '-481'
          - ts: '1678298040'
            delta: 60
            rows:
              - - '905'
                - '-3533'
              - - '7663'
                - '-34573'
              - - '12036'
                - '-35703'
              - - '8418'
                - '-36612'
              - - '6408'
                - '-37505'
    RegisterConditionObject:
      properties:
        current:
          $ref: '#/components/schemas/ForeverStamp'
          description: |
            Current value of the time point specified in the condition.
        error:
          $ref: '#/components/schemas/ErrorString'
        result:
          type: boolean
          example: false
          description: |
            The value the condition evaluated to.  This will always be
            `false` as, otherwise, a normal register result would have
            been returned.
    StoreContentObject:
      type: object
      properties:
        name:
          type: string
          description: |
            The name of the section being read.
        content:
          description: |
            The content as name/value pairs.
          patternProperties:
            ^[-a-zA-Z%_/]*$:
              type: string
              description: |
                The value of the variable.  Interpretation of this value
                is left to the applications that use it.  By convention,
                this is often a URL-encoded string or a JSON-encoded
                value.
    StoreVariableUpdates:
      type: object
      patternProperties:
        ^[-a-zA-Z%_/]*$:
          type:
            - string
            - 'null'
          description: |
            The new value of the variable.  A `null` value deletes the
            variable.  Any other value either creates a new variable or
            updates an existing variable with the specified value.

            Interpretation of this value is left to the applications that
            use it.  By convention, this is often a URL-encoded string or
            a JSON-encoded value.
    StoreSingleVariableUpdate:
      type: object
      properties:
        '':
          type:
            - string
            - 'null'
          description: |
            The new value of the variable.  A `null` value deletes the
            variable.  Any other value either creates a new variable or
            updates an existing variable with the specified value.

            Interpretation of this value is left to the applications that
            use it.  By convention, this is often a URL-encoded string or
            a JSON-encoded value.
    configBacnetServerBipPort:
      minimum: 0
      maximum: 65535
      example: 47808
      description: |
        The IPv4 port number used by the server when `bip` is enabled in
        [/config/bacnet/server/enable](#tag/configbacnetserverenable).
        The default value is 0xBAC0 (47808).
      type: integer
    configBacnetServerBip:
      description: |
        The [BACnet](https://bacnet.org/) over
        [IPv4](https://en.wikipedia.org/wiki/Internet_Protocol_version_4)
        configuration.
      type: object
      properties:
        port:
          $ref: '#/components/schemas/configBacnetServerBipPort'
    configBacnetServerEnableItem:
      enum:
        - ethernet
        - bip
        - mstp
      description: |
        The name of an enabled BACnet protocol.  Possible values are:

          * `ethernet`: BACnet over raw Ethernet.

          * `bip`: BACnet over the UDP/IP.

          * `mstp`: BACnet over MS/TP (RS-485).
      type: string
    configBacnetServerEnable:
      description: |
        The list of BACnet protocols that are enabled.  An empty list
        indicates that the BACnet server is disabled.  The meter is
        currently restricted to supporting a single protocol at a time, so
        this array may have at most one element.
      type: array
      items:
        $ref: '#/components/schemas/configBacnetServerEnableItem'
    configBacnetServerEpochRelative:
      description: |
        If true, the BACnet server reports cumulative values relative to
        the [meter epoch](#tag/configdbepoch).  If false, raw absolute
        values are reported relative to when the meter was manufactured.
      type: boolean
    configBacnetServerId:
      minimum: 0
      maximum: 4194303
      description: |
        The object id of the BACnet server.
      type: integer
    configBacnetServerMstpMac:
      minimum: 0
      maximum: 127
      description: |
        The MS/TP address of the meter's BACnet server.
      type: integer
    configBacnetServerMstpMaxMac:
      description: |
        The maximum address used by any device connected to the same MS/TP
        network as this meter.  A value of 127 is safe, but setting it to
        the lowest address in use significantly increases MS/TP
        performance.
      type: integer
    configBacnetServerMstpPort:
      example: USB1:19200/8n1
      description: |
        The [serial-port](#tag/Glossary/Serial-Ports) to use for the MS/TP
        protocol.
      type: string
    configBacnetServerMstp:
      minimum: 0
      maximum: 127
      example: 1
      description: |
        The BACnet over MS/TP configuration.  This is used only if the
        `mstp` protocol is [enabled](#tag/configbacnetserver/enable).
      type: object
      properties:
        mac:
          $ref: '#/components/schemas/configBacnetServerMstpMac'
        max-mac:
          $ref: '#/components/schemas/configBacnetServerMstpMaxMac'
        port:
          $ref: '#/components/schemas/configBacnetServerMstpPort'
    configBacnetServer:
      description: |
        The [BACnet](https://bacnet.org/) server configuration.
      type: object
      properties:
        bip:
          $ref: '#/components/schemas/configBacnetServerBip'
        enable:
          $ref: '#/components/schemas/configBacnetServerEnable'
        epoch-relative:
          $ref: '#/components/schemas/configBacnetServerEpochRelative'
        id:
          $ref: '#/components/schemas/configBacnetServerId'
        mstp:
          $ref: '#/components/schemas/configBacnetServerMstp'
    configBacnet:
      description: |
        The [BACnet](https://bacnet.org/) configuration.
      type: object
      properties:
        server:
          $ref: '#/components/schemas/configBacnetServer'
    configDbEpoch:
      example: '1675276020'
      description: |
        The time when the meter started recording data.  This is a decimal
        [Unix timestamp](#tag/Glossary/Unix-Timestamp) string.

        The relevance of this resource is that other services in this API
        by default return accumulated register values relative to this
        time so that, at the time of the epoch, they all read 0.  Changing
        this value therefore changes the values reported by those
        services.  Similarly, user interfaces that use this API generally
        do not present data before the epoch, effectively providing a
        limit to the history visible to the user.

        Writing this resource does not change the data stored in the
        database.  In other words, the epoch generally can freely be moved
        forward or backward in time.  The only constraint is that the new
        epoch does have to be within the time range covered by the
        database.  If a future time is specified, it will automatically be
        capped to the time of the most recent row in the database.  If a
        time is specified that is older than the oldest row in the
        database, an error object is returned.  If this error occurs,
        check the device time ([/sys/time](#tag/systime)) and database
        configuration ([/sys/db](#tag/sysdb)) to confirm that they have
        the expected values.
      type: string
    configDb:
      description: |
        The database configuration.
      type: object
      properties:
        epoch:
          $ref: '#/components/schemas/configDbEpoch'
    configDisplayBacklightBrightness:
      minimum: 0
      maximum: 255
      description: |
        The brightness of the backlight.  Zero is darkest (backlight off),
        255 is the brightest.
      type: integer
    configDisplayBacklightDuration:
      format: int32
      minimum: -1
      maximum: 2147483647
      example: 60
      description: |
        The number of seconds the backlight should remain on after the
        last activation of the display navigation buttons.  Zero means the
        backlight is always off.  The special value -1 indicates that the
        backlight remains on at all times.
      type: integer
    configDisplayBacklight:
      description: |
        The backlight configuration of the display.
      type: object
      properties:
        brightness:
          $ref: '#/components/schemas/configDisplayBacklightBrightness'
        duration:
          $ref: '#/components/schemas/configDisplayBacklightDuration'
    configDisplayContrast:
      minimum: 0
      maximum: 127
      example: 65
      description: |
        The LCD contrast Zero means no contrast (display is blank), 127
        means maximum contrast (display is all black).  A value of around
        65 usually provides a good contrast.
      type: integer
    configDisplayFontset:
      enum:
        - small
        - normal
        - large
      example: normal
      description: |
        The fontset to use for the display.  Possible values are:

          * `small`: Smaller than the `normal` fontset, this is a lower
            quality fontset that can fit more text on the display.

          * `normal`: This fontset provides a good tradeoff between font
            quality and the amount of text that can fit on the display.
            This should work well for languages with relatively simple
            characters, such as English or French.

          * `large`: This fontset should work well for languages with more
            complex characters such as Korean or Chinese.

        **Note** The value of this resource needs to be localized
        (translated) before presenting it to a user.
      type: string
    configDisplayScreenRegistersName:
      example: ic
      description: |
        Specifies how the named register is to be displayed.
        The following characters may appear in this string:

          * `i`: The instantaneous (rate of change) value of the register
            should be displayed.

          * `c`: The accumulated (cumulative) value of the register should
          be displayed.

        Note that an empty string imples that the register is not
        displayed at all

        For the special keyword `.default`, this establishes how registers
        should be displayed that are not mentioned otherwise.
      type: string
    configDisplayScreenRegisters:
      description: The register screen configuration.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/configDisplayScreenRegistersName'
    configDisplayScreen:
      description: Screen configurations.
      example:
        use: ic
        gen: ic
        Grid: ic
        Solar: ic
        temp: i
        .default: ''
      type: object
      properties:
        registers:
          $ref: '#/components/schemas/configDisplayScreenRegisters'
    configDisplayOrientation:
      minimum: 0
      exclusiveMaximum: 360
      example: 90
      description: |
        The angle in degrees by which the orientation of the display
        should be rotated in the counterclockwise direction.  An angle of
        0 degree results in the display being aligned with the label on
        the meter.  The value of this resource is rounded to an integer
        multiple of 90 degrees.
      type: integer
    configDisplay:
      description: |
        The display (LCD) configuration of the meter.
      type: object
      properties:
        backlight:
          $ref: '#/components/schemas/configDisplayBacklight'
        contrast:
          $ref: '#/components/schemas/configDisplayContrast'
        fontset:
          $ref: '#/components/schemas/configDisplayFontset'
        screen:
          $ref: '#/components/schemas/configDisplayScreen'
        orientation:
          $ref: '#/components/schemas/configDisplayOrientation'
    configLanguageCode:
      example: en_GB
      description: |
        The code of the preferred language for the meter.  When the meter
        needs to generate a message (e.g., as a result of an alert
        triggering), it will generate the message in the language selected
        by this code whenever possible.  The code should be in a format
        acceptable to the
        [`setlocale()`](https://linux.die.net/man/3/setlocale) function.
        Language codes currently supported include:

          * `de`: German.

          * `en`: US English (defaults to 12-hour clock and imperial units).

          * `en_GB`: British English (defaults to 24-hour clock and metric units).

          * `es`: Spanish.

          * `fr`: French.

          * `he`: Hebrew.

          * `it`: Italian.

          * `ko`: Korean.

          * `pl`: Polish.

          * `zh_Hans`: Simplified Chinese (Mandarin).

          * `zh_Hant`: Traditional Chinese (Cantonese).

        See [eGauge Internationalization
        Instructions](https://www.egauge.net/i18n/) for information on
        adding other languages or improving an existing translation.

        **Note** When accessing the meter from a web browser, the value of
        this resource has normally no effect as the user interface is
        presented in the language selected by the browser.
      type: string
    configLocalSensorNameChannelBias:
      example: 0
      description: |
        The bias value (offset) to be added when converting an A/D
        converter sample to a physical quantity.
      type: number
    configLocalSensorNameChannelMode:
      enum:
        - 'off'
        - normal
        - integrate
      example: normal
      description: |
        The channel's acquisition mode.  Possible values are:

          * `integrate`: The sample values are integrated over time.

          * `normal`: The sensor is operating in normal mode.

          * `off`: The sensor is not in use.
      type: string
    configLocalSensorNameChannelScale:
      example: -206.66
      description: |
        The scale value by which an A/D converter sample is to be
        divided to convert a sample to a physical quantity (the bias
        value is added to the sample before the scale is applied).
      type: number
    configLocalSensorNameChannel:
      description: |
        The A/D converter channel configuration of the named sensor.
      type: object
      properties:
        bias:
          $ref: '#/components/schemas/configLocalSensorNameChannelBias'
        mode:
          $ref: '#/components/schemas/configLocalSensorNameChannelMode'
        scale:
          $ref: '#/components/schemas/configLocalSensorNameChannelScale'
    configLocalSensorNameError:
      example: 0
      description: |
        The attached sensor's relative output error (ratio error) in
        percent. For example, a value of 2.5 would indicate that the
        sensor is reading 2.5% higher than nominal. This value is ignored
        if member `model` is `CTid`.
      type: number
    configLocalSensorNameModel:
      example: ML-SCT-019-0100
      description: |
        The model name of the attached sensor. If this is `CTid`, a
        CTid®-enabled sensor is attached and the [/ctid](#tag/ctid)
        service should be used to obtain details about the attached
        sensor.
      type: string
    configLocalSensorNamePhase:
      example: 2.59@3:2.34@6:2.06@15:1.89@100
      description: |
        The phase (timing) adjustment required by the attached sensor.
        This value is ignored if member `model` is `CTid`.

        The format of this string is a colon-separated list of phase- and
        amplitude-level pairs of the form `p@l`, where `p` is the
        phase-adjustment in degrees at 60Hz, and `l` is a percentage of
        the sensor's full scale value.  For example, for a 100A current
        sensor, the phase string `1@1:0.75@50` would indicate that the
        phase needs to be adjusted by 1 degree at 1A and by 0.75 degrees
        at 50A.
      type: string
    configLocalSensorName:
      description: |
        The sensor configuration.
      type: object
      properties:
        channel:
          $ref: '#/components/schemas/configLocalSensorNameChannel'
        error:
          $ref: '#/components/schemas/configLocalSensorNameError'
        model:
          $ref: '#/components/schemas/configLocalSensorNameModel'
        phase:
          $ref: '#/components/schemas/configLocalSensorNamePhase'
    configLocalSensor:
      example:
        L1:
          channel:
            bias: 0
            mode: normal
            scale: -74.013999939
          error: 0
          model: '1:1'
          phase: ''
        S1:
          channel:
            bias: 0
            mode: normal
            scale: -206.659896851
          error: 0
          model: ML-SCT-019-0100
          phase: 2.96@1.5:2.59@3:2.34@6:2.06@15:1.82@50:1.89@100
        S2:
          channel:
            bias: 0
            mode: normal
            scale: -206.659896851
          error: 0
          model: ML-SCT-019-0100
          phase: 2.96@1.5:2.59@3:2.34@6:2.06@15:1.82@50:1.89@100
      description: |
        The sensor configurations.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/configLocalSensorName'
    configLocalGain:
      enum:
        - normal
        - high
      description: |
        The amplifier gain to use for the local sensor inputs (`S1` and
        up).  All meters support the value `normal`.  Model EG4*xxx* meters
        also support the value `high`. This gain increases the input gain
        to approximately ten times of the normal gain.  That is, the
        sensors are approximately 10 times more sensitive than normal, at
        the expense of having a 10 times smaller range.
      type: string
    configLocalUpdateInterval:
      example: 500
      description: |
        The interval in milliseconds between measurement updates.  The
        default is 1000ms (one update per second) but some meters support
        smaller values.  The rate of change values are averaged over this
        period of time.
      type: integer
    configLocal:
      description: |
        The configuration of directly attached sensors.
      type: object
      properties:
        sensor:
          $ref: '#/components/schemas/configLocalSensor'
        gain:
          $ref: '#/components/schemas/configLocalGain'
        update-interval:
          $ref: '#/components/schemas/configLocalUpdateInterval'
    configLocationLatitude:
      example: 36.035
      description: |
        The latitude of the meter's location in degrees.  Positive values
        are north of the equator, negative values south of it.
      type: number
    configLocationLongitude:
      example: -115.46639
      description: |
        The longitude of the meter's location in degrees.  Positive values
        are east of the prime meridian, negative values are west of it.
      type: number
    configLocation:
      description: |
        The geographic location of the meter.
      type: object
      properties:
        latitude:
          $ref: '#/components/schemas/configLocationLatitude'
        longitude:
          $ref: '#/components/schemas/configLocationLongitude'
    configLogSystemSize:
      example: 131072
      description: |
        The size of the system log buffer in bytes.  When writing this
        value, it is rounded up to the nearest kilobyte boundary.  A size
        of 0 disables the system log.  Otherwise, the size is rounded up
        to a minimum of 4KiB.
      type: integer
    configLogSystem:
      description: |
        The system log configuration.
      type: object
      properties:
        size:
          $ref: '#/components/schemas/configLogSystemSize'
    configLog:
      description: |
        The log configuration.
      type: object
      properties:
        system:
          $ref: '#/components/schemas/configLogSystem'
    configLuaScriptAlertd:
      example: print("this is the alert script");
      description: |
        The Lua script loaded by alert reporting daemon.  This script can
        be used to define helper functions that can then be called from
        the alert conditions.

        If loading this script takes longer than 15 seconds or evaluating
        any custom alert condition takes longer than 60 seconds, an alert
        is raised.
      type: string
    configLuaScriptTariff:
      example: print("this is the tariff script");
      description: |
        The Lua script used to calculate energy cost.  This script can be
        modified only if [server-storage](#tag/store) variable
        `global/billing/tariff_uri` is empty or unset.

        If loading this script takes longer than 15 seconds or evaluating
        the register formulas takes longer than half the
        [update-interval](#tag/configlocalupdate-interval), an alert is
        raised.
      type: string
    configLuaScriptTeamd:
      example: print("this is the formulas script");
      description: |
        The Lua script loaded by the register calculator.  This script can
        be used to define helper functions that can then be called from
        register formulas.

        If loading this script takes longer than 15 seconds or evaluating
        the register formulas takes longer than half the
        [update-interval](#tag/configlocalupdate-interval), an alert is
        raised.
      type: string
    configLuaScript:
      description: |
        Lua scripts.
      type: object
      properties:
        alertd:
          $ref: '#/components/schemas/configLuaScriptAlertd'
        tariff:
          $ref: '#/components/schemas/configLuaScriptTariff'
        teamd:
          $ref: '#/components/schemas/configLuaScriptTeamd'
    configLuaCtrldScript:
      example: print("this is control script test");
      description: |
        The control script.
      type: string
    configLuaCtrld:
      example:
        test: print("this is control script test");
      description: |
        The control scripts.  Control scripts generally run indefinitely.
        The more control scripts exist, the slower they will execute.  If
        a control script voluntarily terminates execution, it is restarted
        automatically after five seconds.  If a control script is updated,
        its execution is automatically restarted.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/configLuaCtrldScript'
    configLua:
      description: |
        Lua scripting configuration.
      type: object
      properties:
        script:
          $ref: '#/components/schemas/configLuaScript'
        ctrld:
          $ref: '#/components/schemas/configLuaCtrld'
    configModbusClientMapNameOptionOpt:
      example: 9600/8n1
      description: |
        The value of the Modbus map option.
      type: string
    configModbusClientMapNameOption:
      example:
        default-modbus-addr: '2'
        default-serial-params: 9600/8n1
      description: |
        A set of options.  The meter currently supports the following
        options:

          * `default-modbus-addr`: The Modbus unit-number to use by
          default.  This must be a decimal string.  For example: `"1"`.

          * `default-serial-params`: The default serial parameters to use
          when the remote device is connected via a serial port
          (Modbus/RTU).  This must be a string.  For example: `"9600/8n1"`
          for 9600 baud, 8 databits, no parity, 1 stop bit.

          * `default-tcp-port`: The default TCP port number to use when
          the remote device is connected via Modbus/TCP.  This must be a
          decimal string.  For example: `"6001"`.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/configModbusClientMapNameOptionOpt'
    configModbusClientMapNameRegItemName:
      example: irradiance
      description: |
        The name of the register.  The user can choose this name freely so
        long as each register within a map has a unique name.
      type: string
    configModbusClientMapNameRegItemAddr:
      minimum: 0
      maximum: 65535
      description: |
        The Modbus address of the register.
      type: integer
    configModbusClientMapNameRegItemType:
      example: u32
      enum:
        - bit
        - s16
        - u16
        - s32
        - u32
        - s32l
        - u32l
        - s64
        - u64
        - float16
        - float16l
        - float
        - floatl
        - double
      description: |
        The type of the register value.  This may be one of the following:

          * `bit`: One-bit value (a coil, in Modbus terminology).
          * `s16`: Signed 16-bit integer.
          * `u16`: Unsigned 16-bit integer.
          * `s32`: Signed 32-bit integer.
          * `u32`: Unsigned 32-bit integer.
          * `s32l`: Signed 32-bit integer, word-swapped.
          * `u32l`: Unsigned 32-bit integer, word-swapped.
          * `s64`: Signed 64-bit integer.
          * `u64`: Unsigned 64-bit integer.
          * `float16`: IEEE-754 half-precision float.
          * `float16l`: IEEE-754 half-precision floating point,
            little-endian (byte-swapped).
          * `float`: IEEE-754 single-precision float.
          * `floatl`: IEEE-754 single-precision float, word-swapped.
          * `double`: IEEE-754 double-precision float.
      type: string
    configModbusClientMapNameRegItemKind:
      enum:
        - analog
        - enum
        - bitset
      description: |
        The kind of the register. Possible values are:

          * `analog`: The value is continuous (the average of two values is
            meaningful).

          * `enum`: The value is discrete (the average of two values is not
            meaningful).  An example for this would be a numeric error code.

          * `bitset`: Each bit in the value is a discrete on/off value.
          An example for this would be a set of error flags.
      type: string
    configModbusClientMapNameRegItemUnit:
      example: W
      description: |
        For register of the `analog` kind, this defines the physical unit of
        the register value.  This must be one of the following:

          * `#3`: Unit-less number with 3 decimal digits of precision.
          * `%`: Percentage.
          * `A`: Electric current in amperes.
          * `Ah`: Electric charge in ampere-hours.
          * `As`: Electric charge in ampere-seconds.
          * `C`: Temperature in degree celsius.
          * `Degrees`: Angle in degrees.
          * `Hz`: Frequency in hertz.
          * `Ohm`: Resistance in ohm.
          * `Pa`: Pressure in pascals.
          * `Pct`: Percentage.
          * `RH`: Relative humidity.
          * `Tmd`: Time in days.
          * `Tmh`: Time in hours.
          * `Tms`: Time in seconds.
          * `VA`: Apparent power in volt-amperes.
          * `VAh`: Apparent energy in volt-ampere-hours.
          * `V`: Electric potential in volts.
          * `W/m2`: Irradiance in watts-per-square-meter.
          * `W/m^2`: Irradiance in watts-per-square-meter.
          * `W`: Power in watts.
          * `Wh`: Energy in watt-hours.
          * `degC`: Temperature in degree celsius.
          * `deg`: Angle in degrees.
          * `g`: Mass in grams.
          * `hPa`: Pressure in hecto-pascals.
          * `h`: Time in hours.
          * `kAh`: Electric charge in kilo-ampere-hours.
          * `kO`: Resistance in kilo-ohms.
          * `kPa`: Pressure in kilo-pascals.
          * `kVAh`: Apparent energy in kilo-volt-ampere-hours.
          * `kW`: Power in kilo-watts.
          * `kWh`: Energy in kilo-watt-hours.
          * `kg`: Mass in kilo-grams.
          * `kvarh`: Reactive energy in kilo-volt-ampere-hours.
          * `m/s`: Speed in meters-per-second.
          * `m3/s`: Volume flow in cubic-meters-per-second.
          * `m3`: Volume in cubic-meters.
          * `mA`: Electric current in milli-amperes.
          * `mAh`: Electric charge in milli-ampere-hours.
          * `mSecs`: Time in milli-seconds.
          * `mV`: Electric potential in milli-volts.
          * `mV`: Electric potential in milli-volts.
          * `m^3/s`: Volume flow in cubic-meters-per-second.
          * `m^3`: Volume in cubic-meters.
          * `meters`: Distance in meters.
          * `mm`: Distance in milli-meters.
          * `mps`: Speed in meters-per-second.
          * `ms`: Time in milli-seconds.
          * `ohms`: Resistance in ohm.
          * `ppm`: Parts-per-million.
          * `s`: Time in seconds.
          * `secs`: Time in seconds.
          * `var`: Reactive power in volt-ampere.
          * `varh`: Reactive energy in volt-ampere-hours.
          * `°C`: Temperature in degree celsius.
      type: string
    configModbusClientMapNameRegItemOffset:
      description: |
        An offset value that is used to convert the Modbus register value
        to a value in the specified physical unit.  Specifically, when the
        Modbus value of the register is *reg*, then corresponding physical
        value *phys* is calculated as:

          > *phys* = (*reg* + `offset`) * `scale`

        where `offset` is the value defined here and `scale` is
        the value defined for member `scale`.
      type: number
    configModbusClientMapNameRegItemScale:
      example: 0.1
      description: |
        A scale value that is used to convert the Modbus register value
        to a value in the specified physical unit.  Specifically, when the
        Modbus value of the register is *reg*, then corresponding physical
        value *phys* is calculated as:

          > *phys* = (*reg* + `offset`) * `scale`

        where `scale` is the value defined here and `offset` is
        the value defined for member `offset`.
      type: number
    configModbusClientMapNameRegItemAccess:
      enum:
        - ro
        - rw
      description: |
        The access-mode of the register.  It must be one of:
          * `ro`: read-only
          * `rw`: read-write
      type: string
    configModbusClientMapNameRegItem:
      description: |
        A Modbus register definition.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/configModbusClientMapNameRegItemName'
        addr:
          $ref: '#/components/schemas/configModbusClientMapNameRegItemAddr'
        type:
          $ref: '#/components/schemas/configModbusClientMapNameRegItemType'
        kind:
          $ref: '#/components/schemas/configModbusClientMapNameRegItemKind'
        unit:
          $ref: '#/components/schemas/configModbusClientMapNameRegItemUnit'
        offset:
          $ref: '#/components/schemas/configModbusClientMapNameRegItemOffset'
        scale:
          $ref: '#/components/schemas/configModbusClientMapNameRegItemScale'
        access:
          $ref: '#/components/schemas/configModbusClientMapNameRegItemAccess'
    configModbusClientMapNameReg:
      description: |
        A list of Modbus register definitions.
      type: array
      items:
        $ref: '#/components/schemas/configModbusClientMapNameRegItem'
    configModbusClientMapName:
      example:
        option:
          default-modbus-addr: '2'
          default-serial-params: 9600/8n1
        reg:
          - name: irradiance
            addr: 0
            type: u32
            kind: analog
            unit: W
            offset: 0
            scale: 0.1
            access: ro
          - name: temp
            addr: 1
            type: s32
            kind: analog
            unit: degC
            offset: 0
            scale: 0.01
            access: ro
      description: |
        Modbus map consisting of a list of register definitions and a set
        of options.
      type: object
      properties:
        option:
          $ref: '#/components/schemas/configModbusClientMapNameOption'
        reg:
          $ref: '#/components/schemas/configModbusClientMapNameReg'
    configModbusClientMap:
      example:
        user_dev:
          option:
            default-modbus-addr: '2'
            default-serial-params: 9600/8n1
          reg:
            - name: irradiance
              addr: 0
              type: u32
              kind: analog
              unit: W
              offset: 0
              scale: 0.1
              access: ro
            - name: temp
              addr: 1
              type: s32
              kind: analog
              unit: degC
              offset: 0
              scale: 0.01
              access: ro
      description: |
        User-defined Modbus address maps.  The builtin, read-only system
        maps are available at
        [/sys/modbus/client/map](#tag/sysmodbusclientmap).  If a
        user-defined map with the same name as a system map exists, it
        will shadow (mask) the system map with them same name.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/configModbusClientMapName'
    configModbusClient:
      description: |
        Modbus client configuration.  This is used by the meter to
        communicate with other Modbus devices.
      type: object
      properties:
        map:
          $ref: '#/components/schemas/configModbusClientMap'
    configModbusServerEnableItem:
      enum:
        - rtu
        - tcp
      description: |
        The name of a protocol that is enabled.
      type: string
    configModbusServerEnable:
      description: |
        The list of protocols (if any) that are enabled in the Modbus
        server. An empty list indicates that the Modbus server is
        disabled.

        Valid protocol names are:

          * `rtu`: The
            [Modbus/RTU](https://modbus.org/docs/Modbus_over_serial_line_V1_02.pdf)
            protocol.

          * `tcp`: The
            [Modbus/TCP](https://modbus.org/docs/Modbus_Messaging_Implementation_Guide_V1_0b.pdf)
            protocol.
      type: array
      items:
        $ref: '#/components/schemas/configModbusServerEnableItem'
    configModbusServerId:
      minimum: 1
      maximum: 247
      description: |
        The address of the meter on the Modbus/RTU network. Every Modbus
        device must have a unique address. The default unit id is 1.

        **Note** Address 0 is the broadcast address and addresses 248..255
        are reserved for future use.
      type: integer
    configModbusServerRtuPort:
      example: USB2:9600/8o2
      description: |
        The [serial-port](#tag/Glossary/Serial-Ports) to use for the RTU
        protocol.
      type: string
    configModbusServerRtu:
      description: |
        The RTU protocol configuration.
      type: object
      properties:
        port:
          $ref: '#/components/schemas/configModbusServerRtuPort'
    configModbusServerTcpPort:
      minimum: 0
      maximum: 65535
      example: 502
      description: |
        The IP port of the Modbus server.  The default value is 502.
      type: integer
    configModbusServerTcp:
      description: |
        The TCP protocol configuration.
      type: object
      properties:
        port:
          $ref: '#/components/schemas/configModbusServerTcpPort'
    configModbusServer:
      description: |
        Modbus server configuration.  This configures the server-side of
        the meter.  That is, it defines how the meter provides its own
        data to other Modbus devices.
      type: object
      properties:
        enable:
          $ref: '#/components/schemas/configModbusServerEnable'
        id:
          $ref: '#/components/schemas/configModbusServerId'
        rtu:
          $ref: '#/components/schemas/configModbusServerRtu'
        tcp:
          $ref: '#/components/schemas/configModbusServerTcp'
    configModbus:
      description: |
        [Modbus](https://www.modbus.org/)-related configurations.
      type: object
      properties:
        client:
          $ref: '#/components/schemas/configModbusClient'
        server:
          $ref: '#/components/schemas/configModbusServer'
    configNetEthernetWatchdog:
      example: true
      description: |
        Whether or not the Ethernet watchdog is enabled.  If enabled, the
        watchdog will reset the Ethernet's PHY chip and/or reload the
        Ethernet driver if it appears that the Ethernet link was lost.

        This should normally be set to `true`.
      type: boolean
    configNetEthernet:
      description: |
        The Ethernet configuration of the meter.
      type: object
      properties:
        watchdog:
          $ref: '#/components/schemas/configNetEthernetWatchdog'
    configNetGoproxyEnable:
      description: |
        If `true`, the meter will connect to the Go proxy server.
      type: boolean
    configNetGoproxyServer:
      example: proxy.egauge.io
      description: |
        The hostname of the Go proxy server.
      type: string
    configNetGoproxy:
      description: |
        The Go proxy configuration of the meter.
      type: object
      properties:
        enable:
          $ref: '#/components/schemas/configNetGoproxyEnable'
        server:
          $ref: '#/components/schemas/configNetGoproxyServer'
    configNetHomeplugRegion:
      enum:
        - CE
        - NA
      description: |
        The jurisdiction the meter is operating under.  The possible values are:

          * `CE`: European Union region.
          * `NA`: North American region.

        This resource controls the frequency bands used by the HomePlug
        communications interface that is built into some meters.  For
        those meters, this resource must be set to the correct geographic
        region to ensure compliance with local laws.
      type: string
    configNetHomeplug:
      description: |
        HomePlug configuration.  This is used only by devices with
        built-in HomePlug power-line communication (egauge2, EG3*x*10 and
        EG41*xx*).
      type: object
      properties:
        region:
          $ref: '#/components/schemas/configNetHomeplugRegion'
    configNetHostname:
      example: eGauge42
      description: |
        The hostname of the meter.  Must consist of ASCII letters, digits,
        and dashes only.
      type: string
    configNetHttpClientInsecure:
      example: false
      description: |
        If `true`, meter-initiated secure HTTPS connections will accept
        servers whose certificate cannot be validated by the meter.  This
        should normally be set to `false`.
      type: boolean
    configNetHttpClient:
      description: |
        Configuration for meter-initiated HTTP connections.
      type: object
      properties:
        insecure:
          $ref: '#/components/schemas/configNetHttpClientInsecure'
    configNetHttpCertificate:
      description: |
        The certificate used by the web server to identify itself over
        HTTPS connections.

        This resource is write-only.

        The string is in [PEM
        format](https://en.wikipedia.org/wiki/X.509#Certificate_filename_extensions)
        and must contain both a private key as well as the matching
        certificate chain.
      type: string
    configNetHttpCgiBin:
      enum:
        - disable
        - user-optional
        - user-required
      description: |
        Controls access to CGI-BIN programs.  The following values are supported:

          * `disable`: Completely disable access to CGI-BIN programs.
          **Warning** This will render the classic user-interface of the
          meter inoperable.

          * `user-required`: Allow authenticated users to access CGI-BIN programs.

          * `user-optional`: Allow even unauthenticated users to access
            CGI-BIN programs that are not considered security critical.
      type: string
    configNetHttp:
      example:
        cgi-bin: user-required
        client:
          insecure: 'false'
      description: |
        Web (HTTP) related configurations.

        Modification requests (`PUT`, `POST`, and `DELETE`) to this
        resource are not executed
        [transactionally](#tag/Glossary/Non-Transactional-Updates).
      type: object
      properties:
        client:
          $ref: '#/components/schemas/configNetHttpClient'
        certificate:
          $ref: '#/components/schemas/configNetHttpCertificate'
        cgi-bin:
          $ref: '#/components/schemas/configNetHttpCgiBin'
    configNetIpv4Dhcp:
      description: |
        Whether or not to use [DHCP](https://www.ietf.org/rfc/rfc2131.txt)
        to automatically provision the IPv4 address.  If `true`, DHCP is
        enabled. If `false`, the manually configured IPv4 settings are
        used.
      type: boolean
    configNetIpv4Address:
      example: 192.168.1.42
      description: |
        An IPv4 address in dotted decimal notation.
      type: string
    configNetIpv4Broadcast:
      example: 192.168.1.255
      description: |
        An IPv4 broadcast address in dotted decimal notation.
      type: string
    configNetIpv4Netmask:
      example: 255.255.255.0
      description: |
        The address of the IPv4 gateway in dotted decimal notation.
      type: string
    configNetIpv4Network:
      example: 192.168.1.0
      description: |
        The IPv4 network mask in dotted decimal notation.
      type: string
    configNetIpv4Gateway:
      example: 192.168.1.1
      description: |
        The IPv4 network number in dotted decimal notation.
      type: string
    configNetIpv4:
      description: |
        The Internet Protocol v4 ([IPv4](https://www.rfc-editor.org/rfc/rfc791))
        configuration.
      type: object
      properties:
        dhcp:
          $ref: '#/components/schemas/configNetIpv4Dhcp'
        address:
          $ref: '#/components/schemas/configNetIpv4Address'
        broadcast:
          $ref: '#/components/schemas/configNetIpv4Broadcast'
        netmask:
          $ref: '#/components/schemas/configNetIpv4Netmask'
        network:
          $ref: '#/components/schemas/configNetIpv4Network'
        gateway:
          $ref: '#/components/schemas/configNetIpv4Gateway'
    configNetNameserverServerItem:
      example: 1.1.1.1
      description: |
        The IPv4 or IPv6 address a DNS server.
      type: string
    configNetNameserverServer:
      example:
        - 1.1.1.1
        - 8.8.8.8
        - 2606:4700:4700::1111
      description: |
        The IP addresses to use as name servers. If multiple name servers
        are specified, they are queried in the order in which they appear
        here.
      type: array
      items:
        $ref: '#/components/schemas/configNetNameserverServerItem'
    configNetNameserver:
      description: |
        The name server ([DNS](https://www.ietf.org/rfc/rfc1035.txt))
        configuration.
      type: object
      properties:
        server:
          $ref: '#/components/schemas/configNetNameserverServer'
    configNetNtpServerItem:
      example: north-america.pool.ntp.org
      description: |
        The hostname or an IPv4 or IPv6 address of an NTP server.
      type: string
    configNetNtpServer:
      example:
        - 192.168.1.1
        - north-america.pool.ntp.org
        - 2610:20:6f15:15::27
      description: |
        The NTP servers to use.
      type: array
      items:
        $ref: '#/components/schemas/configNetNtpServerItem'
    configNetNtp:
      description: |
        The Network Time Protocol
        ([NTP](https://www.rfc-editor.org/rfc/rfc5905)) configuration.
      type: object
      properties:
        server:
          $ref: '#/components/schemas/configNetNtpServer'
    configNetProxyEnable:
      description: |
        If `true`, the meter will connect to the proxy server.
      type: boolean
    configNetProxyServer:
      example: d.egauge.net
      description: |
        The hostname of the proxy server.
      type: string
    configNetProxy:
      description: |
        The proxy configuration of the meter.
      type: object
      properties:
        enable:
          $ref: '#/components/schemas/configNetProxyEnable'
        server:
          $ref: '#/components/schemas/configNetProxyServer'
    configNetPtpClientOnly:
      description: |
        If `true`, the meter will only act as a client.  Otherwise, the
        meter will also act as a server if the PTP algorithm selects it as
        the best clock.
      type: boolean
    configNetPtpInterfaceIfTransport:
      enum:
        - L2
        - UDPv4
        - UDPv6
      description: |
        The network transport to use for the interface. Possible values are:

          * `UDPv4`: UDP over IPv4.
          * `UDPv6`: UDP over IPv6.
          * `L2`: Layer-2 transport (e.g., Ethernet).
      type: string
    configNetPtpInterfaceIf:
      description: |
        The configuration to use for the named interface.
      type: object
      properties:
        transport:
          $ref: '#/components/schemas/configNetPtpInterfaceIfTransport'
    configNetPtpInterface:
      example:
        eth0:
          transport: UDPv4
      description: |
        The network interface configurations for PTP. If empty, PTP is disabled.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/configNetPtpInterfaceIf'
    configNetPtp:
      description: |
        The Precision Time Protocol
        ([PTP](https://www.rfc-editor.org/rfc/rfc8173.html))
        configuration.
      type: object
      properties:
        client_only:
          $ref: '#/components/schemas/configNetPtpClientOnly'
        interface:
          $ref: '#/components/schemas/configNetPtpInterface'
    configNet:
      description: |
        The network configuration.

        The current state of the network is available at
        [/sys/net](#tag/sysnet).
      type: object
      properties:
        ethernet:
          $ref: '#/components/schemas/configNetEthernet'
        goproxy:
          $ref: '#/components/schemas/configNetGoproxy'
        homeplug:
          $ref: '#/components/schemas/configNetHomeplug'
        hostname:
          $ref: '#/components/schemas/configNetHostname'
        http:
          $ref: '#/components/schemas/configNetHttp'
        ipv4:
          $ref: '#/components/schemas/configNetIpv4'
        nameserver:
          $ref: '#/components/schemas/configNetNameserver'
        ntp:
          $ref: '#/components/schemas/configNetNtp'
        proxy:
          $ref: '#/components/schemas/configNetProxy'
        ptp:
          $ref: '#/components/schemas/configNetPtp'
    configPushInterval:
      example: 60
      minimum: 1
      description: |
        The interval in seconds between push updates.  A value of 60, for
        example, would cause the push service to attempt to send data to
        the remote web server once a minute.
      type: integer
    configPushOptions:
      example: json,gzip,epoch,sec,skip=59
      description: |
        The options controlling how data is pushed to the remote web
        server.  Multiple options must be separated by commas (`,`).

        This resource is available only if
        [/config/push/service](#tag/configpushservice) is an empty string.

        Available options are:

          * `day`: Data will be pushed with day granularity (at most one
            row of data per day).

          * `deflate`: Use the deflate algorithm to compress the push
            data.  This adds HTTP header `Content-Encoding: deflate` to
            the `POST` request.

          * `epoch`: Report the register values relative to the
            [epoch](#tag/configdbepoch).  Without this option, absolute
            values are sent which start at zero at the time the meter
            database was created.

          * `gzip`: Use the gzip algorithm to compress the push data.
            This adds HTTP header `Content-Encoding: gzip` to the `POST`
            request.

          * `json`: Push data in JSON format instead of XML.  The JSON
            format is the same as the one returned by the
            [/register](#tag/register) service, except that the top-level
            `ts` section and the `idx` members in the `registers` section
            are omitted since they are not meaningful for push data.

          * `hour`: Data will be pushed with hour granularity (at most one
            row of data per hour).

          * `max=n`: Pushed at most `n` rows in a single `POST` request.
            This limit must be in the range from 1 to 900.

          * `old_first`: Push the oldest data row first.  By default, the
            youngest data row is pushed first.

          * `sec`: Data will be pushed with second granularity (at most
            one row of data per second).

          * `secure`: If this option is present, secure connections to the
            remote web server are allowed only if the server possesses a
            certificate that the meter can verify as authentic.  Without
            this option, the server's certificate is not verified.  This
            option is ignored if
            [/config/net/http/client/insecure](#tag/confignethttpclientinsecure)
            is `true`.

          * `skip=n`: Push only every `(n+1)`-th data row.  For example,
            with hour granularity and skip=2, data rows would be spaced
            apart by (at least) 3 hours.  They may be spaced apart more
            depending on the rows that are available in the database.

          * `totals`: Push not just the physical registers but also the
            virtual registers.

        By default, data is pushed with minute granularity (at most one
        row of data per minute).
      type: string
    configPushPassword:
      example: secret!
      description: |
        The password to be provided to the remote web server for
        authentication purposes.  The password is submitted to the remote
        web server as part of a
        [Basic](https://www.rfc-editor.org/rfc/rfc7617) HTTP
        `Authorization` header.  For this reason, a password should only
        be specified when using a secure connection (`https` scheme).

        This resource is available only if
        [/config/push/web/service](#tag/configpushservice) is an empty
        string.

        This resource is write-only.
      type: string
    configPushService:
      description: |
        The name of a push service provider to shared data with.  After
        writing this resource with a non-empty string, the service needs
        to be activated in a separate step.

        **TODO**: SHOW HOW TO DO THIS.
      type: string
    configPushUri:
      example: https://push-service.com/data
      description: |
        The URI of the web server to share data with.  This resource is
        available only if [/config/push/service](#tag/configpushservice)
        is an empty string.
      type: string
    configPushUser:
      example: jsmith
      description: |
        The user name to provide to the web server for authentication
        purposes.  If this string is not empty, the user name and the
        password are both sent to the web server as part of a
        [Basic](https://www.rfc-editor.org/rfc/rfc7617) HTTP
        `Authorization` header.

        This resource is available only if
        [/config/push/web/service](#tag/configpushservice) is an empty
        string.
      type: string
    configPush:
      example:
        interval: 60
        options: json,gzip,epoch,sec,skip=59
        service: ''
        uri: https://push-service.com/data
        user: jsmith
      description: |
        The push service configuration.  This service is used to share the
        meter data with a remote web server.  The data is sent via an HTTP
        `POST` request.
      type: object
      properties:
        interval:
          $ref: '#/components/schemas/configPushInterval'
        options:
          $ref: '#/components/schemas/configPushOptions'
        password:
          $ref: '#/components/schemas/configPushPassword'
        service:
          $ref: '#/components/schemas/configPushService'
        uri:
          $ref: '#/components/schemas/configPushUri'
        user:
          $ref: '#/components/schemas/configPushUser'
    configRegisterPhysicalRegDev:
      example: local
      description: |
        The name of the device that is the source of the register values.
        The name `local` indicates that the meter itself measures or
        calculates the value.  Any other value is a reference to the
        remote device of the same name defined at
        [/config/remote](#tag/configremote).
      type: string
    configRegisterPhysicalRegDid:
      minimum: 0
      description: |
        The column number in which the database stores the register value.
        Each physical register has a unique column number.  If a register
        is renamed, this number remains the same.  On the other hand, if a
        register is deleted and then another one is added back, the new
        one may get assigned the column number of the old, deleted
        register.

        Each physical register must have a unique value.  Invalid values
        automatically get remapped to an unused index.
      type: integer
    configRegisterPhysicalRegType:
      example: P
      description: |
        The [type code](#tag/Glossary/Type-Codes) of the register.
      type: string
    configRegisterPhysicalRegValue:
      example: S16*L1+S17*L2
      description: |
        Defines the how the register value is obtained or calculated.  For
        register where `dev` is `local`, this is one of:

          * A [local](#tag/local) sensor name: `L1`-`L3`, `Ldc`, or
            `S1`-`S30`.

          * A power formula written as a sum of products of sensors.  For
            example, `S1*L1+S2*L2` would indicate that the register value
            is calculated as the real power measured by current sensor
            `S1` and line-voltage `L1` plus the real power measured by
            current sensor `S2` and line-voltage `L2`.  Note that even
            though the real power calculation is indicated by an asterisk,
            it is actually calculated by averaging the product of the
            instantaneous current and voltage samples, not by multiplying
            the RMS voltages of `S1` and `L1`.  The first factor of each
            real power calculation may also be negated.  For example,
            `-S1*L2` would yield the negative of the real power calculated
            by `S1*L2`.

          * An equal sign (`=`) followed by an
            [eScript](#tag/Glossary/eScript) expression.  The register
            value is obtained by evaluating the eScript expression once
            per [update interval](#tag/configlocalupdate-interval).
            Non-finite numbers (e.g., not-a-number, or infinities) are
            silently converted to 0 before recording the register value.

        For registers where `dev` is not `local`, so-called _remote_
        registers, the value is interpreted in a way that is specific to
        the particular remote device in use.  Commonly, the value is some
        sort of register name or identifier.  For example, for Modbus
        remote devices, the value is a register name defined by the
        [Modbus map](#tag/sysmodbusclientmap) of the remote device.
      type: string
    configRegisterPhysicalReg:
      description: |
        The configuration of the named physical register.
      type: object
      properties:
        dev:
          $ref: '#/components/schemas/configRegisterPhysicalRegDev'
        did:
          $ref: '#/components/schemas/configRegisterPhysicalRegDid'
        type:
          $ref: '#/components/schemas/configRegisterPhysicalRegType'
        value:
          $ref: '#/components/schemas/configRegisterPhysicalRegValue'
    configRegisterPhysical:
      description: |
        The physical register configuration of the meter.
      example:
        grid:
          dev: local
          did: 0
          type: P
          value: S16*L1+S17*L2
        grid*:
          dev: local
          did: 8
          type: S
          value: grid
        solar:
          dev: local
          did: 1
          type: P
          value: S3*L1+-S3*L2
        temp:
          dev: SMANet
          did: 12
          type: T
          value: 13590.TmpAmb_C
      type: object
      additionalProperties:
        $ref: '#/components/schemas/configRegisterPhysicalReg'
    configRegisterVirtualRegValueItemOp:
      enum:
        - +
        - '-'
        - +max0
        - '-max0'
        - +min0
        - '-min0'
      example: +
      description: |
        The operation that calculates the value of this addend.

        Possible values are:

          * `+`: The physical register value is to be added.

          * `-`: The physical register value is to be subtracted.

          * `+max0`, `-max0`, `+min0`, `-min0`:
          **[Deprecated](#tag/Glossary/Deprecated)**. These operators do
          not work correctly and remain only to preserve compatibility
          with existing, old, device configurations.  Attempting to write
          these operators with a `PUT` or `POST` request will result in an
          error.  They can only be returned as a result of a `GET` request.
          The intent of these operators was to add (`+max0`, `+min0`) or
          subtract (`-max0`, `-min0`) the maximum of the physical register
          value and 0 (`+max0`, `-max0`) or the minimum of the register value
          and 0 (`+min0`, `-min0`).
      type: string
    configRegisterVirtualRegValueItemRegister:
      example: grid
      description: |
        The name of the physical register to use in calculating the value
        of this addend.
      type: string
    configRegisterVirtualRegValueItem:
      description: |
        An additive term of the virtual register formula.
      type: object
      properties:
        op:
          $ref: '#/components/schemas/configRegisterVirtualRegValueItemOp'
        register:
          $ref: '#/components/schemas/configRegisterVirtualRegValueItemRegister'
    configRegisterVirtualRegValue:
      example:
        - op: +
          register: grid
        - op: +
          register: solar
      description: |
        The formula to calculate the value of this virtual register.  It
        consists of a list of physical register names whose values are to
        be added or subtracted.
      type: array
      items:
        $ref: '#/components/schemas/configRegisterVirtualRegValueItem'
    configRegisterVirtualReg:
      description: |
        The virtual register configuration.

        Several virtual register names are well-known and provide special
        semantics:

          * `use`: Intended to represent total power consumption at a
            site.  It is generally presented with the name `Usage` in
            English and the equivalent translation in other languages
            (subject to availablility).

          * `gen`: Intended to represent total power generation at a site,
            e.g., from local solar or wind power generation facilities.
            It is generally presented with the name `Generation` in
            English and the equivalent translation in other languages
            (subject to availability).

          * `bat`: Intended to represent total power coming from on-site
            batteries (if positive) or power going to on-site batteries
            for charging (if negative).  It is generally presented with
            the name `Battery` in English and the equivalent translation
            in other languages (subject to availability).

          * `bat_el`: Intended to represent the amount of _energy left_ in
            on-site batteries.  The value of this register should be equal
            to the sum of each battery's state of charge times the
            battery's capacity (in joules).  It is generally presented
            with the name `Battery left` in English and the equivalent
            translation in other languages (subject to availability).
      type: object
      properties:
        value:
          $ref: '#/components/schemas/configRegisterVirtualRegValue'
    configRegisterVirtual:
      example:
        use:
          value:
            - op: +
              register: grid
            - op: +
              register: solar
        gen:
          value:
            - op: +
              register: solar
      description: |
        The virtual register configuration of the meter.

        Virtual registers are calculated from physical register values and
        do not take up space in the database.  As such there is no a
        priori limit on the number of virtual registers that can be
        configured on a meter.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/configRegisterVirtualReg'
    configRegister:
      description: |
        The register configuration of the meter.
      type: object
      properties:
        physical:
          $ref: '#/components/schemas/configRegisterPhysical'
        virtual:
          $ref: '#/components/schemas/configRegisterVirtual'
    configTimeZone:
      example: LST7LDT6,M3.2.0/02:00,M11.1.0/02:00
      description: |
        The timezone the meter is located in.  The string is interpreted
        as a [Unix
        TZ](https://www.gnu.org/software/libc/manual/html_node/TZ-Variable.html)
        string.
      type: string
    configTime:
      description: |
        Time related configurations.
      type: object
      properties:
        zone:
          $ref: '#/components/schemas/configTimeZone'
    configUserNamePrivItem:
      description: |
        A [privilege](#tag/Glossary/User-Privileges) the user possesses.
      type: string
    configUserNamePriv:
      example:
        - unlimited_save
        - view_settings
      description: |
        The list of [privileges](#tag/Glossary/User-Privileges) the user possesses.
      type: array
      items:
        $ref: '#/components/schemas/configUserNamePrivItem'
    configUserNameHash:
      example: 251910de04f5eab86859939167d4fded
      description: |
        The [hash](#tag/Glossary/Password-Hashes) of the user's password.
        Writing an empty hash string disables the account.

        This resource is write-only.
      type: string
    configUserName:
      example: jsmith
      description: |
        A user configuration (account).
      type: object
      properties:
        priv:
          $ref: '#/components/schemas/configUserNamePriv'
        hash:
          $ref: '#/components/schemas/configUserNameHash'
    configUser:
      example:
        jsmith:
          priv:
            - unlimited_save
            - view_settings
        guest:
          priv:
            - view_settings
      description: |
        The user accounts.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/configUserName'
    configAlertCustomItemName:
      example: temperature alert
      description: |
        The user-selected name of this custom alert.
      type: string
    configAlertCustomItemDetail:
      example: 'It is hot in here: %l C!'
      description: |
        Alert detail message.  This may be up to 255 bytes in length.
        The following sequences within this string get replaced as
        follows:

          * `%%` is replaced by a single percent character.
          * `%l` is replaced by the value of the `lhs` expression.
          * `%r` is replaced by the value of the `rhs` expression.
          * `%L` is replaced by the `lhs` expression string.
          * `%R` is replaced by the `rhs` expression string.
      type: string
    configAlertCustomItemFrequency:
      enum:
        - sec
        - min
        - hr
        - dy
        - wk
        - mon
        - an
      description: |
        The frequency with which this custom alert should be checked.
        Possible values are:

          * `sec`: The alert will be checked once a second.
          * `min`: The alert will be checked once a minute.
          * `hr`: The alert will be checked once an hour.
          * `dy`: The alert will be checked once a day.
          * `wk`: The alert will be checked once a week.
          * `mon`: The alert will be checked once a month.
          * `an`: The alert will be checked once a year.
      type: string
    configAlertCustomItemPriority:
      minimum: 0
      maximum: 7
      description: |
        The priority of this custom alert.  Zero is the lowest, seven the
        highest priority.
      type: integer
    configAlertCustomItemCondLhs:
      example: temp_internal()
      description: |
        An [eScript](#tag/Glossary/eScript) expression that returns the
        value to use on the left hand side of the comparison.
      type: string
    configAlertCustomItemCondOp:
      enum:
        - <
        - <=
        - '=='
        - '!='
        - '>='
        - '>'
      description: |
        The comparison-operator to use for comparing the left-hand-side
        expression `lhs` against the right-hand side expression `rhs`.  It
        may be one of:

          * `<`: Condition is true if `lhs` is less than `rhs`.
          * `<=`: Condition is true if `lhs` is less-than-or-equal to `rhs`.
          * `==`: Condition is true if `lhs` is equal to `rhs`.
          * `!=`: Condition is true if `lhs` differs from `rhs`.
          * `>=`: Condition is true if `lhs` is greater-than-or-equal to `rhs`.
          * `>`: Condition is true if `lhs` is greater than `rhs`.
      type: string
    configAlertCustomItemCondRhs:
      example: '30'
      description: |
        An [eScript](#tag/Glossary/eScript) expression that returns the
        value that to use on the right hand side of the comparison.
      type: string
    configAlertCustomItemCond:
      description: |
        The boolean condition consists of three parts: `lhs op rhs`. `lhs`
        and `rhs` are arbitrary expressions and `op` must be a comparison
        operator.
      type: object
      properties:
        lhs:
          $ref: '#/components/schemas/configAlertCustomItemCondLhs'
        op:
          $ref: '#/components/schemas/configAlertCustomItemCondOp'
        rhs:
          $ref: '#/components/schemas/configAlertCustomItemCondRhs'
    configAlertCustomItem:
      description: |
        The custom alert.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/configAlertCustomItemName'
        detail:
          $ref: '#/components/schemas/configAlertCustomItemDetail'
        frequency:
          $ref: '#/components/schemas/configAlertCustomItemFrequency'
        priority:
          $ref: '#/components/schemas/configAlertCustomItemPriority'
        cond:
          $ref: '#/components/schemas/configAlertCustomItemCond'
    configAlertCustom:
      description: |
        Up to 32 custom alerts.

        Custom alerts consist of an arbitrary boolean condition that is
        checked at certain times.  When the condition evaluates to true,
        the alert is triggered.
      type: array
      items:
        $ref: '#/components/schemas/configAlertCustomItem'
    configAlertReporterWebMinPriority:
      minimum: 0
      maximum: 7
      description: |
        The minimum priority that is required for a new alert to generate
        a report to the web server.  When a report is generated, all other
        unacknowledged alerts are also reported, even if they have a
        priority lower than the value indicated by this resource.
      type: integer
    configAlertReporterWebService:
      example: ''
      description: |
        The name of the alert service provider to use for reporting
        alerts.  After writing this resource with a non-empty string, the
        service needs to be activated in a separate step.

        **TODO**: SHOW HOW TO DO THIS.
      type: string
    configAlertReporterWebUri:
      example: https://alerts.com/report
      description: |
        The URI of the web server to use for reporting alerts.

        This resource is available only if
        [/config/alert/reporter/web/service](#tag/configalertreporterwebservice)
        is an empty string.
      type: string
    configAlertReporterWebOptions:
      example: gzip,secure
      description: |
        The options to use when sending an alert report to the web server.

        This resource is available only if
        [/config/alert/reporter/web/service](#tag/configalertreporterwebservice)
        is an empty string.

        Multiple options can be specified in the string by separating them
        with a comma.  Supported options are:

          * `deflate`: Use HTTP Content-Encoding `deflate` when
            transmitting the alert report.

          * `gzip`: Use HTTP Content-Encoding `gzip` when
            transmitting the alert report.

          * `secure`: Only send the alert report if the server's HTTP
            certificate can be verified by the meter.  This option is
            ignored if
            [/config/net/http/client/insecure](#tag/confignethttpclientinsecure)
            is `true`.
      type: string
    configAlertReporterWebUser:
      example: jsmith
      description: |
        The user name to provide to the web server for authentication
        purposes.  If this string is not empty, the user name and the
        password are both sent to the web server using HTTP Basic
        authorization.  For security reasons, this should only be used
        when connecting to the server via an encrypted connection (https).

        This resource is available only if
        [/config/alert/reporter/web/service](#tag/configalertreporterwebservice)
        is an empty string.
      type: string
    configAlertReporterWebPassword:
      example: secret!
      description: |
        The password to be provided to the web server for authentication
        purposes.

        This resource is write-only
      type: string
    configAlertReporterWeb:
      description: |
        The configuration for reporting alerts via web server.
      type: object
      properties:
        min-priority:
          $ref: '#/components/schemas/configAlertReporterWebMinPriority'
        service:
          $ref: '#/components/schemas/configAlertReporterWebService'
        uri:
          $ref: '#/components/schemas/configAlertReporterWebUri'
        options:
          $ref: '#/components/schemas/configAlertReporterWebOptions'
        user:
          $ref: '#/components/schemas/configAlertReporterWebUser'
        password:
          $ref: '#/components/schemas/configAlertReporterWebPassword'
    configAlertReporterMailServer:
      example: smtp.mail.com
      description: |
        The hostname of a mail server that speaks the
        [SMPT](https://www.rfc-editor.org/rfc/rfc821) protocol.  If this
        is set to an empty string, the meter will attempt to deliver mail
        directly to the destination host.  Many Internet service providers
        block direct mail delivery, so leaving this string empty generally
        results in alert emails getting blocked.
      type: string
    configAlertReporterMailUser:
      example: egaugealert@mail.com
      description: |
        The user name to provide to the email server for authentication
        purposes.
      type: string
    configAlertReporterMailPassword:
      description: |
        The password to provide to the email server for authentication
        purposes.

        This resource is write-only.
      type: string
    configAlertReporterMailFromAddress:
      example: eGauge1345
      description: |
        The "From" email address to use when sending an email alert.  If
        set to an empty string, the email server will use a default
        address.
      type: string
    configAlertReporterMailToItemFormat:
      description: |
        The reporting format to use for this destination.  Valid values
        are:

          * `short`: Report only the newest alert with the highest
            priority.

          * `full`: Report all unacknowledged alerts that are pending in
            order from highest to lowest priority.
      type: string
    configAlertReporterMailToItemMinPriority:
      minimum: 0
      maximum: 7
      example: 3
      description: |
        The minimum priority that is required for a new alert to generate
        an email.  When an email is generated, other lower priority alerts
        may also be included if they are unacknowledged and the reporting
        format allows it.
      type: integer
    configAlertReporterMailToItemAddress:
      example: user@site.com
      description: |
        The destination email address to send the alert to.
      type: string
    configAlertReporterMailToItem:
      description: |
        An email destination to send the alerts to.
      type: object
      properties:
        format:
          $ref: '#/components/schemas/configAlertReporterMailToItemFormat'
        min-priority:
          $ref: '#/components/schemas/configAlertReporterMailToItemMinPriority'
        address:
          $ref: '#/components/schemas/configAlertReporterMailToItemAddress'
    configAlertReporterMailTo:
      description: |
        The email destinations to send the alerts to.
      type: array
      items:
        $ref: '#/components/schemas/configAlertReporterMailToItem'
    configAlertReporterMail:
      description: |
        The configuration for reporting alerts via email server.  If alert
        reporting via web server is enabled
        ([/config/alert/reporter/web/uri](#tag/configalertreporterweburi)
        is not empty), reporting via email server is disabled.
      type: object
      properties:
        server:
          $ref: '#/components/schemas/configAlertReporterMailServer'
        user:
          $ref: '#/components/schemas/configAlertReporterMailUser'
        password:
          $ref: '#/components/schemas/configAlertReporterMailPassword'
        from-address:
          $ref: '#/components/schemas/configAlertReporterMailFromAddress'
        to:
          $ref: '#/components/schemas/configAlertReporterMailTo'
    configAlertReporter:
      description: |
        The alert reporting configuration.  Alerts may be reported via a
        web server or via an email server.
      type: object
      properties:
        web:
          $ref: '#/components/schemas/configAlertReporterWeb'
        mail:
          $ref: '#/components/schemas/configAlertReporterMail'
    configAlertSysPrioItem:
      minimum: 0
      maximum: 7
      description: |
        The priority of this system alert.
      type: integer
    configAlertSysPrio:
      example:
        - 0
        - 0
        - 7
        - 0
        - 7
        - 4
        - 0
        - 0
        - 1
        - 6
        - 0
        - 0
        - 0
        - 5
        - 0
        - 0
        - 0
        - 0
        - 0
        - 0
      description: |
        The priority of each system-generated alert.
        [/sys/alert](#tag/sysalert) provides a description of these
        alerts.
      type: array
      items:
        $ref: '#/components/schemas/configAlertSysPrioItem'
    configAlert:
      description: |
        The alert configuration of the meter.
      type: object
      properties:
        custom:
          $ref: '#/components/schemas/configAlertCustom'
        reporter:
          $ref: '#/components/schemas/configAlertReporter'
        sys-prio:
          $ref: '#/components/schemas/configAlertSysPrio'
    config:
      description: The meter configuration.
      type: object
      properties:
        bacnet:
          $ref: '#/components/schemas/configBacnet'
        db:
          $ref: '#/components/schemas/configDb'
        display:
          $ref: '#/components/schemas/configDisplay'
        language_code:
          $ref: '#/components/schemas/configLanguageCode'
        local:
          $ref: '#/components/schemas/configLocal'
        location:
          $ref: '#/components/schemas/configLocation'
        log:
          $ref: '#/components/schemas/configLog'
        lua:
          $ref: '#/components/schemas/configLua'
        modbus:
          $ref: '#/components/schemas/configModbus'
        net:
          $ref: '#/components/schemas/configNet'
        push:
          $ref: '#/components/schemas/configPush'
        register:
          $ref: '#/components/schemas/configRegister'
        time:
          $ref: '#/components/schemas/configTime'
        user:
          $ref: '#/components/schemas/configUser'
        alert:
          $ref: '#/components/schemas/configAlert'
    ctrlInterfaceIfMethodItemName:
      example: close
      description: |
        The name of the method.  The name starts with a letter and consists
        entirely of letters, digits, or underscores.
      type: string
    ctrlInterfaceIfMethodItemIn:
      example: u
      description: |
        The [DBus type
        signature](https://dbus.freedesktop.org/doc/dbus-specification.html#type-system)
        of the input arguments to the method. An empty string indicates
        that the method accepts no input arguments.
      type: string
    ctrlInterfaceIfMethodItemInNamesItem:
      example: 'n'
      description: |
        The name of this input argument.
      type: string
    ctrlInterfaceIfMethodItemInNames:
      example:
        - 'n'
      description: |
        The names of the input arguments passed to the method.  Each
        argument name is meant to indicate the purpose of the respective
        argument but, other than that, it is arbitrary.  The documentation
        string given by member `doc` may also refer to these names.
        The `doc` member documentation for details.
      type: array
      items:
        $ref: '#/components/schemas/ctrlInterfaceIfMethodItemInNamesItem'
    ctrlInterfaceIfMethodItemOut:
      example: ''
      description: |
        The [DBus type
        signature](https://dbus.freedesktop.org/doc/dbus-specification.html#type-system)
        of the return value of the method. An empty string indicates that
        the method returns no value.
      type: string
    ctrlInterfaceIfMethodItemDoc:
      example: Close the relay with index <arg>n</arg>.
      description: |
        Description of the purpose and operation of the method. Within
        this string, references to input argument names are enclosed
        within `<arg>` and `</arg>` tags to facilitate highlighting of
        argument names.
      type: string
    ctrlInterfaceIfMethodItem:
      example:
        name: close
        in: u
        in_names:
          - 'n'
        out: ''
        doc: Close the relay with index <arg>n</arg>.
      description: |
        The description of this method.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ctrlInterfaceIfMethodItemName'
        in:
          $ref: '#/components/schemas/ctrlInterfaceIfMethodItemIn'
        in_names:
          $ref: '#/components/schemas/ctrlInterfaceIfMethodItemInNames'
        out:
          $ref: '#/components/schemas/ctrlInterfaceIfMethodItemOut'
        doc:
          $ref: '#/components/schemas/ctrlInterfaceIfMethodItemDoc'
    ctrlInterfaceIfMethod:
      example:
        - name: close
          in: u
          in_names:
            - 'n'
          out: ''
          doc: Close the relay with index <arg>n</arg>.
        - name: open
          in: u
          in_names:
            - 'n'
          out: ''
          doc: Open the relay with index <arg>n</arg>.
      description: |
        The array of methods provided by this interface.  The methods are
        listed in no particular order.
      type: array
      items:
        $ref: '#/components/schemas/ctrlInterfaceIfMethodItem'
    ctrlInterfaceIf:
      example:
        method:
          - name: close
            in: u
            in_names:
              - 'n'
            out: ''
            doc: Close the relay with index <arg>n</arg>.
          - name: open
            in: u
            in_names:
              - 'n'
            out: ''
            doc: Open the relay with index <arg>n</arg>.
      description: |
        Description of the interface.
      type: object
      properties:
        method:
          $ref: '#/components/schemas/ctrlInterfaceIfMethod'
    ctrlInterface:
      example:
        modbus:
          method:
            - name: read_coils
              in: qq
              in_names:
                - addr
                - count
              out: ay
              doc: Read <arg>count</arg> number of coils starting with the coil at address <arg>addr</arg>. The return value is a Modbus reply packet which may contain an exception status or the requested coil values.
        relay:
          method:
            - name: close
              in: u
              in_names:
                - 'n'
              out: ''
              doc: Close the relay with index <arg>n</arg>.
            - name: open
              in: u
              in_names:
                - 'n'
              out: ''
              doc: Open the relay with index <arg>n</arg>.
      description: |
        The names and descriptions of control interfaces detected by the
        meter.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ctrlInterfaceIf'
    luaVarNameValue:
      description: |
        The current value of this persistent variable as a JSON-encoded
        string.

        While it is possible to write this value via the WebAPI, Lua
        scripts generally will also be updating the value as part of their
        execution, so any change in value may be temporary and whether or
        not a WebAPI write is detected by the scripts depends on the
        scripts themselves.
      type: string
    luaVarNameDesc:
      description: |
        A brief, user-friendly description of the purpose of this
        persistent variable.  This description is set when the persistent
        variable is created and is in the language chosen by the author of
        the Lua script that is created the variable.  The string is,
        therefore, not localized to the user's environment.
      type: string
    luaVarName:
      description: |
        A persistent Lua variable.
      type: object
      properties:
        value:
          $ref: '#/components/schemas/luaVarNameValue'
        desc:
          $ref: '#/components/schemas/luaVarNameDesc'
    luaVar:
      description: |
        The persistent Lua variables.  Such variables are non-volatile.
        That is, their value is preserved across script restarts and
        reboots (power-cycles).  Persistent variables can be created and
        manipulated with the built-in Lua module
        [`persistent`](https://www.egauge.net/support/lua/module/control).
      type: object
      additionalProperties:
        $ref: '#/components/schemas/luaVarName'
    lua:
      description: |
        This service provides access to Lua-script related information.
      type: object
      properties:
        var:
          $ref: '#/components/schemas/luaVar'
    sysAlertItemId:
      example: pxyup
      description: |
        A short id that uniquely identifies this system alert. The id
        consists entirely of alpha-numeric characters.
      type: string
    sysAlertItemReason:
      example: Proxy-connection established
      description: |
        A brief explanation of the system condition that triggers is
        system alert.  The string is localized according to the selected
        language-code or is in English if a translation is unavailable.
      type: string
    sysAlertItem:
      description: |
        Description of a system alert.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/sysAlertItemId'
        reason:
          $ref: '#/components/schemas/sysAlertItemReason'
    sysAlert:
      example:
        - id: badid
          reason: Unknown alert
        - id: pxyup
          reason: Proxy-connection established
        - id: pxydn
          reason: Proxy-connection lost
        - id: cfgchg
          reason: Device-configuration changed
      description: |
        Descriptions of the system-generated alerts.
      type: array
      items:
        $ref: '#/components/schemas/sysAlertItem'
    sysBootReason:
      example: software reset
      description: |
        The reason for the most recent CPU reset. The strings vary
        depending on the hardware platform. For EG4*xxx* model devices,
        the possible values are:

          * `general reset`: CPU was powered on when the backup battery
            was depleted.

          * `wakeup`: CPU was powered on when backup battery still had
            sufficient charge left.

          * `watchdog reset`: The CPU's watchdog timer triggered the reset.

          * `software reset`: Firmware requested a reboot.

          * `user reset`: Not applicable.

          * `unknown reset`: Not applicable.
      type: string
    sysBootTime:
      example: '1677287880.350'
      description: |
        The time of the last user-initiated reboot.  It is a decimal [Unix
        timestamp](#tag/Glossary/Unix-Timestamp) string or `null` if
        unavailable.  Unanticipated reboots, e.g., due to power failure or
        watchdog-timeouts do not update this resource.
      type: string
    sysBoot:
      description: |
        Information about the most recent power-up (boot) event.
      type: object
      properties:
        reason:
          $ref: '#/components/schemas/sysBootReason'
        time:
          $ref: '#/components/schemas/sysBootTime'
    sysDbMaxRegisters:
      minimum: 1
      example: 64
      description: |
        The maximum number of registers (columns) that can be stored in
        the meter's database.
      type: integer
    sysDbLevelItemInterval:
      example: 1000
      description: |
        The time interval in milliseconds between database rows at this
        level.  For example, a value of 1000 would indicate that the level
        contains second-by-second data rows.
      type: integer
    sysDbLevelItemRowCount:
      example: 32768
      description: |
        The number of rows available at this storage level.  Each database
        level is cyclical so a level with _n_ rows and an interval of _t_
        milliseconds can retain the most recent _n_·_t_ milliseconds worth
        of data.
      type: integer
    sysDbLevelItemVolatile:
      description: |
        This is `true` if this level of the database storage is volatile.
        The data in volatile levels is lost each time the meter is powered
        up (rebooted).
      type: boolean
    sysDbLevelItem:
      description: |
        Definition of a database storage level.
      type: object
      properties:
        interval:
          $ref: '#/components/schemas/sysDbLevelItemInterval'
        row-count:
          $ref: '#/components/schemas/sysDbLevelItemRowCount'
        volatile:
          $ref: '#/components/schemas/sysDbLevelItemVolatile'
    sysDbLevel:
      example:
        - interval: 1000
          row-count: 32768
          volatile: true
        - interval: 60000
          row-count: 527040
          volatile: false
        - interval: 900000
          row-count: 350640
          volatile: false
        - interval: 86400000
          row-count: 21914
          volatile: false
      description: |
        Definition of the available database storage levels.
      type: array
      items:
        $ref: '#/components/schemas/sysDbLevelItem'
    sysDb:
      description: |
        The database configuration of the meter.
      type: object
      properties:
        max-registers:
          $ref: '#/components/schemas/sysDbMaxRegisters'
        level:
          $ref: '#/components/schemas/sysDbLevel'
    sysDevSerialItemDevpath:
      example: USB2.1
      description: |
        The device path of the serial port that uniquely identifies the
        port it is attached to.
      type: string
    sysDevSerialItemManufacturer:
      example: eGauge
      description: |
        The name of the manufacturer of the serial port hardware.
      type: string
    sysDevSerialItemProduct:
      example: usb485
      description: |
        The product name of the serial port hardware.
      type: string
    sysDevSerialItemSn:
      example: DN02MI0P
      description: |
        The serial number of the serial port hardware.
      type: string
    sysDevSerialItemVersion:
      example: 2
      description: |
        The version of the serial port hardware.
      type: string
    sysDevSerialItem:
      description: |
        An attached serial port.
      type: object
      properties:
        devpath:
          $ref: '#/components/schemas/sysDevSerialItemDevpath'
        manufacturer:
          $ref: '#/components/schemas/sysDevSerialItemManufacturer'
        product:
          $ref: '#/components/schemas/sysDevSerialItemProduct'
        sn:
          $ref: '#/components/schemas/sysDevSerialItemSn'
        version:
          $ref: '#/components/schemas/sysDevSerialItemVersion'
    sysDevSerial:
      example:
        - devpath: USB2.1
          manufacturer: eGauge
          product: usb485
          sn: DN02MI0P
          version: '2.00'
      description: |
        The list of serial ports that are attached to the meter.
      type: array
      items:
        $ref: '#/components/schemas/sysDevSerialItem'
    sysDev:
      description: |
        A description of hardware devices that are attached to the meter.
      type: object
      properties:
        serial:
          $ref: '#/components/schemas/sysDevSerial'
    sysFuncBasicNameArgItemName:
      example: x
      description: |
        The formal name of the argument.  The name starts with a letter
        and consist entirely of alpha-numeric characters or underscores
        (`_`).  The name usually suggests the purpose of the
        argument.  It may also be referenced within the help string
        (member `help`).  Other than that, the name has no significance.
      type: string
    sysFuncBasicNameArgItemType:
      example: '#'
      description: |
        A [type code](#tag/Glossary/Type-Codes) indicating the type of the
        argument.  The special value `string` indicates that the value
        must be a string.
      type: string
    sysFuncBasicNameArgItem:
      example:
        name: x
        type: '#'
      description: |
        Description of the argument expected at index {idx} of the
        argument list.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/sysFuncBasicNameArgItemName'
        type:
          $ref: '#/components/schemas/sysFuncBasicNameArgItemType'
    sysFuncBasicNameArg:
      example:
        - name: x
          type: '#'
        - name: 'y'
          type: '#'
      description: |
        The list of input arguments the function expects.
      type: array
      items:
        $ref: '#/components/schemas/sysFuncBasicNameArgItem'
    sysFuncBasicNameHelp:
      example: Returns the greater value of <arg>x</arg> and <arg>y</arg>.
      description: |
        The help string (documentation) for this function.  In this
        string, references to argument names are enclosed in `arg` tags
        using an XML-like syntax. For example, a reference to an argument
        with name `count` would appear as `<arg>count</arg>` in this
        string.  This can be used to highlight argument names in the
        document string, for example.
      type: string
    sysFuncBasicNameMinArgs:
      example: 2
      description: |
        The minimum number of arguments that need to be passed when
        calling this function.  If zero, all arguments are optional.  This
        value is never larger than the length of the array given for
        member `arg`.
      type: string
    sysFuncBasicName:
      example: max
      description: |
        The name of the eScript function.
        Function names start with a letter and consist entirely of alpha-numeric
        characters or underscores (`_`).
      type: object
      properties:
        arg:
          $ref: '#/components/schemas/sysFuncBasicNameArg'
        help:
          $ref: '#/components/schemas/sysFuncBasicNameHelp'
        min-args:
          $ref: '#/components/schemas/sysFuncBasicNameMinArgs'
    sysFuncBasic:
      example:
        max:
          arg:
            - name: x
              type: '#'
            - name: 'y'
              type: '#'
          help: Returns the greater value of <arg>x</arg> and <arg>y</arg>.
          min-args: 2
        sin:
          arg:
            - name: x
              type: '#'
          help: Returns sine of <arg>x</arg>, where <arg>x</arg> is an angle in degrees.
          min-args: 1
      description: |
        Documents the *basic* [eScript](#tag/Glossary/eScript) functions.  Basic
        functions are available any place eScript expressions may appear.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/sysFuncBasicName'
    sysFuncAlertNameArgItemName:
      example: reg
      description: |
        The formal name of the argument.  The name starts with a letter
        and consist entirely of alpha-numeric characters or underscores
        (`_`).  The name usually suggests the purpose of the
        argument.  It may also be referenced within the help string
        (member `help`).  Other than that, the name has no significance.
      type: string
    sysFuncAlertNameArgItemType:
      example: string
      description: |
        A [type code](#tag/Glossary/Type-Codes) indicating the type of the
        argument.  The special value `string` indicates that the value
        must be a string.
      type: string
    sysFuncAlertNameArgItem:
      example:
        name: reg
        type: string
      description: |
        Description of the argument expected at index {idx} of the
        argument list.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/sysFuncAlertNameArgItemName'
        type:
          $ref: '#/components/schemas/sysFuncAlertNameArgItemType'
    sysFuncAlertNameArg:
      example:
        - name: reg
          type: string
      description: |
        The list of input arguments the function expects.
      type: array
      items:
        $ref: '#/components/schemas/sysFuncAlertNameArgItem'
    sysFuncAlertNameHelp:
      example: Calculates the 24-hour average value for register <arg>reg</arg>.
      description: |
        The help string (documentation) for this function.  In this
        string, references to argument names are enclosed in `arg` tags
        using an XML-like syntax. For example, a reference to an argument
        with name `count` would appear as `<arg>count</arg>` in this
        string.  This can be used to highlight argument names in the
        document string, for example.
      type: string
    sysFuncAlertNameMinArgs:
      example: 1
      description: |
        The minimum number of arguments that need to be passed when
        calling this function.  If zero, all arguments are optional.  This
        value is never larger than the length of the array given for
        member `arg`.
      type: string
    sysFuncAlertName:
      example: dayavg
      description: |
        The name of the eScript function.
        Function names start with a letter and consist entirely of alpha-numeric
        characters or underscores (`_`).
      type: object
      properties:
        arg:
          $ref: '#/components/schemas/sysFuncAlertNameArg'
        help:
          $ref: '#/components/schemas/sysFuncAlertNameHelp'
        min-args:
          $ref: '#/components/schemas/sysFuncAlertNameMinArgs'
    sysFuncAlert:
      example:
        dayavg:
          arg:
            - name: reg
              type: string
          help: Calculates the 24-hour average value for register <arg>reg</arg>.
          min-args: 1
        cumul:
          arg:
            - name: reg
              type: string
            - name: time
              type: '#'
          help: Returns the cumulative value of register named <arg>reg</arg> at time <arg>time</arg>.  If <arg>time</arg> is not specified, the current time is used.
          min-args: 1
      description: |
        Documents the *alert* [eScript](#tag/Glossary/eScript) functions.  These
        functions are available only for eScript expressions evaluated as
        part of alert conditions.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/sysFuncAlertName'
    sysFunc:
      description: |
        Documents the [eScript](#tag/Glossary/eScript) functions built
        into the meter.
      type: object
      properties:
        basic:
          $ref: '#/components/schemas/sysFuncBasic'
        alert:
          $ref: '#/components/schemas/sysFuncAlert'
    sysModbusClientMapNameOptionOpt:
      example: 9600/8n1
      description: |
        The value of the Modbus map option.
      type: string
    sysModbusClientMapNameOption:
      example:
        default-modbus-addr: '2'
        default-serial-params: 9600/8n1
      description: |
        A set of options.  The meter currently supports the following
        options:

          * `default-modbus-addr`: The Modbus unit-number to use by
          default.  This must be a decimal string.  For example: `"1"`.

          * `default-serial-params`: The default serial parameters to use
          when the remote device is connected via a serial port
          (Modbus/RTU).  This must be a string.  For example: `"9600/8n1"`
          for 9600 baud, 8 databits, no parity, 1 stop bit.

          * `default-tcp-port`: The default TCP port number to use when
          the remote device is connected via Modbus/TCP.  This must be a
          decimal string.  For example: `"6001"`.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/sysModbusClientMapNameOptionOpt'
    sysModbusClientMapNameRegItemName:
      example: irradiance
      description: |
        The name of the register.  The user can choose this name freely so
        long as each register within a map has a unique name.
      type: string
    sysModbusClientMapNameRegItemAddr:
      minimum: 0
      maximum: 65535
      description: |
        The Modbus address of the register.
      type: integer
    sysModbusClientMapNameRegItemType:
      example: u32
      enum:
        - bit
        - s16
        - u16
        - s32
        - u32
        - s32l
        - u32l
        - s64
        - u64
        - float16
        - float16l
        - float
        - floatl
        - double
      description: |
        The type of the register value.  This may be one of the following:

          * `bit`: One-bit value (a coil, in Modbus terminology).
          * `s16`: Signed 16-bit integer.
          * `u16`: Unsigned 16-bit integer.
          * `s32`: Signed 32-bit integer.
          * `u32`: Unsigned 32-bit integer.
          * `s32l`: Signed 32-bit integer, word-swapped.
          * `u32l`: Unsigned 32-bit integer, word-swapped.
          * `s64`: Signed 64-bit integer.
          * `u64`: Unsigned 64-bit integer.
          * `float16`: IEEE-754 half-precision float.
          * `float16l`: IEEE-754 half-precision floating point,
            little-endian (byte-swapped).
          * `float`: IEEE-754 single-precision float.
          * `floatl`: IEEE-754 single-precision float, word-swapped.
          * `double`: IEEE-754 double-precision float.
      type: string
    sysModbusClientMapNameRegItemKind:
      enum:
        - analog
        - enum
        - bitset
      description: |
        The kind of the register. Possible values are:

          * `analog`: The value is continuous (the average of two values is
            meaningful).

          * `enum`: The value is discrete (the average of two values is not
            meaningful).  An example for this would be a numeric error code.

          * `bitset`: Each bit in the value is a discrete on/off value.
          An example for this would be a set of error flags.
      type: string
    sysModbusClientMapNameRegItemUnit:
      example: W
      description: |
        For register of the `analog` kind, this defines the physical unit of
        the register value.  This must be one of the following:

          * `#3`: Unit-less number with 3 decimal digits of precision.
          * `%`: Percentage.
          * `A`: Electric current in amperes.
          * `Ah`: Electric charge in ampere-hours.
          * `As`: Electric charge in ampere-seconds.
          * `C`: Temperature in degree celsius.
          * `Degrees`: Angle in degrees.
          * `Hz`: Frequency in hertz.
          * `Ohm`: Resistance in ohm.
          * `Pa`: Pressure in pascals.
          * `Pct`: Percentage.
          * `RH`: Relative humidity.
          * `Tmd`: Time in days.
          * `Tmh`: Time in hours.
          * `Tms`: Time in seconds.
          * `VA`: Apparent power in volt-amperes.
          * `VAh`: Apparent energy in volt-ampere-hours.
          * `V`: Electric potential in volts.
          * `W/m2`: Irradiance in watts-per-square-meter.
          * `W/m^2`: Irradiance in watts-per-square-meter.
          * `W`: Power in watts.
          * `Wh`: Energy in watt-hours.
          * `degC`: Temperature in degree celsius.
          * `deg`: Angle in degrees.
          * `g`: Mass in grams.
          * `hPa`: Pressure in hecto-pascals.
          * `h`: Time in hours.
          * `kAh`: Electric charge in kilo-ampere-hours.
          * `kO`: Resistance in kilo-ohms.
          * `kPa`: Pressure in kilo-pascals.
          * `kVAh`: Apparent energy in kilo-volt-ampere-hours.
          * `kW`: Power in kilo-watts.
          * `kWh`: Energy in kilo-watt-hours.
          * `kg`: Mass in kilo-grams.
          * `kvarh`: Reactive energy in kilo-volt-ampere-hours.
          * `m/s`: Speed in meters-per-second.
          * `m3/s`: Volume flow in cubic-meters-per-second.
          * `m3`: Volume in cubic-meters.
          * `mA`: Electric current in milli-amperes.
          * `mAh`: Electric charge in milli-ampere-hours.
          * `mSecs`: Time in milli-seconds.
          * `mV`: Electric potential in milli-volts.
          * `mV`: Electric potential in milli-volts.
          * `m^3/s`: Volume flow in cubic-meters-per-second.
          * `m^3`: Volume in cubic-meters.
          * `meters`: Distance in meters.
          * `mm`: Distance in milli-meters.
          * `mps`: Speed in meters-per-second.
          * `ms`: Time in milli-seconds.
          * `ohms`: Resistance in ohm.
          * `ppm`: Parts-per-million.
          * `s`: Time in seconds.
          * `secs`: Time in seconds.
          * `var`: Reactive power in volt-ampere.
          * `varh`: Reactive energy in volt-ampere-hours.
          * `°C`: Temperature in degree celsius.
      type: string
    sysModbusClientMapNameRegItemOffset:
      description: |
        An offset value that is used to convert the Modbus register value
        to a value in the specified physical unit.  Specifically, when the
        Modbus value of the register is *reg*, then corresponding physical
        value *phys* is calculated as:

          > *phys* = (*reg* + `offset`) * `scale`

        where `offset` is the value defined here and `scale` is
        the value defined for member `scale`.
      type: number
    sysModbusClientMapNameRegItemScale:
      example: 0.1
      description: |
        A scale value that is used to convert the Modbus register value
        to a value in the specified physical unit.  Specifically, when the
        Modbus value of the register is *reg*, then corresponding physical
        value *phys* is calculated as:

          > *phys* = (*reg* + `offset`) * `scale`

        where `scale` is the value defined here and `offset` is
        the value defined for member `offset`.
      type: number
    sysModbusClientMapNameRegItemAccess:
      enum:
        - ro
        - rw
      description: |
        The access-mode of the register.  It must be one of:
          * `ro`: read-only
          * `rw`: read-write
      type: string
    sysModbusClientMapNameRegItem:
      description: |
        A Modbus register definition.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/sysModbusClientMapNameRegItemName'
        addr:
          $ref: '#/components/schemas/sysModbusClientMapNameRegItemAddr'
        type:
          $ref: '#/components/schemas/sysModbusClientMapNameRegItemType'
        kind:
          $ref: '#/components/schemas/sysModbusClientMapNameRegItemKind'
        unit:
          $ref: '#/components/schemas/sysModbusClientMapNameRegItemUnit'
        offset:
          $ref: '#/components/schemas/sysModbusClientMapNameRegItemOffset'
        scale:
          $ref: '#/components/schemas/sysModbusClientMapNameRegItemScale'
        access:
          $ref: '#/components/schemas/sysModbusClientMapNameRegItemAccess'
    sysModbusClientMapNameReg:
      description: |
        A list of Modbus register definitions.
      type: array
      items:
        $ref: '#/components/schemas/sysModbusClientMapNameRegItem'
    sysModbusClientMapName:
      example:
        option:
          default-modbus-addr: '2'
          default-serial-params: 9600/8n1
        reg:
          - name: irradiance
            addr: 0
            type: u32
            kind: analog
            unit: W
            offset: 0
            scale: 0.1
            access: ro
          - name: temp
            addr: 1
            type: s32
            kind: analog
            unit: degC
            offset: 0
            scale: 0.01
            access: ro
      description: |
        Modbus map consisting of a list of register definitions and a set
        of options.
      type: object
      properties:
        option:
          $ref: '#/components/schemas/sysModbusClientMapNameOption'
        reg:
          $ref: '#/components/schemas/sysModbusClientMapNameReg'
    sysModbusClientMap:
      example:
        sys_dev:
          option:
            default-modbus-addr: '2'
            default-serial-params: 9600/8n1
          reg:
            - name: irradiance
              addr: 0
              type: u32
              kind: analog
              unit: W
              offset: 0
              scale: 0.1
              access: ro
            - name: temp
              addr: 1
              type: s32
              kind: analog
              unit: degC
              offset: 0
              scale: 0.01
              access: ro
      description: |
        System-defined (built-in) Modbus address maps.  The user-defined
        maps are available at
        [/config/modbus/client/map](#tag/configmodbusclientmap).  If a
        user-defined map with the same name as a system map exists, it
        will shadow (mask) the system map with the same name.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/sysModbusClientMapName'
    sysModbusClient:
      description: |
        Modbus client related information.
      type: object
      properties:
        map:
          $ref: '#/components/schemas/sysModbusClientMap'
    sysModbus:
      description: |
        Modbus-related information built into the firmware.
      type: object
      properties:
        client:
          $ref: '#/components/schemas/sysModbusClient'
    sysModel:
      description: |
        The model name of the meter. For example, `EG4030`.
      type: string
    sysNetIpv4Dhcp:
      description: |
        Whether or not to use [DHCP](https://www.ietf.org/rfc/rfc2131.txt)
        to automatically provision the IPv4 address.  If `true`, DHCP is
        enabled. If `false`, the manually configured IPv4 settings are
        used.
      type: boolean
    sysNetIpv4Address:
      example: 192.168.1.42
      description: |
        An IPv4 address in dotted decimal notation.
      type: string
    sysNetIpv4Broadcast:
      example: 192.168.1.255
      description: |
        An IPv4 broadcast address in dotted decimal notation.
      type: string
    sysNetIpv4Netmask:
      example: 255.255.255.0
      description: |
        The address of the IPv4 gateway in dotted decimal notation.
      type: string
    sysNetIpv4Network:
      example: 192.168.1.0
      description: |
        The IPv4 network mask in dotted decimal notation.
      type: string
    sysNetIpv4Gateway:
      example: 192.168.1.1
      description: |
        The IPv4 network number in dotted decimal notation.
      type: string
    sysNetIpv4:
      description: |
        The Internet Protocol v4 ([IPv4](https://www.rfc-editor.org/rfc/rfc791))
        configuration.
      type: object
      properties:
        dhcp:
          $ref: '#/components/schemas/sysNetIpv4Dhcp'
        address:
          $ref: '#/components/schemas/sysNetIpv4Address'
        broadcast:
          $ref: '#/components/schemas/sysNetIpv4Broadcast'
        netmask:
          $ref: '#/components/schemas/sysNetIpv4Netmask'
        network:
          $ref: '#/components/schemas/sysNetIpv4Network'
        gateway:
          $ref: '#/components/schemas/sysNetIpv4Gateway'
    sysNetNtpServerItemAddress:
      example: 192.168.1.1
      description: |
        The network address of the configured NTP server.  This is
        typically a string-representation of the server's IP address,
        which may be either an IP v4 or v6 address. If the address is
        unknown, this is `null`.
      type: string
    sysNetNtpServerItemName:
      example: null
      description: |
        The hostname of the configured NTP server.  If the name is
        unknown, this this is `null`.  This normally happens when the NTP
        server is configured as an IP address.
      type: string
    sysNetNtpServerItemState:
      example: SYNC
      enum:
        - INVAL
        - PEER
        - SYNC
        - TRACK
      description: |
        The meter's view of the current state of this NTP server.  It may
        have one of the following values:

          * `INVAL`: The server is invalid, e.g., because the hostname
            could not be resolved to a network address or because the
            remote server is not responding.

          * `TRACK`: The server is being tracked and, if everything
            continues to work fine, it will enter the `PEER` state
            shortly.

          * `PEER`: The server is a peer and could be used as a time source.

          * `SYNC`: The server is a peer and the meter's time is
            synchronized with this server.
      type: string
    sysNetNtpServerItemWeight:
      example: 1
      description: |
        The meter's estimate of the weight that should be given to this
        NTP server's time.
      type: integer
    sysNetNtpServerItemTrustLevel:
      example: 10
      description: |
        The meter's estimate of how trustworthy this server's time is.
        Higher numbers indicate a higher level of trustworthiness.
      type: integer
    sysNetNtpServerItemStratum:
      example: 3
      description: |
        The meter's estimate of the time accuracy provided by this server.
        Smaller numbers mean higher accuracy.  A stratum 0 server is the
        most accurate (atomic clock or GPS clock).
        The is available only if the meter considers this server a peer.
      type: integer
    sysNetNtpServerItemNextPoll:
      example: 615
      description: |
        The time that needs to elapse before the meter contacts this
        server again.  The unit is seconds.
      type: integer
    sysNetNtpServerItemPollInterval:
      example: 1545
      description: |
        The interval of time between successive contacts from the meter to
        this server.  The unit is seconds.
      type: integer
    sysNetNtpServerItemOffset:
      example: -0.601
      description: |
        The estimated difference between the meter's time and this NTP
        server's time.  The unit is milliseconds.
        The is available only if the meter considers this server a peer.
      type: number
    sysNetNtpServerItemDelay:
      example: 0.79
      description: |
        The estimated time it takes for a network packet from the meter to
        reach this NTP server (or vice versa).  The unit is milliseconds.
        The is available only if the meter considers this server a peer.
      type: number
    sysNetNtpServerItemJitter:
      example: 0.106
      description: |
        The estimated jitter (variation) for the time it takes for a
        network packet from the meter to reach this NTP server (or vice
        versa). The unit is milliseconds.
        The is available only if the meter considers this server a peer.
      type: number
    sysNetNtpServerItem:
      description: |
        Status of the NTP server.
      type: object
      properties:
        address:
          $ref: '#/components/schemas/sysNetNtpServerItemAddress'
        name:
          $ref: '#/components/schemas/sysNetNtpServerItemName'
        state:
          $ref: '#/components/schemas/sysNetNtpServerItemState'
        weight:
          $ref: '#/components/schemas/sysNetNtpServerItemWeight'
        trust_level:
          $ref: '#/components/schemas/sysNetNtpServerItemTrustLevel'
        stratum:
          $ref: '#/components/schemas/sysNetNtpServerItemStratum'
        next_poll:
          $ref: '#/components/schemas/sysNetNtpServerItemNextPoll'
        poll_interval:
          $ref: '#/components/schemas/sysNetNtpServerItemPollInterval'
        offset:
          $ref: '#/components/schemas/sysNetNtpServerItemOffset'
        delay:
          $ref: '#/components/schemas/sysNetNtpServerItemDelay'
        jitter:
          $ref: '#/components/schemas/sysNetNtpServerItemJitter'
    sysNetNtpServer:
      example:
        - address: 192.168.1.1
          name: null
          state: SYNC
          weight: 1
          trust_level: 10
          stratum: 3
          next_poll: 615
          poll_interval: 1545
          offset: 0.228
          delay: 0.79
          jitter: 0.106
        - address: 66.228.58.20
          name: north-america.pool.ntp.org
          state: PEER
          weight: 1
          trust_level: 10
          stratum: 3
          next_poll: 499
          poll_interval: 1480
          offset: -0.601
          delay: 39.609
          jitter: 2.258
      description: |
        Status of each [configured](#tag/config/net/ntp/server) NTP server.
      type: array
      items:
        $ref: '#/components/schemas/sysNetNtpServerItem'
    sysNetNtp:
      description: |
        Network Time Protocol
        ([NTP](https://www.rfc-editor.org/rfc/rfc5905)) status.
      type: object
      properties:
        server:
          $ref: '#/components/schemas/sysNetNtpServer'
    sysNetWlanApItemBssid:
      example: d8:08:a5:ae:4c:e1
      description: |
        The BSSID (basic service set identifier) of this access point.
        This is a MAC address formatted as six two-digit hex numbers,
        separated by colons (`:`).
      type: string
    sysNetWlanApItemFlags:
      example: '[WPA2-PSK-CCMP][ESS]'
      description: |
        A set of flags enclosed in square brackets.  Each flag gives some
        information about the capabilities of this access point.

        The following flags are currently defined:

          * `DMG`: Indicates the access-point supports 802.11ad
            directional multi-gigabit (DMG).

          * `EBSS`: The access-point supports extended wireless networks.

          * `FILS`: The access-point supports 802.11ai fast initial link setup.

          * `FST`: The access-point supports fast session transfers.

          * `HS20`: The access-point supports Hot Spot 2.0 (Wi-Fi
            Certified Passpoint).

          * `IBSS`: The access-point supports independent basic service
            set (ad-hoc) wireless networks.

          * `MESH`: The access-point uses a mesh network.

          * `OSEN`: The access-point supports Server-only authenticated
            layer 2 Encryption Network.

          * `OWE-TRANS`: See Opportunistic Wireless Extension.

          * `OWE-TRANS-OPEN`: See Opportunistic Wireless Extension.

          * `P2P`: The access-point supports point-to-point (WiFi Direct)
            wireless networks.

          * `PBSS`: Indicates the access-point supports personal basic
            service set wireless networks.

          * `RSN`: Indicates the access-point supports Robust Security
            Network (RSN).

          * `UTF-8`: The SSID is UTF-8 encoded.

          * `WEP`: The access-point supports Wired Equivalent Privacy (WEP).

          * `WPA`: The access-point supports Wi-Fi Protected Access (WPA).

          * `WPA2`: The access-point supports Wi-Fi Protected Access (WPA)
            version 2.

          * `WPS`: The access-point supports Wi-Fi Protected Setup (WPS).

        Encryption-related flags may be followed by various sub-flags that
        are separated by a `+` character.  For example,
        `WPA2-PSK-CCMP+TKIP` indicates that WPA2-PSK-CCMP is supported
        with the TKIP protocol.
      type: string
    sysNetWlanApItemFrequency:
      example: 2452
      description: |
        The frequency in MHz of this access point.
      type: integer
    sysNetWlanApItemSignalLevel:
      example: -18
      description: |
        The signal-strength (in dB) with which the meter is receiving this
        access point.  This is typically a negative number with larger
        (less negative) numbers indicating higher signal strength.
      type: integer
    sysNetWlanApItemSsid:
      example: wireless
      description: |
        The SSID (service set identifier) of this WLAN network.
      type: string
    sysNetWlanApItem:
      description: |
        Access point status.
      type: object
      properties:
        bssid:
          $ref: '#/components/schemas/sysNetWlanApItemBssid'
        flags:
          $ref: '#/components/schemas/sysNetWlanApItemFlags'
        frequency:
          $ref: '#/components/schemas/sysNetWlanApItemFrequency'
        signal_level:
          $ref: '#/components/schemas/sysNetWlanApItemSignalLevel'
        ssid:
          $ref: '#/components/schemas/sysNetWlanApItemSsid'
    sysNetWlanAp:
      example:
        - bssid: d8:08:a5:ae:4c:e1
          flags: '[WPA2-PSK-CCMP][ESS]'
          frequency: 2452
          signal_level: -18
          ssid: wireless
        - bssid: 24:c1:e3:c7:2a:88
          flags: '[WPA2-PSK-CCMP][WPS][ESS]'
          frequency: 2412
          signal_level: -62
          ssid: testwlan
      description: |
        The list of detected access points (available WLAN networks).
      type: array
      items:
        $ref: '#/components/schemas/sysNetWlanApItem'
    sysNetWlanNetItemNetworkId:
      example: 1
      minimum: 0
      description: |
        Identifier for this network.
      type: integer
    sysNetWlanNetItemBssid:
      example: any
      description: |
        The BSSID (basic service set identifier) of the access point to
        use for this network.  This is a MAC address formatted as six
        two-digit hex numbers separated by colons (`:`).  If unset, this
        is `any` instead.
      type: string
    sysNetWlanNetItemFlags:
      example: '[CURRENT]'
      description: |
        A set of flags which are enclosed in square brackets.  The
        following flags are currently defined:

          * `CURRENT`: Indicates that this network is currently being
            used.

          * `DISABLED`: The network is disabled from being used.

          * `TEMP-DISABLED`: The network is temporarily disabled from
            being used.

          * `P2P-PERSISTENT`: Indicates a point-to-point (WiFi Direct)
            connection.  This is not used by the meter.
      type: string
    sysNetWlanNetItemSsid:
      example: wireless
      description: |
        The SSID (service set identifier) of this WLAN network.
      type: string
    sysNetWlanNetItem:
      description: |
        The WLAN network status.
      type: object
      properties:
        network_id:
          $ref: '#/components/schemas/sysNetWlanNetItemNetworkId'
        bssid:
          $ref: '#/components/schemas/sysNetWlanNetItemBssid'
        flags:
          $ref: '#/components/schemas/sysNetWlanNetItemFlags'
        ssid:
          $ref: '#/components/schemas/sysNetWlanNetItemSsid'
    sysNetWlanNet:
      example:
        - network_id: 0
          bssid: any
          flags: '[DISABLED]'
          ssid: other
        - network_id: 1
          bssid: any
          flags: '[CURRENT]'
          ssid: wireless
        - network_id: 2
          bssid: any
          flags: '[DISABLED]'
          ssid: 兔年 😁
      description: |
        The status of configured wireless networks.
      type: array
      items:
        $ref: '#/components/schemas/sysNetWlanNetItem'
    sysNetWlan:
      description: |
        The WLAN (Wi-Fi) status.
      type: object
      properties:
        ap:
          $ref: '#/components/schemas/sysNetWlanAp'
        net:
          $ref: '#/components/schemas/sysNetWlanNet'
    sysNet:
      description: |
        The network settings that are in use by the meter.  This may
        or may not be the same as the configuration established in
        [/config/net](#tag/confignet).
      type: object
      properties:
        ipv4:
          $ref: '#/components/schemas/sysNetIpv4'
        ntp:
          $ref: '#/components/schemas/sysNetNtp'
        wlan:
          $ref: '#/components/schemas/sysNetWlan'
    sysReboot:
      description: |
        This is `true` if the meter needs to be rebooted, e.g., due to a
        configuration change.  If so, a [reboot
        command](#tag/cmd/operation/cmdReboot) should be issued at the
        next opportune moment.
      type: boolean
    sysSn:
      example: G10400
      description: |
        The serial number of the meter.  Even though it is called
        serial-*number*, this string may contain letters, dashes (`-`) and
        underscores (`_`) as well.
      type: string
    sysStatusTokenArgsItem:
      example: 4.5alpha1
      description: |
        A string that provides additional information to the `error` or
        `info` tag.
      type: string
    sysStatusTokenArgs:
      example:
        - 4.5alpha1
        - 4.5alpha1
      description: |
        A list of strings that provide additional information to the
        `error` or `info` tag.
      type: array
      items:
        $ref: '#/components/schemas/sysStatusTokenArgsItem'
    sysStatusTokenDone:
      description: |
        This is `true` if the operation has completed or `false` if it is
        still in progress.
      type: boolean
    sysStatusTokenError:
      example: NOT_NEWER
      description: |
        If set, indicates that an error occurred.  The meaning of this
        value depends on the operation being performed.  Generally, it is
        a short tag.  For example, `OOM` to indicate "out of
        memory". Before presenting the tag to a user, it must be
        translated to a human-readable string.  The strings in member
        `args` provide additional info about why the error occurred.
      type: string
    sysStatusTokenInfo:
      example: RESTORE
      description: |
        If set, indicates the action the long-running operation is
        currently performing.  The meaning of this value depends on the
        operation being performed.  Generally, the string is a short tag.
        For example, `RESTORE` to indicate that data is being restored to
        the database. Before presenting the tag to a user, it must be
        translated to a human-readable string.  The strings in member
        `args` provide additional info about the action being performed.
      type: string
    sysStatusTokenProgress:
      example: 0.31415
      description: |
        A progress indicator that reports the portion of the operation (or
        action) that has been completed so far.  The value is in the range
        from 0 to 1, where 0 means that the operation has just started and
        1 means the operation is 100% complete.
      type: number
    sysStatusTokenTs:
      example: '1679103764.278772467'
      description: |
        The time when this status was created.  It is a decimal [Unix
        timestamp](#tag/Glossary/Unix-Timestamp) string.
      type: string
    sysStatusToken:
      example:
        args:
          - 4.5alpha1
          - 4.5alpha1
        done: true
        error: NOT_NEWER
        ts: '1679103764.278772467'
      description: |
        The current status of the long-running operation.
      type: object
      properties:
        args:
          $ref: '#/components/schemas/sysStatusTokenArgs'
        done:
          $ref: '#/components/schemas/sysStatusTokenDone'
        error:
          $ref: '#/components/schemas/sysStatusTokenError'
        info:
          $ref: '#/components/schemas/sysStatusTokenInfo'
        progress:
          $ref: '#/components/schemas/sysStatusTokenProgress'
        ts:
          $ref: '#/components/schemas/sysStatusTokenTs'
    sysStatus:
      example: {}
      description: |
        The status of long-running operations.  For security reasons, this
        resource always returns an empty object.  That is, only
        applications that know the token of a long-running operation can
        inquire on its status.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/sysStatusToken'
    sysTime:
      example: '1679104389.095469'
      description: |
        The current meter time as a decimal [Unix
        timestamp](#tag/Glossary/Unix-Timestamp) string.
      type: string
    sysUptime:
      example: 1232588.28
      description: |
        The number of seconds the device has been running since the last
        reboot.
      type: number
    sysVersionFirmware:
      example: 4.5alpha1
      description: |
        The version code of the installed firmware.
      type: string
    sysVersionHardware:
      example: 3EA
      description: |
        The version code of the hardware.
      type: string
    sysVersionKernel:
      example: '5.15.95+ #47 Thu Feb 23 15:15:34 MST 2023'
      description: |
        The version code of the installed kernel.
      type: string
    sysVersion:
      description: |
        Meter version information.
      type: object
      properties:
        firmware:
          $ref: '#/components/schemas/sysVersionFirmware'
        hardware:
          $ref: '#/components/schemas/sysVersionHardware'
        kernel:
          $ref: '#/components/schemas/sysVersionKernel'
    sys:
      description: |
        System information.  Everything here is read-only.

        Accessing this service requires the [view_settings
        privilege](#tag/Glossary/User-Privileges).
      type: object
      properties:
        alert:
          $ref: '#/components/schemas/sysAlert'
        boot:
          $ref: '#/components/schemas/sysBoot'
        db:
          $ref: '#/components/schemas/sysDb'
        dev:
          $ref: '#/components/schemas/sysDev'
        func:
          $ref: '#/components/schemas/sysFunc'
        modbus:
          $ref: '#/components/schemas/sysModbus'
        model:
          $ref: '#/components/schemas/sysModel'
        net:
          $ref: '#/components/schemas/sysNet'
        reboot:
          $ref: '#/components/schemas/sysReboot'
        sn:
          $ref: '#/components/schemas/sysSn'
        status:
          $ref: '#/components/schemas/sysStatus'
        time:
          $ref: '#/components/schemas/sysTime'
        uptime:
          $ref: '#/components/schemas/sysUptime'
        version:
          $ref: '#/components/schemas/sysVersion'
  headers:
    ETagHeader:
      description: |
        The returned value is a tag that uniquely identifies the
        meter configuration.  Subsequent modification requests can include
        this tag in an `If-Match` header to apply the modification only if the
        configuration has changed since the tag was obtained.
      schema:
        type: string
security:
  - ApiKey: []
tags:
  - name: Introduction
    description: |
      The eGauge WebAPI is a [JSON](https://wwww.json.org/)-based API
      that provides access to eGauge meters. It offers secure means to
      read device data, configure the device, and perform various
      control operations.

      The WebAPI is intended to eventually replace the [eGauge XML
      API](https://www.egauge.net/docs/egauge-xml-api.pdf). For new
      applications, developers are encouraged to use WebAPI rather than
      the legacy XML API.

      ## Legal Disclaimer

      This document and the API it describes may be amended and modified
      by eGauge Systems LLC at any time with or without notice. eGauge
      Systems LLC strives to avoid changes that break
      backwards-compatibility, but reserves the right to do so at its
      sole discretion.

      ## Getting Started

      ### With Python

      To make it easy to get started, eGauge provides an open source
      Python package.  It can be installed with the command:

        ```sh
        pip install egauge-python
        ```

      With this package installed, accessing an eGauge meter becomes
      very simple.  For example, to fetch the hostname of the meter, you
      could use:

        ```python
        from egauge import webapi

        URI = "https://DEV.egaug.es"      # replace DEV with meter name
        USR = "USER"                      # replace USER with user name
        PWD = "PASS"                      # replace PASS with password

        dev = webapi.device.Device(URI, webapi.JWTAuth(USR,PWD))

        print("hostname is " + dev.get("/config/net/hostname")["result"])
        ```

      The package also contains various convenience classes to read
      meter data, capture waveform samples, convert between physical
      units, and so on.

      The official GIT repository for this package is at
      [https://bitbucket.org/egauge/python/](https://bitbucket.org/egauge/python/).
      Various code examples can be found in the
      [examples](https://bitbucket.org/egauge/python/src/master/examples/)
      directory.

      ### With Postman

      *To be added.*
  - name: /auth
    description: |
      The authentication service.  Clients can use
      this to obtain and manage tokens that grant access to the other
      resources in this API.


      The meter uses [JSON Web
      Tokens](https://rfc-editor.org/rfc/rfc7519) (JWT or simply token)
      to restrict access to protected resources.  Clients must include
      such tokens in requests via the [HTTP Authorization
      header](https://www.rfc-editor.org/rfc/rfc7235).  This header must
      have the form:

        > Authorization: Bearer *JWT*

      where *JWT* is a valid token.

      Tokens are valid for a limited time; typically for about 10
      minutes.  However, a meter may revoke a token earlier, e.g.,
      due to a reboot.
  - name: /capture
    description: |
      The capture service allows collecting waveform data for configured
      input channels.

      ## Basic Usage

      `GET /capture&i` returns information about the channels for which
      waveform data can be captured.  The returned object might look
      like this:

      ```json
      {
        "channels": {
          "0": {"name": "L1", "unit": "V"},
          "1": {"name": "L2", "unit": "V"},
          "4": {"name": "S1", "unit": "A"}
          }
      }
      ```

      This response indicates that three channels are available.  The
      meter-internal channel numbers are 0, 1, and 4. As the `name`
      values indicate, those channels correspond to meter inputs L1, L2,
      and S1, respectively.  The first two channels return samples as
      volts (`V`) and the third returns samples as amperes (`A`).

      `GET /capture?n&d=1e-3&c=0&c=4` initiates a capture for 1ms of
      samples on channels 0 and 4 and returns a cookie (token) to be
      used to retrieve the capture samples. The response for this
      request might look like this:

      ```json
      {"state": "armed", "cookie": 1875353535}
      ```

      State `armed` indicates that the meter successfully processed the
      capture request and is waiting for the trigger to occur. Cookie
      `1875353535` is a random integer to be used when retrieving the
      sampled data, as shown next.

      `GET /capture?n=1875353535` can now be used to fetch the samples.
      The response might look as shown below:

      ```json
        {
          "state": "full", "ts_freq": 1000000, "first_sample": "1619637288.061",
          "ch_mask": [17, 0],
          "r": [
            {"t": 495514564, "d": [135.059]},
            {"t":        82, "d": [-0.0146239]},
            {"t":      1354, "d": [105.454, -0.00731193]}
          ]
        }
      ```

      State `full` indicates that the capture buffer is full and
      therefore the response contains sample values. The frequency of
      the counter used to generate the timestamps is 1MHz (`"ts_freq":
      1000000`) and the realtime [Unix
      timestamp](#tag/Glossary/Unix-Timestamp) of the first sample is 28
      April 2021, 19:14:48 UTC (`first_sample": "1619637288.061"`). The
      `ch_mask` member is an array of 32-bit integers.  If a bit is set
      in this mask, data for that channel is included in the response.
      In our case, the channel mask has only bits 0 and 4 set in the
      first integer (17), indicating that channels 0 and 4 are contained
      in the sampled data (in order from smallest to largest channel
      numbers). The timestamp `t` of the first sample is 495514564 and
      the subsequent samples were acquired 82 and 1354 timestamp ticks
      after the corresponding previous sample.  Thus, the reconstructed
      sample values for the channels are:

        |**Timestamp [µs]**|**Channel 0 value [V]**|**Channel 1 value [A]**|
        |-----------------:|----------------------:|----------------------:|
        |         495514564|                135.059|                       |
        |         495514646|                       |            -0.01462390|
        |         495516000|                105.454|            -0.00731193|

      Note how the sample values are returned strictly in order from
      lowest number to highest numbered channel: 0, 4, 0, 4.  Also note
      how there is a separate entry in the result array `r` for each
      unique timestamp.  Each data array (`d`) may have just a single
      entry or multiple entries if there are multiple sample values with
      the same timestamp.

      ## Python Example

      A Python program illustrating the use of this service can be found
      [here](https://bitbucket.org/egauge/python/src/master/examples/test_capture.py).
      This program takes advantage of class
      `egauge.webapi.device.Capture` to handle the details of encoding
      the HTTP requests and decoding the responses.
  - name: /config
    x-schema-description: The meter configuration.
    description: |
      The meter configuration service.

      The endpoints under `/config` provide common method semantics and
      atomicity guarantees as described below.


      ## HTTP Method Semantics

      The endpoints generally support HTTP methods `GET`, `PUT`, `POST`,
      and `DELETE`, though some of the endpoints may have restrictions.
      For example, security-sensitive values such as certificates or
      passwords are usually write-only.

      `GET` returns the current value of the endpoint and has no
      side-effect.

      The exact semantics of the other methods depend on the JSON type
      of the value that the endpoint represents:

      ### Semantics for Object Values

      `PUT` replaces the value of the object with the one in the request
      body.  `POST` updates the object based on the members in the
      request body.  That is, the `POST` may add new members or updates
      the values of existing members. `DELETE` removes the object where
      that makes sense and otherwise resets the object to its default
      value.

      ### Semantics for Array Values

      `PUT` replaces the value of the array with the array contained in
      the request body.  `POST` appends the array in the request body to
      the existing array.  `DELETE` removes the array where that makes
      sense and otherwise resets it to its default value (usually the
      empty array).

      ### Semantics for String and Number Values

      `PUT` and `POST` replace the value.  `DELETE` removes the
      value if that is possible and otherwise resets it to the default
      value.

      ## Atomicity

      `GET` responses are guaranteed to return a consistent view of the
      meter configuration.  That is, if there are simultaneous
      modification requests, it is guaranteed that the modifications
      take place either before or after the `GET` response is created,
      not partway through it.

      Modification requests (`POST`, `PUT`, and `DELETE`) are executed
      transactionally, meaning either all of a modification is applied
      or none of it.  Multiple modifications are applied in a
      sequentially consistent fashion.  That is, there must exist a
      sequential order in which the modifications can be applied that
      yields the final result.

      HTTP headers `ETag` and `If-Match` can be used to ensure a
      modification request is applied only if the configuration has not
      been changed since the `GET` request that returned the `ETag`.
  - name: /config/alert
    description: |
      The alert configuration of the meter.
  - name: /config/alert/custom
    description: |
      Up to 32 custom alerts.

      Custom alerts consist of an arbitrary boolean condition that is
      checked at certain times.  When the condition evaluates to true,
      the alert is triggered.
  - name: /config/alert/custom/{idx}
    description: |
      The custom alert.
  - name: /config/alert/custom/{idx}/cond
    description: |
      The boolean condition consists of three parts: `lhs op rhs`. `lhs`
      and `rhs` are arbitrary expressions and `op` must be a comparison
      operator.
  - name: /config/alert/custom/{idx}/cond/lhs
    description: |
      An [eScript](#tag/Glossary/eScript) expression that returns the
      value to use on the left hand side of the comparison.
    x-schema-example: temp_internal()
  - name: /config/alert/custom/{idx}/cond/op
    x-schema-enum:
      - <
      - <=
      - '=='
      - '!='
      - '>='
      - '>'
    description: |
      The comparison-operator to use for comparing the left-hand-side
      expression `lhs` against the right-hand side expression `rhs`.  It
      may be one of:

        * `<`: Condition is true if `lhs` is less than `rhs`.
        * `<=`: Condition is true if `lhs` is less-than-or-equal to `rhs`.
        * `==`: Condition is true if `lhs` is equal to `rhs`.
        * `!=`: Condition is true if `lhs` differs from `rhs`.
        * `>=`: Condition is true if `lhs` is greater-than-or-equal to `rhs`.
        * `>`: Condition is true if `lhs` is greater than `rhs`.
  - name: /config/alert/custom/{idx}/cond/rhs
    x-schema-example: '30'
    description: |
      An [eScript](#tag/Glossary/eScript) expression that returns the
      value that to use on the right hand side of the comparison.
  - name: /config/alert/custom/{idx}/detail
    x-schema-example: 'It is hot in here: %l C!'
    description: |
      Alert detail message.  This may be up to 255 bytes in length.
      The following sequences within this string get replaced as
      follows:

        * `%%` is replaced by a single percent character.
        * `%l` is replaced by the value of the `lhs` expression.
        * `%r` is replaced by the value of the `rhs` expression.
        * `%L` is replaced by the `lhs` expression string.
        * `%R` is replaced by the `rhs` expression string.
  - name: /config/alert/custom/{idx}/frequency
    x-schema-enum:
      - sec
      - min
      - hr
      - dy
      - wk
      - mon
      - an
    description: |
      The frequency with which this custom alert should be checked.
      Possible values are:

        * `sec`: The alert will be checked once a second.
        * `min`: The alert will be checked once a minute.
        * `hr`: The alert will be checked once an hour.
        * `dy`: The alert will be checked once a day.
        * `wk`: The alert will be checked once a week.
        * `mon`: The alert will be checked once a month.
        * `an`: The alert will be checked once a year.
  - name: /config/alert/custom/{idx}/name
    x-schema-example: temperature alert
    description: |
      The user-selected name of this custom alert.
  - name: /config/alert/custom/{idx}/priority
    x-schema-minimum: 0
    x-schema-maximum: 7
    description: |
      The priority of this custom alert.  Zero is the lowest, seven the
      highest priority.
  - name: /config/alert/reporter
    description: |
      The alert reporting configuration.  Alerts may be reported via a
      web server or via an email server.
  - name: /config/alert/reporter/mail
    description: |
      The configuration for reporting alerts via email server.  If alert
      reporting via web server is enabled
      ([/config/alert/reporter/web/uri](#tag/configalertreporterweburi)
      is not empty), reporting via email server is disabled.
  - name: /config/alert/reporter/mail/server
    x-schema-example: smtp.mail.com
    description: |
      The hostname of a mail server that speaks the
      [SMPT](https://www.rfc-editor.org/rfc/rfc821) protocol.  If this
      is set to an empty string, the meter will attempt to deliver mail
      directly to the destination host.  Many Internet service providers
      block direct mail delivery, so leaving this string empty generally
      results in alert emails getting blocked.
  - name: /config/alert/reporter/mail/user
    x-schema-example: egaugealert@mail.com
    description: |
      The user name to provide to the email server for authentication
      purposes.
  - name: /config/alert/reporter/mail/password
    description: |
      The password to provide to the email server for authentication
      purposes.

      This resource is write-only.
  - name: /config/alert/reporter/mail/from-address
    x-schema-example: eGauge1345
    description: |
      The "From" email address to use when sending an email alert.  If
      set to an empty string, the email server will use a default
      address.
  - name: /config/alert/reporter/mail/to
    description: |
      The email destinations to send the alerts to.
  - name: /config/alert/reporter/mail/to/{idx}
    description: |
      An email destination to send the alerts to.
  - name: /config/alert/reporter/mail/to/{idx}/address
    x-schema-example: user@site.com
    description: |
      The destination email address to send the alert to.
  - name: /config/alert/reporter/mail/to/{idx}/format
    description: |
      The reporting format to use for this destination.  Valid values
      are:

        * `short`: Report only the newest alert with the highest
          priority.

        * `full`: Report all unacknowledged alerts that are pending in
          order from highest to lowest priority.
  - name: /config/alert/reporter/mail/to/{idx}/min-priority
    x-schema-minimum: 0
    x-schema-maximum: 7
    x-schema-example: 3
    description: |
      The minimum priority that is required for a new alert to generate
      an email.  When an email is generated, other lower priority alerts
      may also be included if they are unacknowledged and the reporting
      format allows it.
  - name: /config/alert/reporter/web
    description: |
      The configuration for reporting alerts via web server.
  - name: /config/alert/reporter/web/min-priority
    x-schema-minimum: 0
    x-schema-maximum: 7
    description: |
      The minimum priority that is required for a new alert to generate
      a report to the web server.  When a report is generated, all other
      unacknowledged alerts are also reported, even if they have a
      priority lower than the value indicated by this resource.
  - name: /config/alert/reporter/web/options
    x-schema-example: gzip,secure
    description: |
      The options to use when sending an alert report to the web server.

      This resource is available only if
      [/config/alert/reporter/web/service](#tag/configalertreporterwebservice)
      is an empty string.

      Multiple options can be specified in the string by separating them
      with a comma.  Supported options are:

        * `deflate`: Use HTTP Content-Encoding `deflate` when
          transmitting the alert report.

        * `gzip`: Use HTTP Content-Encoding `gzip` when
          transmitting the alert report.

        * `secure`: Only send the alert report if the server's HTTP
          certificate can be verified by the meter.  This option is
          ignored if
          [/config/net/http/client/insecure](#tag/confignethttpclientinsecure)
          is `true`.
  - name: /config/alert/reporter/web/password
    x-schema-example: secret!
    description: |
      The password to be provided to the web server for authentication
      purposes.

      This resource is write-only
  - name: /config/alert/reporter/web/service
    x-schema-example: ''
    description: |
      The name of the alert service provider to use for reporting
      alerts.  After writing this resource with a non-empty string, the
      service needs to be activated in a separate step.

      **TODO**: SHOW HOW TO DO THIS.
  - name: /config/alert/reporter/web/uri
    x-schema-example: https://alerts.com/report
    description: |
      The URI of the web server to use for reporting alerts.

      This resource is available only if
      [/config/alert/reporter/web/service](#tag/configalertreporterwebservice)
      is an empty string.
  - name: /config/alert/reporter/web/user
    x-schema-example: jsmith
    description: |
      The user name to provide to the web server for authentication
      purposes.  If this string is not empty, the user name and the
      password are both sent to the web server using HTTP Basic
      authorization.  For security reasons, this should only be used
      when connecting to the server via an encrypted connection (https).

      This resource is available only if
      [/config/alert/reporter/web/service](#tag/configalertreporterwebservice)
      is an empty string.
  - name: /config/alert/sys-prio
    x-schema-example:
      - 0
      - 0
      - 7
      - 0
      - 7
      - 4
      - 0
      - 0
      - 1
      - 6
      - 0
      - 0
      - 0
      - 5
      - 0
      - 0
      - 0
      - 0
      - 0
      - 0
    description: |
      The priority of each system-generated alert.
      [/sys/alert](#tag/sysalert) provides a description of these
      alerts.
  - name: /config/alert/sys-prio/{idx}
    x-schema-minimum: 0
    x-schema-maximum: 7
    description: |
      The priority of this system alert.
  - name: /config/bacnet
    description: |
      The [BACnet](https://bacnet.org/) configuration.
  - name: /config/bacnet/server
    description: |
      The [BACnet](https://bacnet.org/) server configuration.
  - name: /config/bacnet/server/bip
    description: |
      The [BACnet](https://bacnet.org/) over
      [IPv4](https://en.wikipedia.org/wiki/Internet_Protocol_version_4)
      configuration.
  - name: /config/bacnet/server/bip/port
    x-schema-minimum: 0
    x-schema-maximum: 65535
    x-schema-example: 47808
    description: |
      The IPv4 port number used by the server when `bip` is enabled in
      [/config/bacnet/server/enable](#tag/configbacnetserverenable).
      The default value is 0xBAC0 (47808).
  - name: /config/bacnet/server/enable
    description: |
      The list of BACnet protocols that are enabled.  An empty list
      indicates that the BACnet server is disabled.  The meter is
      currently restricted to supporting a single protocol at a time, so
      this array may have at most one element.
  - name: /config/bacnet/server/enable/{idx}
    x-schema-enum:
      - ethernet
      - bip
      - mstp
    description: |
      The name of an enabled BACnet protocol.  Possible values are:

        * `ethernet`: BACnet over raw Ethernet.

        * `bip`: BACnet over the UDP/IP.

        * `mstp`: BACnet over MS/TP (RS-485).
  - name: /config/bacnet/server/epoch-relative
    description: |
      If true, the BACnet server reports cumulative values relative to
      the [meter epoch](#tag/configdbepoch).  If false, raw absolute
      values are reported relative to when the meter was manufactured.
  - name: /config/bacnet/server/id
    x-schema-minimum: 0
    x-schema-maximum: 4194303
    description: |
      The object id of the BACnet server.
  - name: /config/bacnet/server/mstp
    x-schema-minimum: 0
    x-schema-maximum: 127
    x-schema-example: 1
    description: |
      The BACnet over MS/TP configuration.  This is used only if the
      `mstp` protocol is [enabled](#tag/configbacnetserver/enable).
  - name: /config/bacnet/server/mstp/mac
    x-schema-minimum: 0
    x-schema-maximum: 127
    description: |
      The MS/TP address of the meter's BACnet server.
  - name: /config/bacnet/server/mstp/max-mac
    description: |
      The maximum address used by any device connected to the same MS/TP
      network as this meter.  A value of 127 is safe, but setting it to
      the lowest address in use significantly increases MS/TP
      performance.
  - name: /config/bacnet/server/mstp/port
    x-schema-example: USB1:19200/8n1
    description: |
      The [serial-port](#tag/Glossary/Serial-Ports) to use for the MS/TP
      protocol.
  - name: /config/db
    description: |
      The database configuration.
  - name: /config/db/epoch
    x-schema-example: '1675276020'
    description: |
      The time when the meter started recording data.  This is a decimal
      [Unix timestamp](#tag/Glossary/Unix-Timestamp) string.

      The relevance of this resource is that other services in this API
      by default return accumulated register values relative to this
      time so that, at the time of the epoch, they all read 0.  Changing
      this value therefore changes the values reported by those
      services.  Similarly, user interfaces that use this API generally
      do not present data before the epoch, effectively providing a
      limit to the history visible to the user.

      Writing this resource does not change the data stored in the
      database.  In other words, the epoch generally can freely be moved
      forward or backward in time.  The only constraint is that the new
      epoch does have to be within the time range covered by the
      database.  If a future time is specified, it will automatically be
      capped to the time of the most recent row in the database.  If a
      time is specified that is older than the oldest row in the
      database, an error object is returned.  If this error occurs,
      check the device time ([/sys/time](#tag/systime)) and database
      configuration ([/sys/db](#tag/sysdb)) to confirm that they have
      the expected values.
  - name: /config/display
    description: |
      The display (LCD) configuration of the meter.
  - name: /config/display/backlight
    description: |
      The backlight configuration of the display.
  - name: /config/display/backlight/brightness
    x-schema-minimum: 0
    x-schema-maximum: 255
    description: |
      The brightness of the backlight.  Zero is darkest (backlight off),
      255 is the brightest.
  - name: /config/display/backlight/duration
    x-schema-format: int32
    x-schema-minimum: -1
    x-schema-maximum: 2147483647
    x-schema-example: 60
    description: |
      The number of seconds the backlight should remain on after the
      last activation of the display navigation buttons.  Zero means the
      backlight is always off.  The special value -1 indicates that the
      backlight remains on at all times.
  - name: /config/display/contrast
    x-schema-minimum: 0
    x-schema-maximum: 127
    x-schema-example: 65
    description: |
      The LCD contrast Zero means no contrast (display is blank), 127
      means maximum contrast (display is all black).  A value of around
      65 usually provides a good contrast.
  - name: /config/display/fontset
    x-schema-enum:
      - small
      - normal
      - large
    x-schema-example: normal
    description: |
      The fontset to use for the display.  Possible values are:

        * `small`: Smaller than the `normal` fontset, this is a lower
          quality fontset that can fit more text on the display.

        * `normal`: This fontset provides a good tradeoff between font
          quality and the amount of text that can fit on the display.
          This should work well for languages with relatively simple
          characters, such as English or French.

        * `large`: This fontset should work well for languages with more
          complex characters such as Korean or Chinese.

      **Note** The value of this resource needs to be localized
      (translated) before presenting it to a user.
  - name: /config/display/orientation
    x-schema-minimum: 0
    x-schema-exclusiveMaximum: 360
    x-schema-example: 90
    description: |
      The angle in degrees by which the orientation of the display
      should be rotated in the counterclockwise direction.  An angle of
      0 degree results in the display being aligned with the label on
      the meter.  The value of this resource is rounded to an integer
      multiple of 90 degrees.
  - name: /config/display/screen
    x-schema-description: Screen configurations.
    x-schema-example:
      use: ic
      gen: ic
      Grid: ic
      Solar: ic
      temp: i
      .default: ''
    description: |
      Screen configurations.  At this time, only the registers screen
      is configurable.
  - name: /config/display/screen/registers
    x-schema-description: The register screen configuration.
    description: |
      The configuration of the registers screen - a screen that cycles
      through a list of registers, displaying their values.
  - name: /config/display/screen/registers/{name}
    x-schema-example: ic
    description: |
      Specifies how the named register is to be displayed.
      The following characters may appear in this string:

        * `i`: The instantaneous (rate of change) value of the register
          should be displayed.

        * `c`: The accumulated (cumulative) value of the register should
        be displayed.

      Note that an empty string imples that the register is not
      displayed at all

      For the special keyword `.default`, this establishes how registers
      should be displayed that are not mentioned otherwise.
  - name: /config/language_code
    x-schema-example: en_GB
    description: |
      The code of the preferred language for the meter.  When the meter
      needs to generate a message (e.g., as a result of an alert
      triggering), it will generate the message in the language selected
      by this code whenever possible.  The code should be in a format
      acceptable to the
      [`setlocale()`](https://linux.die.net/man/3/setlocale) function.
      Language codes currently supported include:

        * `de`: German.

        * `en`: US English (defaults to 12-hour clock and imperial units).

        * `en_GB`: British English (defaults to 24-hour clock and metric units).

        * `es`: Spanish.

        * `fr`: French.

        * `he`: Hebrew.

        * `it`: Italian.

        * `ko`: Korean.

        * `pl`: Polish.

        * `zh_Hans`: Simplified Chinese (Mandarin).

        * `zh_Hant`: Traditional Chinese (Cantonese).

      See [eGauge Internationalization
      Instructions](https://www.egauge.net/i18n/) for information on
      adding other languages or improving an existing translation.

      **Note** When accessing the meter from a web browser, the value of
      this resource has normally no effect as the user interface is
      presented in the language selected by the browser.
  - name: /config/local
    description: |
      The configuration of directly attached sensors.
  - name: /config/local/gain
    x-schema-enum:
      - normal
      - high
    description: |
      The amplifier gain to use for the local sensor inputs (`S1` and
      up).  All meters support the value `normal`.  Model EG4*xxx* meters
      also support the value `high`. This gain increases the input gain
      to approximately ten times of the normal gain.  That is, the
      sensors are approximately 10 times more sensitive than normal, at
      the expense of having a 10 times smaller range.
  - name: /config/local/sensor
    x-schema-example:
      L1:
        channel:
          bias: 0
          mode: normal
          scale: -74.013999939
        error: 0
        model: '1:1'
        phase: ''
      S1:
        channel:
          bias: 0
          mode: normal
          scale: -206.659896851
        error: 0
        model: ML-SCT-019-0100
        phase: 2.96@1.5:2.59@3:2.34@6:2.06@15:1.82@50:1.89@100
      S2:
        channel:
          bias: 0
          mode: normal
          scale: -206.659896851
        error: 0
        model: ML-SCT-019-0100
        phase: 2.96@1.5:2.59@3:2.34@6:2.06@15:1.82@50:1.89@100
    description: |
      The sensor configurations.
  - name: /config/local/sensor/{name}
    description: |
      The sensor configuration.
  - name: /config/local/sensor/{name}/channel
    description: |
      The A/D converter channel configuration of the named sensor.
  - name: /config/local/sensor/{name}/channel/bias
    x-schema-example: 0
    description: |
      The bias value (offset) to be added when converting an A/D
      converter sample to a physical quantity.
  - name: /config/local/sensor/{name}/channel/mode
    x-schema-enum:
      - 'off'
      - normal
      - integrate
    x-schema-example: normal
    description: |
      The channel's acquisition mode.  Possible values are:

        * `integrate`: The sample values are integrated over time.

        * `normal`: The sensor is operating in normal mode.

        * `off`: The sensor is not in use.
  - name: /config/local/sensor/{name}/channel/scale
    x-schema-example: -206.66
    description: |
      The scale value by which an A/D converter sample is to be
      divided to convert a sample to a physical quantity (the bias
      value is added to the sample before the scale is applied).
  - name: /config/local/sensor/{name}/error
    x-schema-example: 0
    description: |
      The attached sensor's relative output error (ratio error) in
      percent. For example, a value of 2.5 would indicate that the
      sensor is reading 2.5% higher than nominal. This value is ignored
      if member `model` is `CTid`.
  - name: /config/local/sensor/{name}/model
    x-schema-example: ML-SCT-019-0100
    description: |
      The model name of the attached sensor. If this is `CTid`, a
      CTid®-enabled sensor is attached and the [/ctid](#tag/ctid)
      service should be used to obtain details about the attached
      sensor.
  - name: /config/local/sensor/{name}/phase
    x-schema-example: 2.59@3:2.34@6:2.06@15:1.89@100
    description: |
      The phase (timing) adjustment required by the attached sensor.
      This value is ignored if member `model` is `CTid`.

      The format of this string is a colon-separated list of phase- and
      amplitude-level pairs of the form `p@l`, where `p` is the
      phase-adjustment in degrees at 60Hz, and `l` is a percentage of
      the sensor's full scale value.  For example, for a 100A current
      sensor, the phase string `1@1:0.75@50` would indicate that the
      phase needs to be adjusted by 1 degree at 1A and by 0.75 degrees
      at 50A.
  - name: /config/local/update-interval
    x-schema-example: 500
    description: |
      The interval in milliseconds between measurement updates.  The
      default is 1000ms (one update per second) but some meters support
      smaller values.  The rate of change values are averaged over this
      period of time.
  - name: /config/location
    description: |
      The geographic location of the meter.
  - name: /config/location/latitude
    x-schema-example: 36.035
    description: |
      The latitude of the meter's location in degrees.  Positive values
      are north of the equator, negative values south of it.
  - name: /config/location/longitude
    x-schema-example: -115.46639
    description: |
      The longitude of the meter's location in degrees.  Positive values
      are east of the prime meridian, negative values are west of it.
  - name: /config/log
    description: |
      The log configuration.
  - name: /config/log/system
    description: |
      The system log configuration.
  - name: /config/log/system/size
    x-schema-example: 131072
    description: |
      The size of the system log buffer in bytes.  When writing this
      value, it is rounded up to the nearest kilobyte boundary.  A size
      of 0 disables the system log.  Otherwise, the size is rounded up
      to a minimum of 4KiB.
  - name: /config/lua
    description: |
      Lua scripting configuration.
  - name: /config/lua/script
    description: |
      Lua scripts.
  - name: /config/lua/script/alertd
    x-schema-example: print("this is the alert script");
    description: |
      The Lua script loaded by alert reporting daemon.  This script can
      be used to define helper functions that can then be called from
      the alert conditions.

      If loading this script takes longer than 15 seconds or evaluating
      any custom alert condition takes longer than 60 seconds, an alert
      is raised.
  - name: /config/lua/script/tariff
    x-schema-example: print("this is the tariff script");
    description: |
      The Lua script used to calculate energy cost.  This script can be
      modified only if [server-storage](#tag/store) variable
      `global/billing/tariff_uri` is empty or unset.

      If loading this script takes longer than 15 seconds or evaluating
      the register formulas takes longer than half the
      [update-interval](#tag/configlocalupdate-interval), an alert is
      raised.
  - name: /config/lua/script/teamd
    x-schema-example: print("this is the formulas script");
    description: |
      The Lua script loaded by the register calculator.  This script can
      be used to define helper functions that can then be called from
      register formulas.

      If loading this script takes longer than 15 seconds or evaluating
      the register formulas takes longer than half the
      [update-interval](#tag/configlocalupdate-interval), an alert is
      raised.
  - name: /config/lua/ctrld
    x-schema-example:
      test: print("this is control script test");
    description: |
      The control scripts.  Control scripts generally run indefinitely.
      The more control scripts exist, the slower they will execute.  If
      a control script voluntarily terminates execution, it is restarted
      automatically after five seconds.  If a control script is updated,
      its execution is automatically restarted.
  - name: /config/lua/ctrld/{script}
    x-schema-example: print("this is control script test");
    description: |
      The control script.
  - name: /config/modbus
    description: |
      [Modbus](https://www.modbus.org/)-related configurations.
  - name: /config/modbus/client
    description: |
      Modbus client configuration.  This is used by the meter to
      communicate with other Modbus devices.
  - name: /config/modbus/client/map
    x-schema-example:
      user_dev:
        option:
          default-modbus-addr: '2'
          default-serial-params: 9600/8n1
        reg:
          - name: irradiance
            addr: 0
            type: u32
            kind: analog
            unit: W
            offset: 0
            scale: 0.1
            access: ro
          - name: temp
            addr: 1
            type: s32
            kind: analog
            unit: degC
            offset: 0
            scale: 0.01
            access: ro
    description: |
      User-defined Modbus address maps.  The builtin, read-only system
      maps are available at
      [/sys/modbus/client/map](#tag/sysmodbusclientmap).  If a
      user-defined map with the same name as a system map exists, it
      will shadow (mask) the system map with them same name.
  - name: /config/modbus/client/map/{name}
    x-schema-example:
      option:
        default-modbus-addr: '2'
        default-serial-params: 9600/8n1
      reg:
        - name: irradiance
          addr: 0
          type: u32
          kind: analog
          unit: W
          offset: 0
          scale: 0.1
          access: ro
        - name: temp
          addr: 1
          type: s32
          kind: analog
          unit: degC
          offset: 0
          scale: 0.01
          access: ro
    description: |
      Modbus map consisting of a list of register definitions and a set
      of options.
  - name: /config/modbus/client/map/{name}/option
    x-schema-example:
      default-modbus-addr: '2'
      default-serial-params: 9600/8n1
    description: |
      A set of options.  The meter currently supports the following
      options:

        * `default-modbus-addr`: The Modbus unit-number to use by
        default.  This must be a decimal string.  For example: `"1"`.

        * `default-serial-params`: The default serial parameters to use
        when the remote device is connected via a serial port
        (Modbus/RTU).  This must be a string.  For example: `"9600/8n1"`
        for 9600 baud, 8 databits, no parity, 1 stop bit.

        * `default-tcp-port`: The default TCP port number to use when
        the remote device is connected via Modbus/TCP.  This must be a
        decimal string.  For example: `"6001"`.
  - name: /config/modbus/client/map/{name}/option/{opt}
    x-schema-example: 9600/8n1
    description: |
      The value of the Modbus map option.
  - name: /config/modbus/client/map/{name}/reg
    description: |
      A list of Modbus register definitions.
  - name: /config/modbus/client/map/{name}/reg/{idx}
    description: |
      A Modbus register definition.
  - name: /config/modbus/client/map/{name}/reg/{idx}/name
    x-schema-example: irradiance
    description: |
      The name of the register.  The user can choose this name freely so
      long as each register within a map has a unique name.
  - name: /config/modbus/client/map/{name}/reg/{idx}/addr
    x-schema-minimum: 0
    x-schema-maximum: 65535
    description: |
      The Modbus address of the register.
  - name: /config/modbus/client/map/{name}/reg/{idx}/type
    x-schema-example: u32
    x-schema-enum:
      - bit
      - s16
      - u16
      - s32
      - u32
      - s32l
      - u32l
      - s64
      - u64
      - float16
      - float16l
      - float
      - floatl
      - double
    description: |
      The type of the register value.  This may be one of the following:

        * `bit`: One-bit value (a coil, in Modbus terminology).
        * `s16`: Signed 16-bit integer.
        * `u16`: Unsigned 16-bit integer.
        * `s32`: Signed 32-bit integer.
        * `u32`: Unsigned 32-bit integer.
        * `s32l`: Signed 32-bit integer, word-swapped.
        * `u32l`: Unsigned 32-bit integer, word-swapped.
        * `s64`: Signed 64-bit integer.
        * `u64`: Unsigned 64-bit integer.
        * `float16`: IEEE-754 half-precision float.
        * `float16l`: IEEE-754 half-precision floating point,
          little-endian (byte-swapped).
        * `float`: IEEE-754 single-precision float.
        * `floatl`: IEEE-754 single-precision float, word-swapped.
        * `double`: IEEE-754 double-precision float.
  - name: /config/modbus/client/map/{name}/reg/{idx}/kind
    x-schema-enum:
      - analog
      - enum
      - bitset
    description: |
      The kind of the register. Possible values are:

        * `analog`: The value is continuous (the average of two values is
          meaningful).

        * `enum`: The value is discrete (the average of two values is not
          meaningful).  An example for this would be a numeric error code.

        * `bitset`: Each bit in the value is a discrete on/off value.
        An example for this would be a set of error flags.
  - name: /config/modbus/client/map/{name}/reg/{idx}/unit
    x-schema-example: W
    description: |
      For register of the `analog` kind, this defines the physical unit of
      the register value.  This must be one of the following:

        * `#3`: Unit-less number with 3 decimal digits of precision.
        * `%`: Percentage.
        * `A`: Electric current in amperes.
        * `Ah`: Electric charge in ampere-hours.
        * `As`: Electric charge in ampere-seconds.
        * `C`: Temperature in degree celsius.
        * `Degrees`: Angle in degrees.
        * `Hz`: Frequency in hertz.
        * `Ohm`: Resistance in ohm.
        * `Pa`: Pressure in pascals.
        * `Pct`: Percentage.
        * `RH`: Relative humidity.
        * `Tmd`: Time in days.
        * `Tmh`: Time in hours.
        * `Tms`: Time in seconds.
        * `VA`: Apparent power in volt-amperes.
        * `VAh`: Apparent energy in volt-ampere-hours.
        * `V`: Electric potential in volts.
        * `W/m2`: Irradiance in watts-per-square-meter.
        * `W/m^2`: Irradiance in watts-per-square-meter.
        * `W`: Power in watts.
        * `Wh`: Energy in watt-hours.
        * `degC`: Temperature in degree celsius.
        * `deg`: Angle in degrees.
        * `g`: Mass in grams.
        * `hPa`: Pressure in hecto-pascals.
        * `h`: Time in hours.
        * `kAh`: Electric charge in kilo-ampere-hours.
        * `kO`: Resistance in kilo-ohms.
        * `kPa`: Pressure in kilo-pascals.
        * `kVAh`: Apparent energy in kilo-volt-ampere-hours.
        * `kW`: Power in kilo-watts.
        * `kWh`: Energy in kilo-watt-hours.
        * `kg`: Mass in kilo-grams.
        * `kvarh`: Reactive energy in kilo-volt-ampere-hours.
        * `m/s`: Speed in meters-per-second.
        * `m3/s`: Volume flow in cubic-meters-per-second.
        * `m3`: Volume in cubic-meters.
        * `mA`: Electric current in milli-amperes.
        * `mAh`: Electric charge in milli-ampere-hours.
        * `mSecs`: Time in milli-seconds.
        * `mV`: Electric potential in milli-volts.
        * `mV`: Electric potential in milli-volts.
        * `m^3/s`: Volume flow in cubic-meters-per-second.
        * `m^3`: Volume in cubic-meters.
        * `meters`: Distance in meters.
        * `mm`: Distance in milli-meters.
        * `mps`: Speed in meters-per-second.
        * `ms`: Time in milli-seconds.
        * `ohms`: Resistance in ohm.
        * `ppm`: Parts-per-million.
        * `s`: Time in seconds.
        * `secs`: Time in seconds.
        * `var`: Reactive power in volt-ampere.
        * `varh`: Reactive energy in volt-ampere-hours.
        * `°C`: Temperature in degree celsius.
  - name: /config/modbus/client/map/{name}/reg/{idx}/offset
    description: |
      An offset value that is used to convert the Modbus register value
      to a value in the specified physical unit.  Specifically, when the
      Modbus value of the register is *reg*, then corresponding physical
      value *phys* is calculated as:

        > *phys* = (*reg* + `offset`) * `scale`

      where `offset` is the value defined here and `scale` is
      the value defined for member `scale`.
  - name: /config/modbus/client/map/{name}/reg/{idx}/scale
    x-schema-example: 0.1
    description: |
      A scale value that is used to convert the Modbus register value
      to a value in the specified physical unit.  Specifically, when the
      Modbus value of the register is *reg*, then corresponding physical
      value *phys* is calculated as:

        > *phys* = (*reg* + `offset`) * `scale`

      where `scale` is the value defined here and `offset` is
      the value defined for member `offset`.
  - name: /config/modbus/client/map/{name}/reg/{idx}/access
    x-schema-enum:
      - ro
      - rw
    description: |
      The access-mode of the register.  It must be one of:
        * `ro`: read-only
        * `rw`: read-write
  - name: /config/modbus/server
    description: |
      Modbus server configuration.  This configures the server-side of
      the meter.  That is, it defines how the meter provides its own
      data to other Modbus devices.
  - name: /config/modbus/server/enable
    description: |
      The list of protocols (if any) that are enabled in the Modbus
      server. An empty list indicates that the Modbus server is
      disabled.

      Valid protocol names are:

        * `rtu`: The
          [Modbus/RTU](https://modbus.org/docs/Modbus_over_serial_line_V1_02.pdf)
          protocol.

        * `tcp`: The
          [Modbus/TCP](https://modbus.org/docs/Modbus_Messaging_Implementation_Guide_V1_0b.pdf)
          protocol.
  - name: /config/modbus/server/enable/{idx}
    x-schema-enum:
      - rtu
      - tcp
    description: |
      The name of a protocol that is enabled.
  - name: /config/modbus/server/id
    x-schema-minimum: 1
    x-schema-maximum: 247
    description: |
      The address of the meter on the Modbus/RTU network. Every Modbus
      device must have a unique address. The default unit id is 1.

      **Note** Address 0 is the broadcast address and addresses 248..255
      are reserved for future use.
  - name: /config/modbus/server/rtu
    description: |
      The RTU protocol configuration.
  - name: /config/modbus/server/rtu/port
    x-schema-example: USB2:9600/8o2
    description: |
      The [serial-port](#tag/Glossary/Serial-Ports) to use for the RTU
      protocol.
  - name: /config/modbus/server/tcp
    description: |
      The TCP protocol configuration.
  - name: /config/modbus/server/tcp/port
    x-schema-minimum: 0
    x-schema-maximum: 65535
    x-schema-example: 502
    description: |
      The IP port of the Modbus server.  The default value is 502.
  - name: /config/net
    description: |
      The network configuration.

      The current state of the network is available at
      [/sys/net](#tag/sysnet).
  - name: /config/net/ethernet
    description: |
      The Ethernet configuration of the meter.
  - name: /config/net/ethernet/watchdog
    x-schema-example: true
    description: |
      Whether or not the Ethernet watchdog is enabled.  If enabled, the
      watchdog will reset the Ethernet's PHY chip and/or reload the
      Ethernet driver if it appears that the Ethernet link was lost.

      This should normally be set to `true`.
  - name: /config/net/goproxy
    description: |
      The Go proxy configuration of the meter.
  - name: /config/net/goproxy/enable
    description: |
      If `true`, the meter will connect to the Go proxy server.
  - name: /config/net/goproxy/server
    x-schema-example: proxy.egauge.io
    description: |
      The hostname of the Go proxy server.
  - name: /config/net/homeplug
    description: |
      HomePlug configuration.  This is used only by devices with
      built-in HomePlug power-line communication (egauge2, EG3*x*10 and
      EG41*xx*).
  - name: /config/net/homeplug/region
    x-schema-enum:
      - CE
      - NA
    description: |
      The jurisdiction the meter is operating under.  The possible values are:

        * `CE`: European Union region.
        * `NA`: North American region.

      This resource controls the frequency bands used by the HomePlug
      communications interface that is built into some meters.  For
      those meters, this resource must be set to the correct geographic
      region to ensure compliance with local laws.
  - name: /config/net/hostname
    x-schema-example: eGauge42
    description: |
      The hostname of the meter.  Must consist of ASCII letters, digits,
      and dashes only.
  - name: /config/net/http
    x-schema-example:
      cgi-bin: user-required
      client:
        insecure: 'false'
    description: |
      Web (HTTP) related configurations.

      Modification requests (`PUT`, `POST`, and `DELETE`) to this
      resource are not executed
      [transactionally](#tag/Glossary/Non-Transactional-Updates).
  - name: /config/net/http/certificate
    description: |
      The certificate used by the web server to identify itself over
      HTTPS connections.

      This resource is write-only.

      The string is in [PEM
      format](https://en.wikipedia.org/wiki/X.509#Certificate_filename_extensions)
      and must contain both a private key as well as the matching
      certificate chain.
  - name: /config/net/http/client
    description: |
      Configuration for meter-initiated HTTP connections.
  - name: /config/net/http/client/insecure
    x-schema-example: false
    description: |
      If `true`, meter-initiated secure HTTPS connections will accept
      servers whose certificate cannot be validated by the meter.  This
      should normally be set to `false`.
  - name: /config/net/http/cgi-bin
    x-schema-enum:
      - disable
      - user-optional
      - user-required
    description: |
      Controls access to CGI-BIN programs.  The following values are supported:

        * `disable`: Completely disable access to CGI-BIN programs.
        **Warning** This will render the classic user-interface of the
        meter inoperable.

        * `user-required`: Allow authenticated users to access CGI-BIN programs.

        * `user-optional`: Allow even unauthenticated users to access
          CGI-BIN programs that are not considered security critical.
  - name: /config/net/ipv4
    description: |
      The Internet Protocol v4 ([IPv4](https://www.rfc-editor.org/rfc/rfc791))
      configuration.
  - name: /config/net/ipv4/dhcp
    description: |
      Whether or not to use [DHCP](https://www.ietf.org/rfc/rfc2131.txt)
      to automatically provision the IPv4 address.  If `true`, DHCP is
      enabled. If `false`, the manually configured IPv4 settings are
      used.
  - name: /config/net/ipv4/address
    x-schema-example: 192.168.1.42
    description: |
      An IPv4 address in dotted decimal notation.
  - name: /config/net/ipv4/broadcast
    x-schema-example: 192.168.1.255
    description: |
      An IPv4 broadcast address in dotted decimal notation.
  - name: /config/net/ipv4/netmask
    x-schema-example: 255.255.255.0
    description: |
      The address of the IPv4 gateway in dotted decimal notation.
  - name: /config/net/ipv4/network
    x-schema-example: 192.168.1.0
    description: |
      The IPv4 network mask in dotted decimal notation.
  - name: /config/net/ipv4/gateway
    x-schema-example: 192.168.1.1
    description: |
      The IPv4 network number in dotted decimal notation.
  - name: /config/net/nameserver
    description: |
      The name server ([DNS](https://www.ietf.org/rfc/rfc1035.txt))
      configuration.
  - name: /config/net/nameserver/server
    x-schema-example:
      - 1.1.1.1
      - 8.8.8.8
      - 2606:4700:4700::1111
    description: |
      The IP addresses to use as name servers. If multiple name servers
      are specified, they are queried in the order in which they appear
      here.
  - name: /config/net/nameserver/server/{idx}
    x-schema-example: 1.1.1.1
    description: |
      The IPv4 or IPv6 address a DNS server.
  - name: /config/net/ntp
    description: |
      The Network Time Protocol
      ([NTP](https://www.rfc-editor.org/rfc/rfc5905)) configuration.
  - name: /config/net/ntp/server
    x-schema-example:
      - 192.168.1.1
      - north-america.pool.ntp.org
      - 2610:20:6f15:15::27
    description: |
      The NTP servers to use.
  - name: /config/net/ntp/server/{idx}
    x-schema-example: north-america.pool.ntp.org
    description: |
      The hostname or an IPv4 or IPv6 address of an NTP server.
  - name: /config/net/proxy
    description: |
      The proxy configuration of the meter.
  - name: /config/net/proxy/enable
    description: |
      If `true`, the meter will connect to the proxy server.
  - name: /config/net/proxy/server
    x-schema-example: d.egauge.net
    description: |
      The hostname of the proxy server.
  - name: /config/net/ptp
    x-schema-description: |
      The Precision Time Protocol
      ([PTP](https://www.rfc-editor.org/rfc/rfc8173.html))
      configuration.
    description: |
      The Precision Time Protocol
      ([PTP](https://www.rfc-editor.org/rfc/rfc8173.html))
      configuration.  NTP should normally be disabled when using this
      protocol. This can be achieved by deleting resource
      [/config/net/ntp/server](#tag/conifgnetntpserver).

      Only model EG4*xxx* or newer meters support this resource.

      The following properties of the PTP service are currently fixed:

        * **Update method**: Two Step
        * **Delay Mechanism**: End to End
        * **Domain Number**: 0
        * **Priority 1**: 128
        * **Priority 2**: 128
        * **Transmission Method**: Multicast
        * **Log Announce Interval**: 1 (2 seconds)
        * **Log Sync Interval**: 0 (1 second)
        * **Log Min Delay Request Interval**: 0 (1 second)
        * **Log Min PDelay Request Interval**: 0 (1 second)
        * **PTP Destination MAC**: 01:1B:19:00:00:00
        * **PTP Destination MAC**: 01:80:C2:00:00:0E
        * **Transport Specific Field**: 0
  - name: /config/net/ptp/client_only
    description: |
      If `true`, the meter will only act as a client.  Otherwise, the
      meter will also act as a server if the PTP algorithm selects it as
      the best clock.
  - name: /config/net/ptp/interface
    x-schema-example:
      eth0:
        transport: UDPv4
    description: |
      The network interface configurations for PTP. If empty, PTP is disabled.
  - name: /config/net/ptp/interface/{if}
    description: |
      The configuration to use for the named interface.
  - name: /config/net/ptp/interface/{if}/transport
    x-schema-enum:
      - L2
      - UDPv4
      - UDPv6
    description: |
      The network transport to use for the interface. Possible values are:

        * `UDPv4`: UDP over IPv4.
        * `UDPv6`: UDP over IPv6.
        * `L2`: Layer-2 transport (e.g., Ethernet).
  - name: /config/push
    x-schema-example:
      interval: 60
      options: json,gzip,epoch,sec,skip=59
      service: ''
      uri: https://push-service.com/data
      user: jsmith
    description: |
      The push service configuration.  This service is used to share the
      meter data with a remote web server.  The data is sent via an HTTP
      `POST` request.
  - name: /config/push/interval
    x-schema-example: 60
    x-schema-minimum: 1
    description: |
      The interval in seconds between push updates.  A value of 60, for
      example, would cause the push service to attempt to send data to
      the remote web server once a minute.
  - name: /config/push/options
    x-schema-example: json,gzip,epoch,sec,skip=59
    description: |
      The options controlling how data is pushed to the remote web
      server.  Multiple options must be separated by commas (`,`).

      This resource is available only if
      [/config/push/service](#tag/configpushservice) is an empty string.

      Available options are:

        * `day`: Data will be pushed with day granularity (at most one
          row of data per day).

        * `deflate`: Use the deflate algorithm to compress the push
          data.  This adds HTTP header `Content-Encoding: deflate` to
          the `POST` request.

        * `epoch`: Report the register values relative to the
          [epoch](#tag/configdbepoch).  Without this option, absolute
          values are sent which start at zero at the time the meter
          database was created.

        * `gzip`: Use the gzip algorithm to compress the push data.
          This adds HTTP header `Content-Encoding: gzip` to the `POST`
          request.

        * `json`: Push data in JSON format instead of XML.  The JSON
          format is the same as the one returned by the
          [/register](#tag/register) service, except that the top-level
          `ts` section and the `idx` members in the `registers` section
          are omitted since they are not meaningful for push data.

        * `hour`: Data will be pushed with hour granularity (at most one
          row of data per hour).

        * `max=n`: Pushed at most `n` rows in a single `POST` request.
          This limit must be in the range from 1 to 900.

        * `old_first`: Push the oldest data row first.  By default, the
          youngest data row is pushed first.

        * `sec`: Data will be pushed with second granularity (at most
          one row of data per second).

        * `secure`: If this option is present, secure connections to the
          remote web server are allowed only if the server possesses a
          certificate that the meter can verify as authentic.  Without
          this option, the server's certificate is not verified.  This
          option is ignored if
          [/config/net/http/client/insecure](#tag/confignethttpclientinsecure)
          is `true`.

        * `skip=n`: Push only every `(n+1)`-th data row.  For example,
          with hour granularity and skip=2, data rows would be spaced
          apart by (at least) 3 hours.  They may be spaced apart more
          depending on the rows that are available in the database.

        * `totals`: Push not just the physical registers but also the
          virtual registers.

      By default, data is pushed with minute granularity (at most one
      row of data per minute).
  - name: /config/push/password
    x-schema-example: secret!
    description: |
      The password to be provided to the remote web server for
      authentication purposes.  The password is submitted to the remote
      web server as part of a
      [Basic](https://www.rfc-editor.org/rfc/rfc7617) HTTP
      `Authorization` header.  For this reason, a password should only
      be specified when using a secure connection (`https` scheme).

      This resource is available only if
      [/config/push/web/service](#tag/configpushservice) is an empty
      string.

      This resource is write-only.
  - name: /config/push/service
    description: |
      The name of a push service provider to shared data with.  After
      writing this resource with a non-empty string, the service needs
      to be activated in a separate step.

      **TODO**: SHOW HOW TO DO THIS.
  - name: /config/push/uri
    x-schema-example: https://push-service.com/data
    description: |
      The URI of the web server to share data with.  This resource is
      available only if [/config/push/service](#tag/configpushservice)
      is an empty string.
  - name: /config/push/user
    x-schema-example: jsmith
    description: |
      The user name to provide to the web server for authentication
      purposes.  If this string is not empty, the user name and the
      password are both sent to the web server as part of a
      [Basic](https://www.rfc-editor.org/rfc/rfc7617) HTTP
      `Authorization` header.

      This resource is available only if
      [/config/push/web/service](#tag/configpushservice) is an empty
      string.
  - name: /config/register
    description: |
      The register configuration of the meter.
  - name: /config/register/physical
    x-schema-description: |
      The physical register configuration of the meter.
    x-schema-example:
      grid:
        dev: local
        did: 0
        type: P
        value: S16*L1+S17*L2
      grid*:
        dev: local
        did: 8
        type: S
        value: grid
      solar:
        dev: local
        did: 1
        type: P
        value: S3*L1+-S3*L2
      temp:
        dev: SMANet
        did: 12
        type: T
        value: 13590.TmpAmb_C
    description: |
      The physical register configuration of the meter.

      A register is a named measurement whose values are recorded in a
      database at discrete points in time (the database rows).  There is
      an upper limit on the number of physical registers that can be
      supported by the meter.  Depending on meter model and database
      configuration, typically, 16 to 64 phycial registers are
      available. The actual limit is available at
      [/sys/db/max-registers](#tag/sysdbmax-registers).
  - name: /config/register/physical/{reg}
    description: |
      The configuration of the named physical register.
  - name: /config/register/physical/{reg}/dev
    x-schema-example: local
    description: |
      The name of the device that is the source of the register values.
      The name `local` indicates that the meter itself measures or
      calculates the value.  Any other value is a reference to the
      remote device of the same name defined at
      [/config/remote](#tag/configremote).
  - name: /config/register/physical/{reg}/did
    x-schema-minimum: 0
    description: |
      The column number in which the database stores the register value.
      Each physical register has a unique column number.  If a register
      is renamed, this number remains the same.  On the other hand, if a
      register is deleted and then another one is added back, the new
      one may get assigned the column number of the old, deleted
      register.

      Each physical register must have a unique value.  Invalid values
      automatically get remapped to an unused index.
  - name: /config/register/physical/{reg}/type
    x-schema-example: P
    description: |
      The [type code](#tag/Glossary/Type-Codes) of the register.
  - name: /config/register/physical/{reg}/value
    x-schema-example: S16*L1+S17*L2
    description: |
      Defines the how the register value is obtained or calculated.  For
      register where `dev` is `local`, this is one of:

        * A [local](#tag/local) sensor name: `L1`-`L3`, `Ldc`, or
          `S1`-`S30`.

        * A power formula written as a sum of products of sensors.  For
          example, `S1*L1+S2*L2` would indicate that the register value
          is calculated as the real power measured by current sensor
          `S1` and line-voltage `L1` plus the real power measured by
          current sensor `S2` and line-voltage `L2`.  Note that even
          though the real power calculation is indicated by an asterisk,
          it is actually calculated by averaging the product of the
          instantaneous current and voltage samples, not by multiplying
          the RMS voltages of `S1` and `L1`.  The first factor of each
          real power calculation may also be negated.  For example,
          `-S1*L2` would yield the negative of the real power calculated
          by `S1*L2`.

        * An equal sign (`=`) followed by an
          [eScript](#tag/Glossary/eScript) expression.  The register
          value is obtained by evaluating the eScript expression once
          per [update interval](#tag/configlocalupdate-interval).
          Non-finite numbers (e.g., not-a-number, or infinities) are
          silently converted to 0 before recording the register value.

      For registers where `dev` is not `local`, so-called _remote_
      registers, the value is interpreted in a way that is specific to
      the particular remote device in use.  Commonly, the value is some
      sort of register name or identifier.  For example, for Modbus
      remote devices, the value is a register name defined by the
      [Modbus map](#tag/sysmodbusclientmap) of the remote device.
  - name: /config/register/virtual
    x-schema-example:
      use:
        value:
          - op: +
            register: grid
          - op: +
            register: solar
      gen:
        value:
          - op: +
            register: solar
    description: |
      The virtual register configuration of the meter.

      Virtual registers are calculated from physical register values and
      do not take up space in the database.  As such there is no a
      priori limit on the number of virtual registers that can be
      configured on a meter.
  - name: /config/register/virtual/{reg}
    description: |
      The virtual register configuration.

      Several virtual register names are well-known and provide special
      semantics:

        * `use`: Intended to represent total power consumption at a
          site.  It is generally presented with the name `Usage` in
          English and the equivalent translation in other languages
          (subject to availablility).

        * `gen`: Intended to represent total power generation at a site,
          e.g., from local solar or wind power generation facilities.
          It is generally presented with the name `Generation` in
          English and the equivalent translation in other languages
          (subject to availability).

        * `bat`: Intended to represent total power coming from on-site
          batteries (if positive) or power going to on-site batteries
          for charging (if negative).  It is generally presented with
          the name `Battery` in English and the equivalent translation
          in other languages (subject to availability).

        * `bat_el`: Intended to represent the amount of _energy left_ in
          on-site batteries.  The value of this register should be equal
          to the sum of each battery's state of charge times the
          battery's capacity (in joules).  It is generally presented
          with the name `Battery left` in English and the equivalent
          translation in other languages (subject to availability).
  - name: /config/register/virtual/{reg}/value
    x-schema-example:
      - op: +
        register: grid
      - op: +
        register: solar
    description: |
      The formula to calculate the value of this virtual register.  It
      consists of a list of physical register names whose values are to
      be added or subtracted.
  - name: /config/register/virtual/{reg}/value/{idx}
    description: |
      An additive term of the virtual register formula.
  - name: /config/register/virtual/{reg}/value/{idx}/op
    x-schema-enum:
      - +
      - '-'
      - +max0
      - '-max0'
      - +min0
      - '-min0'
    x-schema-example: +
    description: |
      The operation that calculates the value of this addend.

      Possible values are:

        * `+`: The physical register value is to be added.

        * `-`: The physical register value is to be subtracted.

        * `+max0`, `-max0`, `+min0`, `-min0`:
        **[Deprecated](#tag/Glossary/Deprecated)**. These operators do
        not work correctly and remain only to preserve compatibility
        with existing, old, device configurations.  Attempting to write
        these operators with a `PUT` or `POST` request will result in an
        error.  They can only be returned as a result of a `GET` request.
        The intent of these operators was to add (`+max0`, `+min0`) or
        subtract (`-max0`, `-min0`) the maximum of the physical register
        value and 0 (`+max0`, `-max0`) or the minimum of the register value
        and 0 (`+min0`, `-min0`).
  - name: /config/register/virtual/{reg}/value/{idx}/register
    x-schema-example: grid
    description: |
      The name of the physical register to use in calculating the value
      of this addend.
  - name: /config/remote
    description: |
      _**To be implemented.**_
  - name: /config/time
    description: |
      Time related configurations.
  - name: /config/time/zone
    x-schema-example: LST7LDT6,M3.2.0/02:00,M11.1.0/02:00
    description: |
      The timezone the meter is located in.  The string is interpreted
      as a [Unix
      TZ](https://www.gnu.org/software/libc/manual/html_node/TZ-Variable.html)
      string.
  - name: /config/user
    x-schema-example:
      jsmith:
        priv:
          - unlimited_save
          - view_settings
      guest:
        priv:
          - view_settings
    x-schema-description: |
      The user accounts.
    description: |
      The user accounts.

      Each user account has a name, a set of
      [privileges](#tag/Glossary/User-Privileges), and the credentials
      (password) required to log into the account.
  - name: /config/user/{name}
    x-schema-example: jsmith
    description: |
      A user configuration (account).
  - name: /config/user/{name}/priv
    x-schema-example:
      - unlimited_save
      - view_settings
    description: |
      The list of [privileges](#tag/Glossary/User-Privileges) the user possesses.
  - name: /config/user/{name}/priv/{idx}
    description: |
      A [privilege](#tag/Glossary/User-Privileges) the user possesses.
  - name: /config/user/{name}/hash
    x-schema-example: 251910de04f5eab86859939167d4fded
    description: |
      The [hash](#tag/Glossary/Password-Hashes) of the user's password.
      Writing an empty hash string disables the account.

      This resource is write-only.
  - name: /cmd
    description: |
      The service provides the ability to execute various operations for
      their side effects, such as rebooting the meter.  Unless stated
      otherwise, the resources in this service are available only to
      users with the save right (see
      [/auth/rights](#tag/auth/operation/authRightsGet)).
  - name: /ctid
    description: |
      This service provides access to the
      [CTid®](https://docs.google.com/document/d/1DuqZYZKKnY83p68u0200WhZsyrrZhRLmeqJLs7fF4Sc/edit?usp=sharing)
      facility built into the EG4*xxx* series meters.  Specifically, it
      enables:


        1) retrieving the CTid® information from a sensor,

        1) flashing the (optional) locator LED on the sensor, and

        1) deleting the stored CTid® information associated with a
        sensor port.

      Note that while scanning or flashing a sensor, normal measurement
      of local sensors is suspended.  It is therefore recommended to use
      this service primarily during device setup.

      All methods other than `GET` required a user with the [save
      right](#tag/auth/operation/authRightsGet).

      ## Python Example

      A Python program illustrating the use of this service can be found
      [here](https://bitbucket.org/egauge/python/src/master/examples/test_ctid.py).
      This program takes advantage of class
      `egauge.webapi.device.CTidInfo` to handle the details of encoding
      the HTTP requests and decoding the responses.
  - name: /ctrl
    description: |
      This service provides a means to control devices.  The devices
      being controlled are usually attached to the meter through a cable
      or wirelessly and are, in that sense, remote.

      Only model EG4*xxx* or newer meters support this service.
  - name: /ctrl/call
    description: |
      This resource is used to issue control calls and to check on
      the status of a previously issued calls.
  - name: /ctrl/device
    description: |
      Provides information about devices that can
      accept control calls.  Each device is described by a set of
      name/value pairs called [device
      attributes](#tag/Glossary/Device-Attributes).
  - name: /ctrl/interface
    x-schema-example:
      modbus:
        method:
          - name: read_coils
            in: qq
            in_names:
              - addr
              - count
            out: ay
            doc: Read <arg>count</arg> number of coils starting with the coil at address <arg>addr</arg>. The return value is a Modbus reply packet which may contain an exception status or the requested coil values.
      relay:
        method:
          - name: close
            in: u
            in_names:
              - 'n'
            out: ''
            doc: Close the relay with index <arg>n</arg>.
          - name: open
            in: u
            in_names:
              - 'n'
            out: ''
            doc: Open the relay with index <arg>n</arg>.
    description: |
      The names and descriptions of control interfaces detected by the
      meter.
  - name: /ctrl/interface/{if}
    x-schema-example:
      method:
        - name: close
          in: u
          in_names:
            - 'n'
          out: ''
          doc: Close the relay with index <arg>n</arg>.
        - name: open
          in: u
          in_names:
            - 'n'
          out: ''
          doc: Open the relay with index <arg>n</arg>.
    description: |
      Description of the interface.
  - name: /ctrl/interface/{if}/method
    x-schema-example:
      - name: close
        in: u
        in_names:
          - 'n'
        out: ''
        doc: Close the relay with index <arg>n</arg>.
      - name: open
        in: u
        in_names:
          - 'n'
        out: ''
        doc: Open the relay with index <arg>n</arg>.
    description: |
      The array of methods provided by this interface.  The methods are
      listed in no particular order.
  - name: /ctrl/interface/{if}/method/{idx}
    x-schema-example:
      name: close
      in: u
      in_names:
        - 'n'
      out: ''
      doc: Close the relay with index <arg>n</arg>.
    description: |
      The description of this method.
  - name: /ctrl/interface/{if}/method/{idx}/name
    x-schema-example: close
    description: |
      The name of the method.  The name starts with a letter and consists
      entirely of letters, digits, or underscores.
  - name: /ctrl/interface/{if}/method/{idx}/in
    x-schema-example: u
    description: |
      The [DBus type
      signature](https://dbus.freedesktop.org/doc/dbus-specification.html#type-system)
      of the input arguments to the method. An empty string indicates
      that the method accepts no input arguments.
  - name: /ctrl/interface/{if}/method/{idx}/in_names
    x-schema-example:
      - 'n'
    description: |
      The names of the input arguments passed to the method.  Each
      argument name is meant to indicate the purpose of the respective
      argument but, other than that, it is arbitrary.  The documentation
      string given by member `doc` may also refer to these names.
      The `doc` member documentation for details.
  - name: /ctrl/interface/{if}/method/{idx}/in_names/{argidx}
    x-schema-example: 'n'
    description: |
      The name of this input argument.
  - name: /ctrl/interface/{if}/method/{idx}/out
    x-schema-example: ''
    description: |
      The [DBus type
      signature](https://dbus.freedesktop.org/doc/dbus-specification.html#type-system)
      of the return value of the method. An empty string indicates that
      the method returns no value.
  - name: /ctrl/interface/{if}/method/{idx}/doc
    x-schema-example: Close the relay with index <arg>n</arg>.
    description: |
      Description of the purpose and operation of the method. Within
      this string, references to input argument names are enclosed
      within `<arg>` and `</arg>` tags to facilitate highlighting of
      argument names.
  - name: /local
    description: |
      This service provides access to the values directly measured or
      derived from the sensors attached to the meter.  Values obtained
      from other, remote, devices are not accessible through this
      service.  Similarly, only the most recent (current) values are
      available.  Use the [/register](#tag/register) service for
      accessing values stored in the database of the meter.

      Derived values are called *energy* and *apparent energy* and are
      calculated from a pair of sensors. Specifically, energy values are
      calculated by numerically integrating over time the product of two
      sensor values. Similarly, apparent energy is calculated as the
      product of the normal (RMS) values of a pair of sensors.  For
      example, if one sensor value measures an electrical current and
      the other a voltage, these calculate the real electric energy and
      apparent electric energy of the measured current/voltage pair,
      respectively.

      This service guarantees to return an atomic snapshot of the
      measurements as of the time indicated by the timestamp in the
      response.  Various query parameters can be used to select the
      exact data that is to be returned.

      In particular, query parameters `values`, `energy`, `apparent`, or
      `stats` can be used to select which sections to include in
      the response.  If none of these are specified, only the `values`
      section is returned by default.

      Query parameters `rate`, `cumul`, or `type` can be used to select
      the metrics to return for each sensor.  If none of these are
      specified, the `rate` and `type` metrics are returned by default.

      Within the rate and cumulative metrics, query parameters `normal`,
      `mean`, or `freq` select what measurements to return.  If none of
      these are specified, all measurements are returned by default.

      Finally, the `env`, `l`, and `s` query parameters can be used to
      select which sensors to include in the response.  If none of these
      are specified, all sensors are included in the response by
      default.

      ## Python Example

      A Python program illustrating the use of this service can be found
      [here](https://bitbucket.org/egauge/python/src/master/examples/test_local.py).
      This program takes advantage of class `egauge.webapi.device.Local`
      to handle the details of encoding the HTTP requests and decoding
      the responses.
  - name: /log
    description: |
      Provides access to various logs.  Since logs may contain sensitive
      information, this service is available only to users with the
      `save` privilege (see
      [/auth/rights](#tag/auth/operation/authRightsGet)).
  - name: /lua
    description: |
      This service provides access to Lua-script related information.
  - name: /lua/var
    description: |
      The persistent Lua variables.  Such variables are non-volatile.
      That is, their value is preserved across script restarts and
      reboots (power-cycles).  Persistent variables can be created and
      manipulated with the built-in Lua module
      [`persistent`](https://www.egauge.net/support/lua/module/control).
  - name: /lua/var/{name}
    description: |
      A persistent Lua variable.
  - name: /lua/var/{name}/desc
    description: |
      A brief, user-friendly description of the purpose of this
      persistent variable.  This description is set when the persistent
      variable is created and is in the language chosen by the author of
      the Lua script that is created the variable.  The string is,
      therefore, not localized to the user's environment.
  - name: /lua/var/{name}/value
    description: |
      The current value of this persistent variable as a JSON-encoded
      string.

      While it is possible to write this value via the WebAPI, Lua
      scripts generally will also be updating the value as part of their
      execution, so any change in value may be temporary and whether or
      not a WebAPI write is detected by the scripts depends on the
      scripts themselves.
  - name: /providers
    description: |
      This service provides information about various third-party
      providers such as alert service providers, push data service
      providers, tariff information providers, and so on.  Since the
      information depends on third-party sites, a working Internet
      connection is generally required in order for this service to work
      properly.
  - name: /store
    description: |
      This service provides the ability to store arbitrary name/value
      pairs on the meter.  This is called server-side storage.

      The service implements a hierarchical name-space, with hierarchy
      levels separated by slash characters (`/`). The top-level is
      called a section, intermediate levels are called paragraphs, and
      leaves are called variables. For example, the path
      `global/default/currency_code` refers to variable `currency_code`
      in section `global`, paragraph `default`.

      Variables may also be stored at the section level.  The last
      character of a URL determines whether the URL refers to a
      section-level variable or a paragraph.  If the URL ends with a
      slash character (`/`), it refers to a paragraph, otherwise, it refers
      to a section-level variable.

      Names may contain lower- and upper-case ASCII letters, digits,
      dashes (`-`), underscores (`_`), and percent signs (`%`).

      Variable values may contain any UTF-8 codes except ASCII control
      codes (codes less than 0x20). Some variables may be defined as
      storing JSON-encoded values. For those, the value is limited to
      characters permissible by the [JSON grammar](https://www.json.org/).

      ## Well-known Variables

      What distinguishes server-storage variables from configuration
      settings is that the former are generally not used by the meter
      firmware. In other words, server-storage variables are used
      primarily by users of the WebAPI.  There are a few exceptions
      however:

        * `global/billing/start_day`: The meter firmware interprets this
          as the day of the month on which the utility company reads the
          utility meter.  The assumption is that the meter is read at
          noon on that day.  The value must be a decimal integer string
          in the range from 1-31.  If the billing day number is greater
          than the number of days in a particular month, it is assumed
          that utility meter is read on the last day of that month.

          The meter-firmware uses this, for example, to implement the
          `sob` [time point](#tag/Glossary/Time-Point-Names).

        * `global/billing/tariff_uri`: If not an empty string, this is
          interpreted as the URL from which to fetch a [Lua
          script](#tag/Glossary/Lua-Scripts) that calculates energy
          cost.  The meter will periodically poll this URL and download
          any available updates to the script.

        * `global/default/currency_symbol`: This is interpreted as the
          symbol to use for currency values.  This may be a single
          Unicode symbol such as `$` (Dollar) or `€` (Euro), or it may
          be a multi character string, such as `CHF` for Swiss Franc.
          The meter firmware uses the value of this variable when
          outputting the unit of monetary values.

      ## Size Limits

      Section names are limited to 64 bytes.  The total size of any
      section may not exceed 16 KiB.  The total size of the data in the
      store may not exceed 128 KiB.
  - name: /register
    description: |
      This service provides access to both current and past register
      values of the meter.  A register can be thought of as a named
      column in a database that tracks the value of a measurement over
      time.

      The database consists of rows of register values.  Each row has a
      timestamp indicating the time at which the measurements were
      taken.  The maximum numbers of the rows in the database is fixed
      and the rows are managed in a round-robin style.  Typically,
      meters can hold up to the most recent 60 years of rows in the
      database.  Older data is automatically dropped.

      Older data is stored with a coarser granularity than younger data.
      A typical database might store the most recent one year of data
      with 1 minute between rows, the next 9 years with 15 minutes
      between rows, and the next 50 years with 24-hours between rows.
      The actual database configuration of a meter can be found in
      [/sys/db](#tag/sysdb).

      ## Basic Usage

      This most simple use of this service is to fetch the current time
      of the meter.  This is accomplished with `GET /register?reg=none`:

        ```json
          {"ts": "1678475544.123"}
        ```

      Member `ts` returns the time as decimal string.  It is a [Unix
      timestamp](#tag/Glossary/Unix-Timestamp) that, converted to a
      human-readable format, corresponds to March 10, 2023, 19:12:24 and
      123ms in the UTC timezone.  If the meter is connected to the
      Internet, its time should usually be accurate (see
      [/config/net/ntp](#tag/confignetntp) and
      [/config/net/ptp](#tag/confignetptp)).  However, it is advisable
      for a client to check the time and confirm its reasonbly close to
      actual time as discrepancies could cause confusing and erroneous
      results.

      Without the `reg=none` query parameter, the service also returns
      information about the available registers.  `GET /register` might
      return a result looks like this:

        ```json
        {
          "ts": "1678475548.000",
          "registers": [
            { "name": "V1", "type": "V", "idx": 3, "did": 31 },
            { "name": "grid, "type": "P", "idx": 7, "did": 6 },
            { "name": "temp, "type": "T", "idx": 8, "did": 7 },
            { "name": "mask", "type": "#", "idx": 14, "did": 34 }
          ]
        }
        ```

        Member `registers` contains information about the registers
        configured on the meter.  The response shows that each register
        has a `name`, a [`type`](#tag/Glossary/Type-Codes) which defines
        the physical unit of that register, and several other attributes
        which will be explained in more detail later. In our example,
        there are registers called `V1`, measuring a voltage, `grid`
        measuring power, `temp` measuring a temperature, and `mask`
        which records a set of on/off flags.

        If we want to find out the current temperature, we can use the
        register index given by member `idx` of the `temp` register to
        ask for its current rate.  `GET /register?reg=8&rate` might
        return:

        ```json
        {
          "ts": "1678475551.932",
          "registers": [
            {"name": "temp, "type": "T", "idx": 8, "did": 7, "rate": 13.5629997}
          ]
        }
        ```

        If we look up type `T` in the [type code
        table](#tag/Glossary/Type-Codes), we find that the rate unit is
        °C, so the response indicates that the current temperature is
        about 13.6 °C or 56.4 °F.

        We might also be interested in knowing the average temperature
        over the last 24 hours.  For that, we need to request the
        recorded values for the current time (`now`) and 24 hours or
        86,400 seconds ago (`now-86400`).  This can be accomplished
        with `GET /register?reg=8&time=now,now-86400`:

        ```json
        {
          "ts": "1678477555.345",
          "registers": {"name": "temp", "type": "T", "idx": 8, "did": 7},
          "ranges": [
            { "ts": "1678477555.154", "delta":  1, "rows": [["7494425049"]]},
            { "ts": "1678391100",     "delta": 60, "rows": [["7033149079"]]}]
        }
        ```

        The first item returned in the `ranges` array is for the current
        time, the second for 24 hours ago.  Subtracting the two
        timestamps, we see that 86,455.154 seconds elapsed between them.
        The reason this isn't exactly 86,400 seconds is that the
        database records values at a certain granularity and it so
        happened that the older row was recorded at a minute boundary.

        If we subtract the decimal strings reported in the `rows`
        arrays, we can see that the recorded temperature value increased
        from 7,033,149,079 to 7,494,425,049 during that time &mdash; an
        increase of 461,275,970.  That's a big number, but what does it
        mean?  If we look up type code `T` in the [type
        code](#tag/Glossary/Type-Codes) table again, we see that the
        temperature quantum is 0.001 and the description there also
        explains how values are accumulated over time.  Thus, if we
        multiply the increase in value by the quantum and then divide
        by the elapsed time in seconds, we get:

        > _average temp_ = (461,275,970 · 0.001)°Cs / 86,455.154s = 5.335°C

        That is, the average temperature over the past 24 hours was
        about 5.3 °C or 42 °F.

      ## Python Example

      A Python program illustrating the use of this service can be found
      [here](https://bitbucket.org/egauge/python/src/master/examples/test_register.py).
      This program takes advantage of class
      `egauge.webapi.device.Register` to handle the details of encoding
      the HTTP requests and decoding the responses.  The class also takes
      care of:

        1) Converting rates, accumulated and average values to physical
        quantity objects that have a value and a unit.  These objects
        also can convert to different units, so if you'd like to output
        energy as british thermal units (Btu) or power as horsepower
        (hp), you can.

        1) Evaluating virtual registers.  The class automatically
        fetches the formulas of virtual register and then calculates
        them based on the physical register values as needed.
  - name: /remote
    description: |
      *To be implemented.*
  - name: /sys
    description: |
      System information.  Everything here is read-only.

      Accessing this service requires the [view_settings
      privilege](#tag/Glossary/User-Privileges).
  - name: /sys/alert
    x-schema-example:
      - id: badid
        reason: Unknown alert
      - id: pxyup
        reason: Proxy-connection established
      - id: pxydn
        reason: Proxy-connection lost
      - id: cfgchg
        reason: Device-configuration changed
    description: |
      Descriptions of the system-generated alerts.
  - name: /sys/alert/{idx}
    description: |
      Description of a system alert.
  - name: /sys/alert/{idx}/id
    x-schema-example: pxyup
    description: |
      A short id that uniquely identifies this system alert. The id
      consists entirely of alpha-numeric characters.
  - name: /sys/alert/{idx}/reason
    x-schema-example: Proxy-connection established
    description: |
      A brief explanation of the system condition that triggers is
      system alert.  The string is localized according to the selected
      language-code or is in English if a translation is unavailable.
  - name: /sys/boot
    description: |
      Information about the most recent power-up (boot) event.
  - name: /sys/boot/reason
    x-schema-example: software reset
    description: |
      The reason for the most recent CPU reset. The strings vary
      depending on the hardware platform. For EG4*xxx* model devices,
      the possible values are:

        * `general reset`: CPU was powered on when the backup battery
          was depleted.

        * `wakeup`: CPU was powered on when backup battery still had
          sufficient charge left.

        * `watchdog reset`: The CPU's watchdog timer triggered the reset.

        * `software reset`: Firmware requested a reboot.

        * `user reset`: Not applicable.

        * `unknown reset`: Not applicable.
  - name: /sys/boot/time
    x-schema-example: '1677287880.350'
    description: |
      The time of the last user-initiated reboot.  It is a decimal [Unix
      timestamp](#tag/Glossary/Unix-Timestamp) string or `null` if
      unavailable.  Unanticipated reboots, e.g., due to power failure or
      watchdog-timeouts do not update this resource.
  - name: /sys/db
    description: |
      The database configuration of the meter.
  - name: /sys/db/max-registers
    x-schema-minimum: 1
    x-schema-example: 64
    description: |
      The maximum number of registers (columns) that can be stored in
      the meter's database.
  - name: /sys/db/level
    x-schema-example:
      - interval: 1000
        row-count: 32768
        volatile: true
      - interval: 60000
        row-count: 527040
        volatile: false
      - interval: 900000
        row-count: 350640
        volatile: false
      - interval: 86400000
        row-count: 21914
        volatile: false
    description: |
      Definition of the available database storage levels.
  - name: /sys/db/level/{idx}
    description: |
      Definition of a database storage level.
  - name: /sys/db/level/{idx}/interval
    x-schema-example: 1000
    description: |
      The time interval in milliseconds between database rows at this
      level.  For example, a value of 1000 would indicate that the level
      contains second-by-second data rows.
  - name: /sys/db/level/{idx}/row-count
    x-schema-example: 32768
    description: |
      The number of rows available at this storage level.  Each database
      level is cyclical so a level with _n_ rows and an interval of _t_
      milliseconds can retain the most recent _n_·_t_ milliseconds worth
      of data.
  - name: /sys/db/level/{idx}/volatile
    description: |
      This is `true` if this level of the database storage is volatile.
      The data in volatile levels is lost each time the meter is powered
      up (rebooted).
  - name: /sys/dev
    description: |
      A description of hardware devices that are attached to the meter.
  - name: /sys/dev/serial
    x-schema-example:
      - devpath: USB2.1
        manufacturer: eGauge
        product: usb485
        sn: DN02MI0P
        version: '2.00'
    description: |
      The list of serial ports that are attached to the meter.
  - name: /sys/dev/serial/{seridx}
    description: |
      An attached serial port.
  - name: /sys/dev/serial/{seridx}/devpath
    x-schema-example: USB2.1
    description: |
      The device path of the serial port that uniquely identifies the
      port it is attached to.
  - name: /sys/dev/serial/{seridx}/manufacturer
    x-schema-example: eGauge
    description: |
      The name of the manufacturer of the serial port hardware.
  - name: /sys/dev/serial/{seridx}/product
    x-schema-example: usb485
    description: |
      The product name of the serial port hardware.
  - name: /sys/dev/serial/{seridx}/sn
    x-schema-example: DN02MI0P
    description: |
      The serial number of the serial port hardware.
  - name: /sys/dev/serial/{seridx}/version
    x-schema-example: 2
    description: |
      The version of the serial port hardware.
  - name: /sys/func
    description: |
      Documents the [eScript](#tag/Glossary/eScript) functions built
      into the meter.
  - name: /sys/func/basic
    x-schema-example:
      max:
        arg:
          - name: x
            type: '#'
          - name: 'y'
            type: '#'
        help: Returns the greater value of <arg>x</arg> and <arg>y</arg>.
        min-args: 2
      sin:
        arg:
          - name: x
            type: '#'
        help: Returns sine of <arg>x</arg>, where <arg>x</arg> is an angle in degrees.
        min-args: 1
    description: |
      Documents the *basic* [eScript](#tag/Glossary/eScript) functions.  Basic
      functions are available any place eScript expressions may appear.
  - name: /sys/func/basic/{name}
    x-schema-example: max
    description: |
      The name of the eScript function.
      Function names start with a letter and consist entirely of alpha-numeric
      characters or underscores (`_`).
  - name: /sys/func/basic/{name}/arg
    x-schema-example:
      - name: x
        type: '#'
      - name: 'y'
        type: '#'
    description: |
      The list of input arguments the function expects.
  - name: /sys/func/basic/{name}/arg/{idx}
    x-schema-example:
      name: x
      type: '#'
    description: |
      Description of the argument expected at index {idx} of the
      argument list.
  - name: /sys/func/basic/{name}/arg/{idx}/name
    x-schema-example: x
    description: |
      The formal name of the argument.  The name starts with a letter
      and consist entirely of alpha-numeric characters or underscores
      (`_`).  The name usually suggests the purpose of the
      argument.  It may also be referenced within the help string
      (member `help`).  Other than that, the name has no significance.
  - name: /sys/func/basic/{name}/arg/{idx}/type
    x-schema-example: '#'
    description: |
      A [type code](#tag/Glossary/Type-Codes) indicating the type of the
      argument.  The special value `string` indicates that the value
      must be a string.
  - name: /sys/func/basic/{name}/help
    x-schema-example: Returns the greater value of <arg>x</arg> and <arg>y</arg>.
    description: |
      The help string (documentation) for this function.  In this
      string, references to argument names are enclosed in `arg` tags
      using an XML-like syntax. For example, a reference to an argument
      with name `count` would appear as `<arg>count</arg>` in this
      string.  This can be used to highlight argument names in the
      document string, for example.
  - name: /sys/func/basic/{name}/min-args
    x-schema-example: 2
    description: |
      The minimum number of arguments that need to be passed when
      calling this function.  If zero, all arguments are optional.  This
      value is never larger than the length of the array given for
      member `arg`.
  - name: /sys/func/alert
    x-schema-example:
      dayavg:
        arg:
          - name: reg
            type: string
        help: Calculates the 24-hour average value for register <arg>reg</arg>.
        min-args: 1
      cumul:
        arg:
          - name: reg
            type: string
          - name: time
            type: '#'
        help: Returns the cumulative value of register named <arg>reg</arg> at time <arg>time</arg>.  If <arg>time</arg> is not specified, the current time is used.
        min-args: 1
    description: |
      Documents the *alert* [eScript](#tag/Glossary/eScript) functions.  These
      functions are available only for eScript expressions evaluated as
      part of alert conditions.
  - name: /sys/func/alert/{name}
    x-schema-example: dayavg
    description: |
      The name of the eScript function.
      Function names start with a letter and consist entirely of alpha-numeric
      characters or underscores (`_`).
  - name: /sys/func/alert/{name}/arg
    x-schema-example:
      - name: reg
        type: string
    description: |
      The list of input arguments the function expects.
  - name: /sys/func/alert/{name}/arg/{idx}
    x-schema-example:
      name: reg
      type: string
    description: |
      Description of the argument expected at index {idx} of the
      argument list.
  - name: /sys/func/alert/{name}/arg/{idx}/name
    x-schema-example: reg
    description: |
      The formal name of the argument.  The name starts with a letter
      and consist entirely of alpha-numeric characters or underscores
      (`_`).  The name usually suggests the purpose of the
      argument.  It may also be referenced within the help string
      (member `help`).  Other than that, the name has no significance.
  - name: /sys/func/alert/{name}/arg/{idx}/type
    x-schema-example: string
    description: |
      A [type code](#tag/Glossary/Type-Codes) indicating the type of the
      argument.  The special value `string` indicates that the value
      must be a string.
  - name: /sys/func/alert/{name}/help
    x-schema-example: Calculates the 24-hour average value for register <arg>reg</arg>.
    description: |
      The help string (documentation) for this function.  In this
      string, references to argument names are enclosed in `arg` tags
      using an XML-like syntax. For example, a reference to an argument
      with name `count` would appear as `<arg>count</arg>` in this
      string.  This can be used to highlight argument names in the
      document string, for example.
  - name: /sys/func/alert/{name}/min-args
    x-schema-example: 1
    description: |
      The minimum number of arguments that need to be passed when
      calling this function.  If zero, all arguments are optional.  This
      value is never larger than the length of the array given for
      member `arg`.
  - name: /sys/modbus
    description: |
      Modbus-related information built into the firmware.
  - name: /sys/modbus/client
    description: |
      Modbus client related information.
  - name: /sys/modbus/client/map
    x-schema-example:
      sys_dev:
        option:
          default-modbus-addr: '2'
          default-serial-params: 9600/8n1
        reg:
          - name: irradiance
            addr: 0
            type: u32
            kind: analog
            unit: W
            offset: 0
            scale: 0.1
            access: ro
          - name: temp
            addr: 1
            type: s32
            kind: analog
            unit: degC
            offset: 0
            scale: 0.01
            access: ro
    description: |
      System-defined (built-in) Modbus address maps.  The user-defined
      maps are available at
      [/config/modbus/client/map](#tag/configmodbusclientmap).  If a
      user-defined map with the same name as a system map exists, it
      will shadow (mask) the system map with the same name.
  - name: /sys/modbus/client/map/{name}
    x-schema-example:
      option:
        default-modbus-addr: '2'
        default-serial-params: 9600/8n1
      reg:
        - name: irradiance
          addr: 0
          type: u32
          kind: analog
          unit: W
          offset: 0
          scale: 0.1
          access: ro
        - name: temp
          addr: 1
          type: s32
          kind: analog
          unit: degC
          offset: 0
          scale: 0.01
          access: ro
    description: |
      Modbus map consisting of a list of register definitions and a set
      of options.
  - name: /sys/modbus/client/map/{name}/option
    x-schema-example:
      default-modbus-addr: '2'
      default-serial-params: 9600/8n1
    description: |
      A set of options.  The meter currently supports the following
      options:

        * `default-modbus-addr`: The Modbus unit-number to use by
        default.  This must be a decimal string.  For example: `"1"`.

        * `default-serial-params`: The default serial parameters to use
        when the remote device is connected via a serial port
        (Modbus/RTU).  This must be a string.  For example: `"9600/8n1"`
        for 9600 baud, 8 databits, no parity, 1 stop bit.

        * `default-tcp-port`: The default TCP port number to use when
        the remote device is connected via Modbus/TCP.  This must be a
        decimal string.  For example: `"6001"`.
  - name: /sys/modbus/client/map/{name}/option/{opt}
    x-schema-example: 9600/8n1
    description: |
      The value of the Modbus map option.
  - name: /sys/modbus/client/map/{name}/reg
    description: |
      A list of Modbus register definitions.
  - name: /sys/modbus/client/map/{name}/reg/{idx}
    description: |
      A Modbus register definition.
  - name: /sys/modbus/client/map/{name}/reg/{idx}/name
    x-schema-example: irradiance
    description: |
      The name of the register.  The user can choose this name freely so
      long as each register within a map has a unique name.
  - name: /sys/modbus/client/map/{name}/reg/{idx}/addr
    x-schema-minimum: 0
    x-schema-maximum: 65535
    description: |
      The Modbus address of the register.
  - name: /sys/modbus/client/map/{name}/reg/{idx}/type
    x-schema-example: u32
    x-schema-enum:
      - bit
      - s16
      - u16
      - s32
      - u32
      - s32l
      - u32l
      - s64
      - u64
      - float16
      - float16l
      - float
      - floatl
      - double
    description: |
      The type of the register value.  This may be one of the following:

        * `bit`: One-bit value (a coil, in Modbus terminology).
        * `s16`: Signed 16-bit integer.
        * `u16`: Unsigned 16-bit integer.
        * `s32`: Signed 32-bit integer.
        * `u32`: Unsigned 32-bit integer.
        * `s32l`: Signed 32-bit integer, word-swapped.
        * `u32l`: Unsigned 32-bit integer, word-swapped.
        * `s64`: Signed 64-bit integer.
        * `u64`: Unsigned 64-bit integer.
        * `float16`: IEEE-754 half-precision float.
        * `float16l`: IEEE-754 half-precision floating point,
          little-endian (byte-swapped).
        * `float`: IEEE-754 single-precision float.
        * `floatl`: IEEE-754 single-precision float, word-swapped.
        * `double`: IEEE-754 double-precision float.
  - name: /sys/modbus/client/map/{name}/reg/{idx}/kind
    x-schema-enum:
      - analog
      - enum
      - bitset
    description: |
      The kind of the register. Possible values are:

        * `analog`: The value is continuous (the average of two values is
          meaningful).

        * `enum`: The value is discrete (the average of two values is not
          meaningful).  An example for this would be a numeric error code.

        * `bitset`: Each bit in the value is a discrete on/off value.
        An example for this would be a set of error flags.
  - name: /sys/modbus/client/map/{name}/reg/{idx}/unit
    x-schema-example: W
    description: |
      For register of the `analog` kind, this defines the physical unit of
      the register value.  This must be one of the following:

        * `#3`: Unit-less number with 3 decimal digits of precision.
        * `%`: Percentage.
        * `A`: Electric current in amperes.
        * `Ah`: Electric charge in ampere-hours.
        * `As`: Electric charge in ampere-seconds.
        * `C`: Temperature in degree celsius.
        * `Degrees`: Angle in degrees.
        * `Hz`: Frequency in hertz.
        * `Ohm`: Resistance in ohm.
        * `Pa`: Pressure in pascals.
        * `Pct`: Percentage.
        * `RH`: Relative humidity.
        * `Tmd`: Time in days.
        * `Tmh`: Time in hours.
        * `Tms`: Time in seconds.
        * `VA`: Apparent power in volt-amperes.
        * `VAh`: Apparent energy in volt-ampere-hours.
        * `V`: Electric potential in volts.
        * `W/m2`: Irradiance in watts-per-square-meter.
        * `W/m^2`: Irradiance in watts-per-square-meter.
        * `W`: Power in watts.
        * `Wh`: Energy in watt-hours.
        * `degC`: Temperature in degree celsius.
        * `deg`: Angle in degrees.
        * `g`: Mass in grams.
        * `hPa`: Pressure in hecto-pascals.
        * `h`: Time in hours.
        * `kAh`: Electric charge in kilo-ampere-hours.
        * `kO`: Resistance in kilo-ohms.
        * `kPa`: Pressure in kilo-pascals.
        * `kVAh`: Apparent energy in kilo-volt-ampere-hours.
        * `kW`: Power in kilo-watts.
        * `kWh`: Energy in kilo-watt-hours.
        * `kg`: Mass in kilo-grams.
        * `kvarh`: Reactive energy in kilo-volt-ampere-hours.
        * `m/s`: Speed in meters-per-second.
        * `m3/s`: Volume flow in cubic-meters-per-second.
        * `m3`: Volume in cubic-meters.
        * `mA`: Electric current in milli-amperes.
        * `mAh`: Electric charge in milli-ampere-hours.
        * `mSecs`: Time in milli-seconds.
        * `mV`: Electric potential in milli-volts.
        * `mV`: Electric potential in milli-volts.
        * `m^3/s`: Volume flow in cubic-meters-per-second.
        * `m^3`: Volume in cubic-meters.
        * `meters`: Distance in meters.
        * `mm`: Distance in milli-meters.
        * `mps`: Speed in meters-per-second.
        * `ms`: Time in milli-seconds.
        * `ohms`: Resistance in ohm.
        * `ppm`: Parts-per-million.
        * `s`: Time in seconds.
        * `secs`: Time in seconds.
        * `var`: Reactive power in volt-ampere.
        * `varh`: Reactive energy in volt-ampere-hours.
        * `°C`: Temperature in degree celsius.
  - name: /sys/modbus/client/map/{name}/reg/{idx}/offset
    description: |
      An offset value that is used to convert the Modbus register value
      to a value in the specified physical unit.  Specifically, when the
      Modbus value of the register is *reg*, then corresponding physical
      value *phys* is calculated as:

        > *phys* = (*reg* + `offset`) * `scale`

      where `offset` is the value defined here and `scale` is
      the value defined for member `scale`.
  - name: /sys/modbus/client/map/{name}/reg/{idx}/scale
    x-schema-example: 0.1
    description: |
      A scale value that is used to convert the Modbus register value
      to a value in the specified physical unit.  Specifically, when the
      Modbus value of the register is *reg*, then corresponding physical
      value *phys* is calculated as:

        > *phys* = (*reg* + `offset`) * `scale`

      where `scale` is the value defined here and `offset` is
      the value defined for member `offset`.
  - name: /sys/modbus/client/map/{name}/reg/{idx}/access
    x-schema-enum:
      - ro
      - rw
    description: |
      The access-mode of the register.  It must be one of:
        * `ro`: read-only
        * `rw`: read-write
  - name: /sys/model
    description: |
      The model name of the meter. For example, `EG4030`.
  - name: /sys/net
    description: |
      The network settings that are in use by the meter.  This may
      or may not be the same as the configuration established in
      [/config/net](#tag/confignet).
  - name: /sys/net/ipv4
    description: |
      The Internet Protocol v4 ([IPv4](https://www.rfc-editor.org/rfc/rfc791))
      configuration.
  - name: /sys/net/ipv4/address
    x-schema-example: 192.168.1.42
    description: |
      An IPv4 address in dotted decimal notation.
  - name: /sys/net/ipv4/broadcast
    x-schema-example: 192.168.1.255
    description: |
      An IPv4 broadcast address in dotted decimal notation.
  - name: /sys/net/ipv4/dhcp
    description: |
      Whether or not to use [DHCP](https://www.ietf.org/rfc/rfc2131.txt)
      to automatically provision the IPv4 address.  If `true`, DHCP is
      enabled. If `false`, the manually configured IPv4 settings are
      used.
  - name: /sys/net/ipv4/netmask
    x-schema-example: 255.255.255.0
    description: |
      The address of the IPv4 gateway in dotted decimal notation.
  - name: /sys/net/ipv4/network
    x-schema-example: 192.168.1.0
    description: |
      The IPv4 network mask in dotted decimal notation.
  - name: /sys/net/ipv4/gateway
    x-schema-example: 192.168.1.1
    description: |
      The IPv4 network number in dotted decimal notation.
  - name: /sys/net/ntp
    description: |
      Network Time Protocol
      ([NTP](https://www.rfc-editor.org/rfc/rfc5905)) status.
  - name: /sys/net/ntp/server
    x-schema-example:
      - address: 192.168.1.1
        name: null
        state: SYNC
        weight: 1
        trust_level: 10
        stratum: 3
        next_poll: 615
        poll_interval: 1545
        offset: 0.228
        delay: 0.79
        jitter: 0.106
      - address: 66.228.58.20
        name: north-america.pool.ntp.org
        state: PEER
        weight: 1
        trust_level: 10
        stratum: 3
        next_poll: 499
        poll_interval: 1480
        offset: -0.601
        delay: 39.609
        jitter: 2.258
    description: |
      Status of each [configured](#tag/config/net/ntp/server) NTP server.
  - name: /sys/net/ntp/server/{idx}
    description: |
      Status of the NTP server.
  - name: /sys/net/ntp/server/{idx}/address
    x-schema-example: 192.168.1.1
    description: |
      The network address of the configured NTP server.  This is
      typically a string-representation of the server's IP address,
      which may be either an IP v4 or v6 address. If the address is
      unknown, this is `null`.
  - name: /sys/net/ntp/server/{idx}/delay
    x-schema-example: 0.79
    description: |
      The estimated time it takes for a network packet from the meter to
      reach this NTP server (or vice versa).  The unit is milliseconds.
      The is available only if the meter considers this server a peer.
  - name: /sys/net/ntp/server/{idx}/jitter
    x-schema-example: 0.106
    description: |
      The estimated jitter (variation) for the time it takes for a
      network packet from the meter to reach this NTP server (or vice
      versa). The unit is milliseconds.
      The is available only if the meter considers this server a peer.
  - name: /sys/net/ntp/server/{idx}/name
    x-schema-example: null
    description: |
      The hostname of the configured NTP server.  If the name is
      unknown, this this is `null`.  This normally happens when the NTP
      server is configured as an IP address.
  - name: /sys/net/ntp/server/{idx}/next_poll
    x-schema-example: 615
    description: |
      The time that needs to elapse before the meter contacts this
      server again.  The unit is seconds.
  - name: /sys/net/ntp/server/{idx}/offset
    x-schema-example: -0.601
    description: |
      The estimated difference between the meter's time and this NTP
      server's time.  The unit is milliseconds.
      The is available only if the meter considers this server a peer.
  - name: /sys/net/ntp/server/{idx}/poll_interval
    x-schema-example: 1545
    description: |
      The interval of time between successive contacts from the meter to
      this server.  The unit is seconds.
  - name: /sys/net/ntp/server/{idx}/state
    x-schema-example: SYNC
    x-schema-enum:
      - INVAL
      - PEER
      - SYNC
      - TRACK
    description: |
      The meter's view of the current state of this NTP server.  It may
      have one of the following values:

        * `INVAL`: The server is invalid, e.g., because the hostname
          could not be resolved to a network address or because the
          remote server is not responding.

        * `TRACK`: The server is being tracked and, if everything
          continues to work fine, it will enter the `PEER` state
          shortly.

        * `PEER`: The server is a peer and could be used as a time source.

        * `SYNC`: The server is a peer and the meter's time is
          synchronized with this server.
  - name: /sys/net/ntp/server/{idx}/stratum
    x-schema-example: 3
    description: |
      The meter's estimate of the time accuracy provided by this server.
      Smaller numbers mean higher accuracy.  A stratum 0 server is the
      most accurate (atomic clock or GPS clock).
      The is available only if the meter considers this server a peer.
  - name: /sys/net/ntp/server/{idx}/trust_level
    x-schema-example: 10
    description: |
      The meter's estimate of how trustworthy this server's time is.
      Higher numbers indicate a higher level of trustworthiness.
  - name: /sys/net/ntp/server/{idx}/weight
    x-schema-example: 1
    description: |
      The meter's estimate of the weight that should be given to this
      NTP server's time.
  - name: /sys/net/wlan
    description: |
      The WLAN (Wi-Fi) status.
  - name: /sys/net/wlan/ap
    x-schema-example:
      - bssid: d8:08:a5:ae:4c:e1
        flags: '[WPA2-PSK-CCMP][ESS]'
        frequency: 2452
        signal_level: -18
        ssid: wireless
      - bssid: 24:c1:e3:c7:2a:88
        flags: '[WPA2-PSK-CCMP][WPS][ESS]'
        frequency: 2412
        signal_level: -62
        ssid: testwlan
    description: |
      The list of detected access points (available WLAN networks).
  - name: /sys/net/wlan/ap/{idx}
    description: |
      Access point status.
  - name: /sys/net/wlan/ap/{idx}/bssid
    x-schema-example: d8:08:a5:ae:4c:e1
    description: |
      The BSSID (basic service set identifier) of this access point.
      This is a MAC address formatted as six two-digit hex numbers,
      separated by colons (`:`).
  - name: /sys/net/wlan/ap/{idx}/flags
    x-schema-example: '[WPA2-PSK-CCMP][ESS]'
    description: |
      A set of flags enclosed in square brackets.  Each flag gives some
      information about the capabilities of this access point.

      The following flags are currently defined:

        * `DMG`: Indicates the access-point supports 802.11ad
          directional multi-gigabit (DMG).

        * `EBSS`: The access-point supports extended wireless networks.

        * `FILS`: The access-point supports 802.11ai fast initial link setup.

        * `FST`: The access-point supports fast session transfers.

        * `HS20`: The access-point supports Hot Spot 2.0 (Wi-Fi
          Certified Passpoint).

        * `IBSS`: The access-point supports independent basic service
          set (ad-hoc) wireless networks.

        * `MESH`: The access-point uses a mesh network.

        * `OSEN`: The access-point supports Server-only authenticated
          layer 2 Encryption Network.

        * `OWE-TRANS`: See Opportunistic Wireless Extension.

        * `OWE-TRANS-OPEN`: See Opportunistic Wireless Extension.

        * `P2P`: The access-point supports point-to-point (WiFi Direct)
          wireless networks.

        * `PBSS`: Indicates the access-point supports personal basic
          service set wireless networks.

        * `RSN`: Indicates the access-point supports Robust Security
          Network (RSN).

        * `UTF-8`: The SSID is UTF-8 encoded.

        * `WEP`: The access-point supports Wired Equivalent Privacy (WEP).

        * `WPA`: The access-point supports Wi-Fi Protected Access (WPA).

        * `WPA2`: The access-point supports Wi-Fi Protected Access (WPA)
          version 2.

        * `WPS`: The access-point supports Wi-Fi Protected Setup (WPS).

      Encryption-related flags may be followed by various sub-flags that
      are separated by a `+` character.  For example,
      `WPA2-PSK-CCMP+TKIP` indicates that WPA2-PSK-CCMP is supported
      with the TKIP protocol.
  - name: /sys/net/wlan/ap/{idx}/frequency
    x-schema-example: 2452
    description: |
      The frequency in MHz of this access point.
  - name: /sys/net/wlan/ap/{idx}/signal_level
    x-schema-example: -18
    description: |
      The signal-strength (in dB) with which the meter is receiving this
      access point.  This is typically a negative number with larger
      (less negative) numbers indicating higher signal strength.
  - name: /sys/net/wlan/ap/{idx}/ssid
    x-schema-example: wireless
    description: |
      The SSID (service set identifier) of this WLAN network.
  - name: /sys/net/wlan/net
    x-schema-example:
      - network_id: 0
        bssid: any
        flags: '[DISABLED]'
        ssid: other
      - network_id: 1
        bssid: any
        flags: '[CURRENT]'
        ssid: wireless
      - network_id: 2
        bssid: any
        flags: '[DISABLED]'
        ssid: 兔年 😁
    description: |
      The status of configured wireless networks.
  - name: /sys/net/wlan/net/{idx}
    description: |
      The WLAN network status.
  - name: /sys/net/wlan/net/{idx}/network_id
    x-schema-example: 1
    x-schema-minimum: 0
    description: |
      Identifier for this network.
  - name: /sys/net/wlan/net/{idx}/bssid
    x-schema-example: any
    description: |
      The BSSID (basic service set identifier) of the access point to
      use for this network.  This is a MAC address formatted as six
      two-digit hex numbers separated by colons (`:`).  If unset, this
      is `any` instead.
  - name: /sys/net/wlan/net/{idx}/flags
    x-schema-example: '[CURRENT]'
    description: |
      A set of flags which are enclosed in square brackets.  The
      following flags are currently defined:

        * `CURRENT`: Indicates that this network is currently being
          used.

        * `DISABLED`: The network is disabled from being used.

        * `TEMP-DISABLED`: The network is temporarily disabled from
          being used.

        * `P2P-PERSISTENT`: Indicates a point-to-point (WiFi Direct)
          connection.  This is not used by the meter.
  - name: /sys/net/wlan/net/{idx}/ssid
    x-schema-example: wireless
    description: |
      The SSID (service set identifier) of this WLAN network.
  - name: /sys/reboot
    description: |
      This is `true` if the meter needs to be rebooted, e.g., due to a
      configuration change.  If so, a [reboot
      command](#tag/cmd/operation/cmdReboot) should be issued at the
      next opportune moment.
  - name: /sys/sn
    x-schema-example: G10400
    description: |
      The serial number of the meter.  Even though it is called
      serial-*number*, this string may contain letters, dashes (`-`) and
      underscores (`_`) as well.
  - name: /sys/status
    x-schema-example: {}
    description: |
      The status of long-running operations.  For security reasons, this
      resource always returns an empty object.  That is, only
      applications that know the token of a long-running operation can
      inquire on its status.
  - name: /sys/status/{token}
    x-schema-example:
      args:
        - 4.5alpha1
        - 4.5alpha1
      done: true
      error: NOT_NEWER
      ts: '1679103764.278772467'
    description: |
      The current status of the long-running operation.
  - name: /sys/status/{token}/args
    x-schema-example:
      - 4.5alpha1
      - 4.5alpha1
    description: |
      A list of strings that provide additional information to the
      `error` or `info` tag.
  - name: /sys/status/{token}/args/{idx}
    x-schema-example: 4.5alpha1
    description: |
      A string that provides additional information to the `error` or
      `info` tag.
  - name: /sys/status/{token}/done
    description: |
      This is `true` if the operation has completed or `false` if it is
      still in progress.
  - name: /sys/status/{token}/error
    x-schema-example: NOT_NEWER
    description: |
      If set, indicates that an error occurred.  The meaning of this
      value depends on the operation being performed.  Generally, it is
      a short tag.  For example, `OOM` to indicate "out of
      memory". Before presenting the tag to a user, it must be
      translated to a human-readable string.  The strings in member
      `args` provide additional info about why the error occurred.
  - name: /sys/status/{token}/info
    x-schema-example: RESTORE
    description: |
      If set, indicates the action the long-running operation is
      currently performing.  The meaning of this value depends on the
      operation being performed.  Generally, the string is a short tag.
      For example, `RESTORE` to indicate that data is being restored to
      the database. Before presenting the tag to a user, it must be
      translated to a human-readable string.  The strings in member
      `args` provide additional info about the action being performed.
  - name: /sys/status/{token}/progress
    x-schema-example: 0.31415
    description: |
      A progress indicator that reports the portion of the operation (or
      action) that has been completed so far.  The value is in the range
      from 0 to 1, where 0 means that the operation has just started and
      1 means the operation is 100% complete.
  - name: /sys/status/{token}/ts
    x-schema-example: '1679103764.278772467'
    description: |
      The time when this status was created.  It is a decimal [Unix
      timestamp](#tag/Glossary/Unix-Timestamp) string.
  - name: /sys/time
    x-schema-example: '1679104389.095469'
    description: |
      The current meter time as a decimal [Unix
      timestamp](#tag/Glossary/Unix-Timestamp) string.
  - name: /sys/uptime
    x-schema-example: 1232588.28
    description: |
      The number of seconds the device has been running since the last
      reboot.
  - name: /sys/version
    description: |
      Meter version information.
  - name: /sys/version/firmware
    x-schema-example: 4.5alpha1
    description: |
      The version code of the installed firmware.
  - name: /sys/version/hardware
    x-schema-example: 3EA
    description: |
      The version code of the hardware.
  - name: /sys/version/kernel
    x-schema-example: '5.15.95+ #47 Thu Feb 23 15:15:34 MST 2023'
    description: |
      The version code of the installed kernel.
  - name: Glossary
    description: |
      ## Deprecated

      Items marked deprecated should not be used going forward as they
      will be removed in a future firmware release.

      ## Device Attributes

      Most device attributes are simple name/value pairs with both the
      name and the value consisting of strings.  Two exceptions are the
      `path` and `interface` attributes:

        * `path`: The value of this attribute is a list of strings.  The
          list provides a unique path to the device.  If present, it
          must be the first attribute.  This is the only attribute which
          provides a guaranteed unique identifier for the device.  The
          flip-side is that the path is not necessary _stable_.  For
          example, if a USB device is moved from one port to another,
          the path would change.  Thus, depending on the needs of the
          application, it may be more appropriate to identify a device
          through other means, such as the manufacturer, model, and
          serial-number, which, together, might provide a unique
          identifier for the device that remains stable regardless of
          how the device is connected to the meter.

        * `interface`: The value of this attribute is also a list of
          strings.  Each entry is the name of an interface that is
          supported by the device.  A description of each interface can
          be obtained from [/ctrl/interface](#tag/ctrlinterface).

      The meaning of other attributes is given below:

        * `link`: The physical link used by the device.  If present, the
          value must be one of:

          * `Ethernet`: The device is connected via Ethernet.

          * `USB`: The device is connected via USB.

          * `serial`: The device is connected via a serial link such as
            RS485, RS232, or similar.

        * `mfg`: The name of the manufacturer of the device (e.g.,
          `eGauge`).

        * `model`: The model name of the device (e.g., `PRM3`).

        * `name`: If present, a user-selected name of the device.

        * `prot`: The communication protocol used by the device.  If
          present, it must be one of:

          * `CoAP`: The device uses the [Constrained Application
            Protocol](https://www.rfc-editor.org/rfc/rfc7252).

          * `CtrlByWeb`: The device uses the ControlByWeb XML protocol.

          * `Modbus`: The device uses the
            [Modbus](https://www.modbus.org/specs.php) protocol.

          * `RTCoA`: The device uses the Radio Thermostat Co of America
            protocol.

          * `SCPI`: The device uses the
            [SCPI](https://en.wikipedia.org/wiki/Standard_Commands_for_Programmable_Instruments)
            protocol (pronounced "skippy".

          * `SMANet`: The device uses the SMAnet protocol used by older PV
            inverters manufactured by SMA.

        * `quality`: Devices that can potentially be reached through
          multiple paths may set this attribute to indicate the
          communication-quality of a particular path.  The value of this
          attribute must be a decimal string.  Paths that provide better
          communication-quality in some sense (e.g., higher speed or
          smaller loss-rate) should have a higher value.  When mapping a
          set of attributes to a set of paths, the paths will be ordered
          by decreasing quality value such that higher quality paths
          will appear before lower quality ones.

        * `sn`: The serial "number" of the device.  Even though called a
          number, the value may also contain non-digit characters (e.g.,
          `0Y0035`).

      ## eScript

      eScript is a simple scripting langage which supports
      basic arithmetic operations (addition, subtraction, multiplication,
      and division) of double-precision floating point numbers.  The
      operations follow normal precedence rules.  Parentheses can be used
      to force evaluation in a particular order.  A C-like ternary
      operator is also supported for conditional evaluation.
      Specifically:

        > `c ? e1 : e2`

      evaluates to `e1` if `c` is non-zero and to `e2` otherwise.

      The latest instantaneous value of a meter register can be obtained
      with the `$` operator which must be followed by a register name in
      quotes.  For example:

        > `$"Grid"`

      would evaluate to the instantaneous value of register `Grid`.

      eScript also supports various functions such as `sin()` to
      calculate the sine of an angle or `THD()` to calculate
      total-harmonic distortion in a signal.  A list of functions is
      available at [/sys/func](#tag/sysfunc).

      An eScript expression which starts with a colon (`:`) is
      interpreted as a [Lua](#tag/Glossary/Lua-Scripts) expression.

      ## Filter-Spec

      Filter-specs can be used to return only certain
      members of an object or certain elements of an array.

      For example, `{foo,bar}` would limit the output of an object to the
      members with names `foo` and `bar`.  Similarly, `[0,3:5]` would
      limit the output of an array to the elements with indices 0, 3, 4,
      and 5.

      If a member or array filter is empty, all members/elements of that
      object/array are returned.  This is handy when filtering deeper
      levels of a response.  For example `[{addr}]` would return only
      member `addr` from all the objects in the returned array.

      For a more complex example, the filter-spec `{reg[7:8{addr}]}`
      would, for each object in the response, only return the `reg` member
      and, within each `reg` array, only elements with indices 7 or 8
      would be returned.  Within the objects of those elements, only the
      `addr` member would be returned.


      Note that braces and square brackets normally need to be
      percent-encoded before using them in a URL (e.g., `%7B` for `{`).

      ### Formal Definition

      The formal syntax of a filter-spec (*FSPEC*) is given by the EBNF
      syntax below.  No whitespace is allowed between symbols.

      > *FSPEC* = [*OBJECT_FILTER* | *ARRAY_FILTER*] . \
      > *OBJECT_FILTER* = "{" *MEMBER_FILTER* {"," *MEMBER_FILTER*)} "}" . \
      > *ARRAY_FILTER* = "["*INDEX_FILTER* {"," *INDEX_FILTER*)} "]" . \
      > *MEMBER_FILTER* = [*NAME* | "(" *NAME* {"," *NAME*} ")"] *FSPEC* . \
      > *INDEX_FILTER* = [*RANGE* | "(" *RANGE* {"," *RANGE*} ")"] *FSPEC* . \
      > *RANGE* = *UINT* [ ":" *UINT* ] . \
      > *UINT* = *DIGIT* { *DIGIT* } . \
      > *DIGIT* = "0".."9". \
      > *NAME* = *ALPHA* | *DIGIT* | "-" | "." | "_" | "~" | *PCT_ENC* . \
      > *ALPHA* = "a".."z" | "A".."Z" . \
      > *PCT_ENC* = "%" *HEX* *HEX* . \
      > *HEX* = *DIGIT* | "a".."f" | "A".."F" . \
      > *EMPTY* = .

      In words: a filter-spec can restrict the members returned from an
      object by listing zero or more member names, separated by commas, in
      curly braces.  Only listed member names will be returned.  As a
      special case, the empty object filter `{}` returns all members.  A
      member name can be followed by a nested filter-spec to further
      filter the value the member with that name.  A common nested
      filter-spec can also be applied to several comma-separated member
      names by enclosing them in parentheses and writing the common
      filter-spec after the closing parenthesis.

      Similarly, a filter-spec can restrict the elements returned from an
      array by listing zero or more indices, separated by commas, in
      square brackets.  Only listed indices will be returned.  As a
      special case, the empty array filter `[]` returns all elements in an
      array.  An index can be a single unsigned integer or a range of
      indices written as a starting index, a colon, and an ending index.
      For example, range `10:20` would corresponds to indices 10 through
      20.  An index can be followed by a nested filter-spec to further
      filter the value of the element with that index.  A common nested
      filter-spec can also be applied to several comma-separated indices
      by enclosing them in parentheses and writing the common filter-spec
      after the closing parenthesis.

      ## Lua Scripts

      In addition to [eScript](#tag/Glossary/eScript), the meter firmware also
      supports the more powerful [Lua](https://www.lua.org/manual/5.3/)
      language.  All eScript functions can be called directly from Lua.
      Conversely, eScript may also call Lua functions as long as they
      use only numbers as arguments and return a single number as a
      result.

      ## Max-Depth
      The `max-depth` parameter can be specified to limit
      the depth to which a response object or array is output.  When the
      depth-limit is reached, only a list of member names is returned for
      objects and only the length is returned for arrays.

      For example, if the full result object were:

        > `{"obj": {"a": ..., "b": ...}, "arr": [1, 2, 3, 4]}`

      then this restricted to `max-depth=2` would return:

        > `{"obj": ["a", "b"], "arr": 4}`

      That is, the value of `obj` was replaced by the list of the
      object's member names and the value of array `arr` was replaced by
      its length.

      ## Time Point Names

      Time-point names provide a way to refer to both absolute points in
      time as well as times relative to the current time.  Specifically:

        * `now`: The most recent time for which the meter has collected
        data.

        * `epoch`: The time at which the meter started recording data.
        That is, the oldest time for which the database will return
        data.  This time is user configurable via
        [/config/db/epoch](#tag/configdbepoch).

        * `soy`: The time at which the current year started
        (start-of-year).

        * `som`: The time at which the current month started
        (start-of-month).

        * `sow`: The time at which the current week started
        (start-of-week).

        * `sod`: The time at which the current day started
        (start-of-day).

        * `soh`: The time at which the current hour started
        (start-of-hour).

        * `sob`: The time at which the current billing period started
        (start-of-bill).  [Server-storage](#tag/store) variable
        `global/billing/start_day` establishes the day of the month a
        new billing period starts.  If that day is greater than the
        number of days in the current month, the last day of that month
        is taken as the start of the billing period.  For simplicity,
        the new billing period is assumed to start at 12pm on the
        billing day (meter-local time).

      ## Time Ranges

      A time range is an ordered series of [Unix
      timestamps](#tag/Glossary/Unix-Timestamp) which are spaced out at
      a fixed interval starting from an initial, older, point in time to
      a final, younger point in time.  In this API, time ranges are
      written as three decimal numbers, separated by colons:
      `start:step:stop`, where `start` is the initial timestamp, `step`
      is the interval between timestamps (in seconds), and `stop` is the
      final timestamp.  For example, `100:1:103` would correspond to the
      timestamp series `[100, 101, 102, 103]`.  If `step` and the
      following colon are left out, the interval defaults to one second.
      If the timerange consists of only a single number `stop`, it is
      interpreted as a singleton consisting of only the specified stop
      time.

      The timestamps are generated from youngest to oldest.  Thus, if
      the oldest timestamp is not an integer-multiple of step apart from
      youngest, then the oldest timestamp will not be in the series of
      generated timestamp.

      The start and stop times of an interval may also be written as one
      of the [time-point names](#tag/Glossary/Time-Point-Names) and,
      optionally, a number (in seconds) can be added or subtracted from
      such a name.  For example, `now-100` refer to the point in time
      that is 100 seconds before the current time of the meter.

      When a time range is used to select rows from the database, the
      resulting timestamps may not align with the timestamps of the rows
      stored in the database.  When this happens, the meter will, by
      default, round down the specified timestamp to that of the nearest
      older row.  However, if the starting or ending timestamp starts
      with a plus sign (`+`), the meter will instead round the timestamp
      up to that of the nearest younger row.

      ### Formal Definition

      The full syntax for a time range is given in EBNF syntax below:

        > *TIME_RANGE* = [*FROM* ":" [*STEP* ":"]]*TO* . \
        > *FROM* = *TIME_WITH_ROUNDING* . \
        > *TO* = *TIME_WITH_ROUNDING* . \
        > *STEP* = *OFFSET* . \
        > *TIME_WITH_ROUNDING* = ["+"]*TIME* . \
        > *TIME* = *POINT*[("+"|"-")*OFFSET*] | *OFFSET* . \
        > *POINT* = "now"|"epoch"|"soy"|"som"|"sow"|"sod"|"soh"|"sob" . \
        > *OFFSET* = *UNSIGNED_INTEGER*["."*UNSIGNED_INTEGER] .

      ## Type Codes

      Each register records values in a physical unit indicated by a
      type code.  Apart from the physical unit, the type code also
      defines the quantum with which a value is recorded in the
      database.

      To understand the role of the quantum, you need to know that the
      database stores all values as signed 64-bit integer numbers.  For
      all type codes except `d` (discrete numbers), the meter
      accumulates values before storing them in the database.  Let us
      see how this is done for a sensor that measures a voltage.  If we
      look up type code `V` in the table below, we see that the quantum
      _q_ for a voltage is 0.001.  Now, suppose the voltage _v_ of a
      sensor was measured to be 120V on average over a measurement
      interval _dt_ of one second and that the previous accumulated
      value of that sensor was _c0_.  The meter would then calculate the
      new accumulated value _c1_ as:

        > _c1_ = _c0_ + round(_v_ / _quantum_)·_dt_

      or

        > _c1_ = _c0_ + round(120V / 0.001)·1s = _c0_ + 120000 V·s

      This new accumulated value is then stored in the database.  In
      other words, for every second where the average voltage is 120V,
      the value stored in the database would increase by 120000.  This
      also shows that the accumulated values stored in the database have
      a unit that is the rate unit multiplied by seconds.  For volts,
      that turns into volt-seconds.  Similarly, power in watts would be
      recorded as watt-seconds (or joules), and speed in
      meters-per-second would be recorded as meters.

      Note that an accumulated value may eventually overflow if the
      measured rate has predominantly the same sign for a very long
      period of time.  If that were to happen, the value would wrap
      around from a large positive value to a large negative value or
      vice versa.  The quanta have been selected such that under normal
      circumstances, wrap-arounds will not occur within the lifetime of
      a meter.  Nevertheless, when calculating how much an accumulated
      value changed between two points in time, we recommend calculating
      that difference modulo 2<sup>63</sup> since that will give the
      correct result provided at most one wrap-around occurred between
      the two points in time.

      Discrete numbers (type code `d`) are unit-less and are used to
      record discrete states (such as error states or bitsets).  Such
      quantities cannot be averaged and hence they are not accumulated.
      Instead, they are stored directly as signed 64-bit integers in the
      database.

      | Type code | Physical quantity       |   Rate unit   | Quantum |
      | :-------: | ----------------------- | ------------: | ------- |
      | `#`   | Whole number                |               |       1 |
      | `#3`  | Number with 3 decimal places|               |   0.001 |
      | `%`   | Percentage                  |   %           |   0.001 |
      | `$`   | Monetary accrual rate       |${currency}/s  |2<sup>-29</sup>|
      | `a`   | Angle                       |   °           |   0.001 |
      | `aq`  | Air quality index (0=good, 500=bad)|s       |   0.001 |
      | `d`   | Discrete number             |               |       1 |
      | `Ee`  | Irradiance                  |W/m<sup>2</sup>|     1 |
      | `F`   | Frequency                   |  Hz           |   0.001 |
      | `h`   | Relative humidity           |   %           |   0.001 |
      | `I`   | Electrical current          |   A           |   0.001 |
      | `m`   | Mass                        |   g           |   0.001 |
      | `P`   | Power                       |   W           |       1 |
      | `Pa`  | Pressure                    |  Pa           |       1 |
      | `ppm` | Parts per million           | ppm           |   0.001 |
      | `var` | Reactive power              | var           |       1 |
      | `Q`   | Mass flow                   | g/s           |       1 |
      | `Qe`  | Electric charge             |  Ah           |   0.001 |
      | `Qv`  | Volumetric flow             |m<sup>3</sup>/s|10<sup>-9</sup>|
      | `R`   | Electric resistance         |   Ω           |       1 |
      | `S`   | Apparent power              |  VA           |       1 |
      | `T`   | Temperature                 |  °C           |   0.001 |
      | `THD` | Total harmonic distortion   |   %           |   0.001 |
      | `V`   | Voltage                     |   V           |   0.001 |
      | `v`   | Speed                       | m/s           |   0.001 |

      **Note** For the monetary unit, `${currency}` should be replaced
      by the the currency symbol applicable to the region the meter is
      installed in.  The builtin user interface of the meter uses the
      value of [server-storage](#tag/store) variable
      `global/default/currency_symbol` for this purpose or, if
      undefined, a dollar sign (`$`).

      ## Unix Timestamp

      A Unix timestamp is a number that counts the seconds since the
      start of January 1, 1970 UTC.

      ## Non-Transactional Updates

      When a modification request to a resource is not executed
      transactionally, it means that it may be possible to observe the
      modification of that resource before or after modifications to the
      other resources being updated within the same request.  It is also
      possible for the modification to take effect even though the
      overall request may end up failing with an error.

      ## Password Hashes

      Passwords are never written directly to this API.  Instead, only
      hashes are written which are derived from the user name, realm,
      and password.  Specifically, the hash is calculated as the
      [MD5](https://en.wikipedia.org/wiki/MD5) sum over the string
      obtained when concatenating the user name, the realm, and the
      password while using colons as field-separators.  For example, the
      hash of user name `jane`, realm `domain`, and password `secret`,
      would be:

        > MD5("jane:domain:secret") = 251910de04f5eab86859939167d4fded

      ## Serial Ports

      A serial port may be specified either as a device name or as a USB
      path.  A device name must have the format `/dev/ttyUSBn`, where
      `n` is a non-negative integer.  A USB path must have the format
      `USBpath` where `path` is a sequence of one or more non-negative
      integers, separated by dots (`.`). Resource
      [/sys/dev/serial](#tag/sysdevserial) returns a list of serial
      ports detected by the meter.

      A serial port string may optionally also specify serial
      parameters.  The parameters must follow the device name and have
      the format `:b/8ps` where `b` is the baud rate (positive integer),
      `8` is the number of bits per character (must be 8), `p` is the
      parity (`n` for none, `e` for even, `o` for odd), and `s` is the
      number of stop bits (1 or 2).

      ## User Privileges

      Users may have the one or more of the following privileges:

        * `unlimited_save`: The user may change (save) the meter
          configuration.

        * `local_save`: The user may change (save) the meter
          configuration but only when connected over a local network
          connection. LAN-connections are considered local if the user's
          browser is on the same subnet as the meter. Bluetooth
          connections are always considered local. All other connections
          (e.g., via proxy server) are considered not local.

        * `view_settings`: The user may view the meter configuration.
          Without this privilege, the user only has access to
          configuration settings that are directly related to the user.

        * `ctrl`: The user may issue control operations such as putting
          a device in a particular operational state (e.g., opening or
          closing a relay or setting the temperature on a thermostat).

        * `restricted_view`: The user only has restricted access to the
          meter data. Specifically, the user may only view registers in
          the [view](#tag/Glossary/View-Names) that matches the user
          name.

        While access to the device is generally governed by these
        privileges, there are two exceptions:

          * Users without `view_settings` privilege may still read their
            own user configuration (but not that of any other user).

          * Users without `save` privilege (`unlimited_save` or
            `local_save`) may still change their own password.

      ## View Names

      Views are used to group related registers.  For example, if a
      single meter measures multiple apartments, a separate view could
      be defined for each apartment.  A user-interface can then offer to
      display all measurements for a particular apartment by selecting
      the desired apartment's view name.  Similarly, users can be setup
      so that they may access only a particular view.  That way, views
      can be used to ensure, for example, that each apartment tenant can
      only view their own data.

      In this API, view names are defined as part of a register name.
      Specifically, the view name is written as prefix of the register
      name, followed by a dot.  For example, the string `apt1.cooktop`
      defines register `cooktop` as being part of view `apt1`.

      ## Virtual Register Formulas

      The values of virtual registers are calculated based on the values
      of physical registers.  The formulas for these calculations are
      limited to addition and subtraction.  When expressed as a JSON
      string, virtual register formulas are written as a sequence of
      register names which are prefixed either by a plus sign (`+`) to
      indicate addition or by a minus sign (`-`) to indicate
      subtraction.  The register names are enclosed in double-quotes.
      Within a register name, a double-quote character can be included
      by prefixing it with a backslash character: `\"`.  Likewise, to
      include a literal backslash character in the name, it must be
      doubled up and written as `\\`.

      As an example, the formula:

      ```json
      +"Panel \"A\""+"Solar+"-"EV"
      ```

      would calculate the virtual register value by adding the values of
      registers `Panel "A"` and `Solar+` and then subtracting the value
      of register `EV`.

      **Note**

      Old meters may still use deprecated operators in virtual register
      formulas.  The syntax for these operators is `op(reg,n)` where
      `op` is either `MIN` or `MAX` (case-sensitive), `reg` is a
      register name, and `n` is an integer constant (usually 0).  These
      operators are deprecated because they only work correctly when the
      formula is applied to rates, not when applied to accumulated
      register values.  When applied to rates, these operators should
      work as follows:

        * `MAX(reg,n)`: Returns the value of register `reg` if it is
        greater than `n` or `n` otherwise.

        * `MIN(reg,n)`: Returns the value of register `reg` if it is
        less than `n` or `n` otherwise.
