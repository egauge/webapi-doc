config:
  type: object
  properties:
    bacnet:
      $ref: "./schemas-auto.yaml#/configBacnet"
    db:
      $ref: "./schemas-auto.yaml#/configDb"
    display:
      $ref: "./schemas-auto.yaml#/configDisplay"
    language_code:
      $ref: "./schemas-auto.yaml#/configLanguageCode"
    local:
      $ref: "./schemas-auto.yaml#/configLocal"
    location:
      $ref: "./schemas-auto.yaml#/configLocation"
    log:
      $ref: "./schemas-auto.yaml#/configLog"
    lua:
      $ref: "./schemas-auto.yaml#/configLua"
    modbus:
      $ref: "./schemas-auto.yaml#/configModbus"
    net:
      $ref: "./schemas-auto.yaml#/configNet"
    push:
      $ref: "./schemas-auto.yaml#/configPush"
    register:
      $ref: "./schemas-auto.yaml#/configRegister"
    time:
      $ref: "./schemas-auto.yaml#/configTime"
    user:
      $ref: "./schemas-auto.yaml#/configUser"
    alert:
      $ref: "./schemas-auto.yaml#/configAlert"
configBacnet:
  type: object
  properties:
    server:
      $ref: "./schemas-auto.yaml#/configBacnetServer"
configBacnetServer:
  type: object
  properties:
    bip:
      $ref: "./schemas-auto.yaml#/configBacnetServerBip"
    enable:
      $ref: "./schemas-auto.yaml#/configBacnetServerEnable"
    epoch-relative:
      $ref: "./schemas-auto.yaml#/configBacnetServerEpochRelative"
    id:
      $ref: "./schemas-auto.yaml#/configBacnetServerId"
    mstp:
      $ref: "./schemas-auto.yaml#/configBacnetServerMstp"
configBacnetServerBip:
  type: object
  properties:
    port:
      $ref: "./schemas-auto.yaml#/configBacnetServerBipPort"
configBacnetServerBipPort:
  type: integer
configBacnetServerEnable:
  type: array
configBacnetServerEnableItem:
  type: string
configBacnetServerEpochRelative:
  type: boolean
configBacnetServerId:
  type: integer
configBacnetServerMstp:
  type: object
  properties:
    mac:
      $ref: "./schemas-auto.yaml#/configBacnetServerMstpMac"
    max-mac:
      $ref: "./schemas-auto.yaml#/configBacnetServerMstpMaxMac"
    port:
      $ref: "./schemas-auto.yaml#/configBacnetServerMstpPort"
configBacnetServerMstpMac:
  type: integer
configBacnetServerMstpMaxMac:
  type: integer
configBacnetServerMstpPort:
  type: string
configDb:
  type: object
  properties:
    epoch:
      $ref: "./schemas-auto.yaml#/configDbEpoch"
configDbEpoch:
  type: string
configDisplay:
  type: object
  properties:
    backlight:
      $ref: "./schemas-auto.yaml#/configDisplayBacklight"
    contrast:
      $ref: "./schemas-auto.yaml#/configDisplayContrast"
    fontset:
      $ref: "./schemas-auto.yaml#/configDisplayFontset"
    screen:
      $ref: "./schemas-auto.yaml#/configDisplayScreen"
    orientation:
      $ref: "./schemas-auto.yaml#/configDisplayOrientation"
configDisplayBacklight:
  type: object
  properties:
    brightness:
      $ref: "./schemas-auto.yaml#/configDisplayBacklightBrightness"
    duration:
      $ref: "./schemas-auto.yaml#/configDisplayBacklightDuration"
configDisplayBacklightBrightness:
  type: integer
configDisplayBacklightDuration:
  type: integer
configDisplayContrast:
  type: integer
configDisplayFontset:
  type: string
configDisplayScreen:
  type: object
  properties:
    registers:
      $ref: "./schemas-auto.yaml#/configDisplayScreenRegisters"
configDisplayScreenRegisters:
  type: object
  properties:
    {name}:
      $ref: "./schemas-auto.yaml#/configDisplayScreenRegisters{regidx}"
configDisplayScreenRegisters{regidx}:
  type: string
configDisplayOrientation:
  type: integer
configLanguageCode:
  type: string
configLocal:
  type: object
  properties:
    sensor:
      $ref: "./schemas-auto.yaml#/configLocalSensor"
    gain:
      $ref: "./schemas-auto.yaml#/configLocalGain"
    update-interval:
      $ref: "./schemas-auto.yaml#/configLocalUpdateInterval"
configLocalSensor:
  type: object
  properties:
    {name}:
      $ref: "./schemas-auto.yaml#/configLocalSensor{snsidx}"
configLocalSensor{snsidx}:
  type: object
  properties:
    channel:
      $ref: "./schemas-auto.yaml#/configLocalSensor{snsidx}Channel"
    error:
      $ref: "./schemas-auto.yaml#/configLocalSensor{snsidx}Error"
    model:
      $ref: "./schemas-auto.yaml#/configLocalSensor{snsidx}Model"
    phase:
      $ref: "./schemas-auto.yaml#/configLocalSensor{snsidx}Phase"
configLocalSensor{snsidx}Channel:
  type: object
  properties:
    bias:
      $ref: "./schemas-auto.yaml#/configLocalSensor{snsidx}ChannelBias"
    mode:
      $ref: "./schemas-auto.yaml#/configLocalSensor{snsidx}ChannelMode"
    scale:
      $ref: "./schemas-auto.yaml#/configLocalSensor{snsidx}ChannelScale"
configLocalSensor{snsidx}ChannelBias:
  type: number
configLocalSensor{snsidx}ChannelMode:
  type: string
configLocalSensor{snsidx}ChannelScale:
  type: number
configLocalSensor{snsidx}Error:
  type: number
configLocalSensor{snsidx}Model:
  type: string
configLocalSensor{snsidx}Phase:
  type: string
configLocalGain:
  type: string
configLocalUpdateInterval:
  type: integer
configLocation:
  type: object
  properties:
    latitude:
      $ref: "./schemas-auto.yaml#/configLocationLatitude"
    longitude:
      $ref: "./schemas-auto.yaml#/configLocationLongitude"
configLocationLatitude:
  type: number
configLocationLongitude:
  type: number
configLog:
  type: object
  properties:
    system:
      $ref: "./schemas-auto.yaml#/configLogSystem"
configLogSystem:
  type: object
  properties:
    size:
      $ref: "./schemas-auto.yaml#/configLogSystemSize"
configLogSystemSize:
  type: integer
configLua:
  type: object
  properties:
    script:
      $ref: "./schemas-auto.yaml#/configLuaScript"
    ctrld:
      $ref: "./schemas-auto.yaml#/configLuaCtrld"
configLuaScript:
  type: object
  properties:
    alertd:
      $ref: "./schemas-auto.yaml#/configLuaScriptAlertd"
    tariff:
      $ref: "./schemas-auto.yaml#/configLuaScriptTariff"
    teamd:
      $ref: "./schemas-auto.yaml#/configLuaScriptTeamd"
configLuaScriptAlertd:
  type: string
configLuaScriptTariff:
  type: string
configLuaScriptTeamd:
  type: string
configLuaCtrld:
  type: object
  properties:
    {name}:
      $ref: "./schemas-auto.yaml#/configLuaCtrld{scriptname}"
configLuaCtrld{scriptname}:
  type: string
configModbus:
  type: object
  properties:
    client:
      $ref: "./schemas-auto.yaml#/configModbusClient"
    server:
      $ref: "./schemas-auto.yaml#/configModbusServer"
configModbusClient:
  type: object
  properties:
    map:
      $ref: "./schemas-auto.yaml#/configModbusClientMap"
configModbusClientMap:
  type: object
  properties:
    {name}:
      $ref: "./schemas-auto.yaml#/configModbusClientMap{mbmname}"
configModbusClientMap{mbmname}:
  type: object
  properties:
    option:
      $ref: "./schemas-auto.yaml#/configModbusClientMap{mbmname}Option"
    reg:
      $ref: "./schemas-auto.yaml#/configModbusClientMap{mbmname}Reg"
configModbusClientMap{mbmname}Option:
  type: object
  properties:
    {name}:
      $ref: "./schemas-auto.yaml#/configModbusClientMap{mbmname}Option{mbmoptname}"
configModbusClientMap{mbmname}Option{mbmoptname}:
  type: string
configModbusClientMap{mbmname}Reg:
  type: array
configModbusClientMap{mbmname}RegItem:
  type: object
  properties:
    name:
      $ref: "./schemas-auto.yaml#/configModbusClientMap{mbmname}RegItemName"
    addr:
      $ref: "./schemas-auto.yaml#/configModbusClientMap{mbmname}RegItemAddr"
    type:
      $ref: "./schemas-auto.yaml#/configModbusClientMap{mbmname}RegItemType"
    kind:
      $ref: "./schemas-auto.yaml#/configModbusClientMap{mbmname}RegItemKind"
    unit:
      $ref: "./schemas-auto.yaml#/configModbusClientMap{mbmname}RegItemUnit"
    offset:
      $ref: "./schemas-auto.yaml#/configModbusClientMap{mbmname}RegItemOffset"
    scale:
      $ref: "./schemas-auto.yaml#/configModbusClientMap{mbmname}RegItemScale"
    access:
      $ref: "./schemas-auto.yaml#/configModbusClientMap{mbmname}RegItemAccess"
configModbusClientMap{mbmname}RegItemName:
  type: string
configModbusClientMap{mbmname}RegItemAddr:
  type: integer
configModbusClientMap{mbmname}RegItemType:
  type: string
configModbusClientMap{mbmname}RegItemKind:
  type: string
configModbusClientMap{mbmname}RegItemUnit:
  type: string
configModbusClientMap{mbmname}RegItemOffset:
  type: number
configModbusClientMap{mbmname}RegItemScale:
  type: number
configModbusClientMap{mbmname}RegItemAccess:
  type: string
configModbusServer:
  type: object
  properties:
    enable:
      $ref: "./schemas-auto.yaml#/configModbusServerEnable"
    id:
      $ref: "./schemas-auto.yaml#/configModbusServerId"
    rtu:
      $ref: "./schemas-auto.yaml#/configModbusServerRtu"
    tcp:
      $ref: "./schemas-auto.yaml#/configModbusServerTcp"
configModbusServerEnable:
  type: array
configModbusServerEnableItem:
  type: string
configModbusServerId:
  type: integer
configModbusServerRtu:
  type: object
  properties:
    port:
      $ref: "./schemas-auto.yaml#/configModbusServerRtuPort"
configModbusServerRtuPort:
  type: string
configModbusServerTcp:
  type: object
  properties:
    port:
      $ref: "./schemas-auto.yaml#/configModbusServerTcpPort"
configModbusServerTcpPort:
  type: integer
configNet:
  type: object
  properties:
    ethernet:
      $ref: "./schemas-auto.yaml#/configNetEthernet"
    homeplug:
      $ref: "./schemas-auto.yaml#/configNetHomeplug"
    hostname:
      $ref: "./schemas-auto.yaml#/configNetHostname"
    http:
      $ref: "./schemas-auto.yaml#/configNetHttp"
    ipv4:
      $ref: "./schemas-auto.yaml#/configNetIpv4"
    goproxy:
      $ref: "./schemas-auto.yaml#/configNetGoproxy"
    nameserver:
      $ref: "./schemas-auto.yaml#/configNetNameserver"
    ntp:
      $ref: "./schemas-auto.yaml#/configNetNtp"
    proxy:
      $ref: "./schemas-auto.yaml#/configNetProxy"
    ptp:
      $ref: "./schemas-auto.yaml#/configNetPtp"
configNetEthernet:
  type: object
  properties:
    watchdog:
      $ref: "./schemas-auto.yaml#/configNetEthernetWatchdog"
configNetEthernetWatchdog:
  type: boolean
configNetHomeplug:
  type: object
  properties:
    region:
      $ref: "./schemas-auto.yaml#/configNetHomeplugRegion"
configNetHomeplugRegion:
  type: string
configNetHostname:
  type: string
configNetHttp:
  type: object
  properties:
    certificate:
      $ref: "./schemas-auto.yaml#/configNetHttpCertificate"
    cgi-bin:
      $ref: "./schemas-auto.yaml#/configNetHttpCgiBin"
configNetHttpCertificate:
  type: string
configNetHttpCgiBin:
  type: string
configNetIpv4:
  type: object
  properties:
    dhcp:
      $ref: "./schemas-auto.yaml#/configNetIpv4Dhcp"
    address:
      $ref: "./schemas-auto.yaml#/configNetIpv4Address"
    broadcast:
      $ref: "./schemas-auto.yaml#/configNetIpv4Broadcast"
    netmask:
      $ref: "./schemas-auto.yaml#/configNetIpv4Netmask"
    network:
      $ref: "./schemas-auto.yaml#/configNetIpv4Network"
    gateway:
      $ref: "./schemas-auto.yaml#/configNetIpv4Gateway"
configNetIpv4Dhcp:
  type: boolean
configNetIpv4Address:
  type: string
configNetIpv4Broadcast:
  type: string
configNetIpv4Netmask:
  type: string
configNetIpv4Network:
  type: string
configNetIpv4Gateway:
  type: string
configNetGoproxy:
  type: object
  properties:
    enable:
      $ref: "./schemas-auto.yaml#/configNetGoproxyEnable"
    server:
      $ref: "./schemas-auto.yaml#/configNetGoproxyServer"
configNetGoproxyEnable:
  type: boolean
configNetGoproxyServer:
  type: string
configNetNameserver:
  type: object
  properties:
    server:
      $ref: "./schemas-auto.yaml#/configNetNameserverServer"
configNetNameserverServer:
  type: array
configNetNameserverServerItem:
  type: string
configNetNtp:
  type: object
  properties:
    server:
      $ref: "./schemas-auto.yaml#/configNetNtpServer"
configNetNtpServer:
  type: array
configNetNtpServerItem:
  type: string
configNetProxy:
  type: object
  properties:
    enable:
      $ref: "./schemas-auto.yaml#/configNetProxyEnable"
    server:
      $ref: "./schemas-auto.yaml#/configNetProxyServer"
configNetProxyEnable:
  type: boolean
configNetProxyServer:
  type: string
configNetPtp:
  type: object
  properties:
    client_only:
      $ref: "./schemas-auto.yaml#/configNetPtpClientOnly"
    interface:
      $ref: "./schemas-auto.yaml#/configNetPtpInterface"
configNetPtpClientOnly:
  type: boolean
configNetPtpInterface:
  type: object
  properties:
    {name}:
      $ref: "./schemas-auto.yaml#/configNetPtpInterface{ptpidx}"
configNetPtpInterface{ptpidx}:
  type: object
  properties:
    transport:
      $ref: "./schemas-auto.yaml#/configNetPtpInterface{ptpidx}Transport"
configNetPtpInterface{ptpidx}Transport:
  type: string
configPush:
  type: object
  properties:
    interval:
      $ref: "./schemas-auto.yaml#/configPushInterval"
    options:
      $ref: "./schemas-auto.yaml#/configPushOptions"
    password:
      $ref: "./schemas-auto.yaml#/configPushPassword"
    service:
      $ref: "./schemas-auto.yaml#/configPushService"
    uri:
      $ref: "./schemas-auto.yaml#/configPushUri"
    user:
      $ref: "./schemas-auto.yaml#/configPushUser"
configPushInterval:
  type: integer
configPushOptions:
  type: string
configPushPassword:
  type: string
configPushService:
  type: string
configPushUri:
  type: string
configPushUser:
  type: string
configRegister:
  type: object
  properties:
    physical:
      $ref: "./schemas-auto.yaml#/configRegisterPhysical"
    virtual:
      $ref: "./schemas-auto.yaml#/configRegisterVirtual"
configRegisterPhysical:
  type: object
  properties:
    {name}:
      $ref: "./schemas-auto.yaml#/configRegisterPhysical{regname}"
configRegisterPhysical{regname}:
  type: object
  properties:
    dev:
      $ref: "./schemas-auto.yaml#/configRegisterPhysical{regname}Dev"
    did:
      $ref: "./schemas-auto.yaml#/configRegisterPhysical{regname}Did"
    type:
      $ref: "./schemas-auto.yaml#/configRegisterPhysical{regname}Type"
    value:
      $ref: "./schemas-auto.yaml#/configRegisterPhysical{regname}Value"
configRegisterPhysical{regname}Dev:
  type: string
configRegisterPhysical{regname}Did:
  type: integer
configRegisterPhysical{regname}Type:
  type: string
configRegisterPhysical{regname}Value:
  type: string
configRegisterVirtual:
  type: object
  properties:
    {name}:
      $ref: "./schemas-auto.yaml#/configRegisterVirtual{regname}"
configRegisterVirtual{regname}:
  type: object
  properties:
    value:
      $ref: "./schemas-auto.yaml#/configRegisterVirtual{regname}Value"
configRegisterVirtual{regname}Value:
  type: array
configRegisterVirtual{regname}ValueItem:
  type: object
  properties:
    op:
      $ref: "./schemas-auto.yaml#/configRegisterVirtual{regname}ValueItemOp"
    register:
      $ref: "./schemas-auto.yaml#/configRegisterVirtual{regname}ValueItemRegister"
configRegisterVirtual{regname}ValueItemOp:
  type: string
configRegisterVirtual{regname}ValueItemRegister:
  type: string
configTime:
  type: object
  properties:
    zone:
      $ref: "./schemas-auto.yaml#/configTimeZone"
configTimeZone:
  type: string
configUser:
  type: object
  properties:
    {name}:
      $ref: "./schemas-auto.yaml#/configUser{username}"
configUser{username}:
  type: object
  properties:
    priv:
      $ref: "./schemas-auto.yaml#/configUser{username}Priv"
    hash:
      $ref: "./schemas-auto.yaml#/configUser{username}Hash"
configUser{username}Priv:
  type: array
configUser{username}PrivItem:
  type: string
configUser{username}Hash:
  type: string
configAlert:
  type: object
  properties:
    custom:
      $ref: "./schemas-auto.yaml#/configAlertCustom"
    reporter:
      $ref: "./schemas-auto.yaml#/configAlertReporter"
    sys-prio:
      $ref: "./schemas-auto.yaml#/configAlertSysPrio"
configAlertCustom:
  type: array
configAlertCustomItem:
  type: object
  properties:
    name:
      $ref: "./schemas-auto.yaml#/configAlertCustomItemName"
    detail:
      $ref: "./schemas-auto.yaml#/configAlertCustomItemDetail"
    frequency:
      $ref: "./schemas-auto.yaml#/configAlertCustomItemFrequency"
    priority:
      $ref: "./schemas-auto.yaml#/configAlertCustomItemPriority"
    cond:
      $ref: "./schemas-auto.yaml#/configAlertCustomItemCond"
configAlertCustomItemName:
  type: string
configAlertCustomItemDetail:
  type: string
configAlertCustomItemFrequency:
  type: string
configAlertCustomItemPriority:
  type: integer
configAlertCustomItemCond:
  type: object
  properties:
    lhs:
      $ref: "./schemas-auto.yaml#/configAlertCustomItemCondLhs"
    op:
      $ref: "./schemas-auto.yaml#/configAlertCustomItemCondOp"
    rhs:
      $ref: "./schemas-auto.yaml#/configAlertCustomItemCondRhs"
configAlertCustomItemCondLhs:
  type: string
configAlertCustomItemCondOp:
  type: string
configAlertCustomItemCondRhs:
  type: string
configAlertReporter:
  type: object
  properties:
    web:
      $ref: "./schemas-auto.yaml#/configAlertReporterWeb"
    mail:
      $ref: "./schemas-auto.yaml#/configAlertReporterMail"
configAlertReporterWeb:
  type: object
  properties:
    min-priority:
      $ref: "./schemas-auto.yaml#/configAlertReporterWebMinPriority"
    service:
      $ref: "./schemas-auto.yaml#/configAlertReporterWebService"
    uri:
      $ref: "./schemas-auto.yaml#/configAlertReporterWebUri"
    options:
      $ref: "./schemas-auto.yaml#/configAlertReporterWebOptions"
    user:
      $ref: "./schemas-auto.yaml#/configAlertReporterWebUser"
    password:
      $ref: "./schemas-auto.yaml#/configAlertReporterWebPassword"
configAlertReporterWebMinPriority:
  type: integer
configAlertReporterWebService:
  type: string
configAlertReporterWebUri:
  type: string
configAlertReporterWebOptions:
  type: string
configAlertReporterWebUser:
  type: string
configAlertReporterWebPassword:
  type: string
configAlertReporterMail:
  type: object
  properties:
    server:
      $ref: "./schemas-auto.yaml#/configAlertReporterMailServer"
    user:
      $ref: "./schemas-auto.yaml#/configAlertReporterMailUser"
    password:
      $ref: "./schemas-auto.yaml#/configAlertReporterMailPassword"
    from-address:
      $ref: "./schemas-auto.yaml#/configAlertReporterMailFromAddress"
    to:
      $ref: "./schemas-auto.yaml#/configAlertReporterMailTo"
configAlertReporterMailServer:
  type: string
configAlertReporterMailUser:
  type: string
configAlertReporterMailPassword:
  type: string
configAlertReporterMailFromAddress:
  type: string
configAlertReporterMailTo:
  type: array
configAlertReporterMailToItem:
  type: object
  properties:
    format:
      $ref: "./schemas-auto.yaml#/configAlertReporterMailToItemFormat"
    min-priority:
      $ref: "./schemas-auto.yaml#/configAlertReporterMailToItemMinPriority"
    address:
      $ref: "./schemas-auto.yaml#/configAlertReporterMailToItemAddress"
configAlertReporterMailToItemFormat:
  type: string
configAlertReporterMailToItemMinPriority:
  type: integer
configAlertReporterMailToItemAddress:
  type: string
configAlertSysPrio:
  type: array
configAlertSysPrioItem:
  type: integer
ctrl:
  type: object
  properties:
    interface:
      $ref: "./schemas-auto.yaml#/ctrlInterface"
ctrlInterface:
  type: object
  properties:
    {name}:
      $ref: "./schemas-auto.yaml#/ctrlInterface{ifname}"
ctrlInterface{ifname}:
  type: object
  properties:
    method:
      $ref: "./schemas-auto.yaml#/ctrlInterface{ifname}Method"
ctrlInterface{ifname}Method:
  type: array
ctrlInterface{ifname}MethodItem:
  type: object
  properties:
    name:
      $ref: "./schemas-auto.yaml#/ctrlInterface{ifname}MethodItemName"
    in:
      $ref: "./schemas-auto.yaml#/ctrlInterface{ifname}MethodItemIn"
    in_names:
      $ref: "./schemas-auto.yaml#/ctrlInterface{ifname}MethodItemInNames"
    out:
      $ref: "./schemas-auto.yaml#/ctrlInterface{ifname}MethodItemOut"
    doc:
      $ref: "./schemas-auto.yaml#/ctrlInterface{ifname}MethodItemDoc"
ctrlInterface{ifname}MethodItemName:
  type: string
ctrlInterface{ifname}MethodItemIn:
  type: string
ctrlInterface{ifname}MethodItemInNames:
  type: array
ctrlInterface{ifname}MethodItemInNamesItem:
  type: string
ctrlInterface{ifname}MethodItemOut:
  type: string
ctrlInterface{ifname}MethodItemDoc:
  type: string
lua:
  type: object
  properties:
    var:
      $ref: "./schemas-auto.yaml#/luaVar"
luaVar:
  type: object
  properties:
    {name}:
      $ref: "./schemas-auto.yaml#/luaVar{varname}"
luaVar{varname}:
  type: object
  properties:
    value:
      $ref: "./schemas-auto.yaml#/luaVar{varname}Value"
    desc:
      $ref: "./schemas-auto.yaml#/luaVar{varname}Desc"
luaVar{varname}Value:
  type: string
luaVar{varname}Desc:
  type: string
sys:
  type: object
  properties:
    alert:
      $ref: "./schemas-auto.yaml#/sysAlert"
    boot:
      $ref: "./schemas-auto.yaml#/sysBoot"
    db:
      $ref: "./schemas-auto.yaml#/sysDb"
    dev:
      $ref: "./schemas-auto.yaml#/sysDev"
    func:
      $ref: "./schemas-auto.yaml#/sysFunc"
    modbus:
      $ref: "./schemas-auto.yaml#/sysModbus"
    model:
      $ref: "./schemas-auto.yaml#/sysModel"
    net:
      $ref: "./schemas-auto.yaml#/sysNet"
    reboot:
      $ref: "./schemas-auto.yaml#/sysReboot"
    sn:
      $ref: "./schemas-auto.yaml#/sysSn"
    status:
      $ref: "./schemas-auto.yaml#/sysStatus"
    time:
      $ref: "./schemas-auto.yaml#/sysTime"
    uptime:
      $ref: "./schemas-auto.yaml#/sysUptime"
    version:
      $ref: "./schemas-auto.yaml#/sysVersion"
sysAlert:
  type: array
sysAlertItem:
  type: object
  properties:
    id:
      $ref: "./schemas-auto.yaml#/sysAlertItemId"
    reason:
      $ref: "./schemas-auto.yaml#/sysAlertItemReason"
sysAlertItemId:
  type: string
sysAlertItemReason:
  type: string
sysBoot:
  type: object
  properties:
    reason:
      $ref: "./schemas-auto.yaml#/sysBootReason"
    time:
      $ref: "./schemas-auto.yaml#/sysBootTime"
sysBootReason:
  type: string
sysBootTime:
  type: string
sysDb:
  type: object
  properties:
    max-registers:
      $ref: "./schemas-auto.yaml#/sysDbMaxRegisters"
    level:
      $ref: "./schemas-auto.yaml#/sysDbLevel"
sysDbMaxRegisters:
  type: integer
sysDbLevel:
  type: array
sysDbLevelItem:
  type: object
  properties:
    interval:
      $ref: "./schemas-auto.yaml#/sysDbLevelItemInterval"
    row-count:
      $ref: "./schemas-auto.yaml#/sysDbLevelItemRowCount"
    volatile:
      $ref: "./schemas-auto.yaml#/sysDbLevelItemVolatile"
sysDbLevelItemInterval:
  type: integer
sysDbLevelItemRowCount:
  type: integer
sysDbLevelItemVolatile:
  type: boolean
sysDev:
  type: object
  properties:
    serial:
      $ref: "./schemas-auto.yaml#/sysDevSerial"
sysDevSerial:
  type: array
sysDevSerialItem:
  type: object
  properties:
    devpath:
      $ref: "./schemas-auto.yaml#/sysDevSerialItemDevpath"
    manufacturer:
      $ref: "./schemas-auto.yaml#/sysDevSerialItemManufacturer"
    product:
      $ref: "./schemas-auto.yaml#/sysDevSerialItemProduct"
    sn:
      $ref: "./schemas-auto.yaml#/sysDevSerialItemSn"
    version:
      $ref: "./schemas-auto.yaml#/sysDevSerialItemVersion"
sysDevSerialItemDevpath:
  type: string
sysDevSerialItemManufacturer:
  type: string
sysDevSerialItemProduct:
  type: string
sysDevSerialItemSn:
  type: string
sysDevSerialItemVersion:
  type: string
sysFunc:
  type: object
  properties:
    basic:
      $ref: "./schemas-auto.yaml#/sysFuncBasic"
    alert:
      $ref: "./schemas-auto.yaml#/sysFuncAlert"
sysFuncBasic:
  type: object
  properties:
    {name}:
      $ref: "./schemas-auto.yaml#/sysFuncBasic{fname}"
sysFuncBasic{fname}:
  type: object
  properties:
    arg:
      $ref: "./schemas-auto.yaml#/sysFuncBasic{fname}Arg"
    help:
      $ref: "./schemas-auto.yaml#/sysFuncBasic{fname}Help"
    min-args:
      $ref: "./schemas-auto.yaml#/sysFuncBasic{fname}MinArgs"
sysFuncBasic{fname}Arg:
  type: array
sysFuncBasic{fname}ArgItem:
  type: object
  properties:
    name:
      $ref: "./schemas-auto.yaml#/sysFuncBasic{fname}ArgItemName"
    type:
      $ref: "./schemas-auto.yaml#/sysFuncBasic{fname}ArgItemType"
sysFuncBasic{fname}ArgItemName:
  type: string
sysFuncBasic{fname}ArgItemType:
  type: string
sysFuncBasic{fname}Help:
  type: string
sysFuncBasic{fname}MinArgs:
  type: string
sysFuncAlert:
  type: object
  properties:
    {name}:
      $ref: "./schemas-auto.yaml#/sysFuncAlert{fname}"
sysFuncAlert{fname}:
  type: object
  properties:
    arg:
      $ref: "./schemas-auto.yaml#/sysFuncAlert{fname}Arg"
    help:
      $ref: "./schemas-auto.yaml#/sysFuncAlert{fname}Help"
    min-args:
      $ref: "./schemas-auto.yaml#/sysFuncAlert{fname}MinArgs"
sysFuncAlert{fname}Arg:
  type: array
sysFuncAlert{fname}ArgItem:
  type: object
  properties:
    name:
      $ref: "./schemas-auto.yaml#/sysFuncAlert{fname}ArgItemName"
    type:
      $ref: "./schemas-auto.yaml#/sysFuncAlert{fname}ArgItemType"
sysFuncAlert{fname}ArgItemName:
  type: string
sysFuncAlert{fname}ArgItemType:
  type: string
sysFuncAlert{fname}Help:
  type: string
sysFuncAlert{fname}MinArgs:
  type: string
sysModbus:
  type: object
  properties:
    client:
      $ref: "./schemas-auto.yaml#/sysModbusClient"
sysModbusClient:
  type: object
  properties:
    map:
      $ref: "./schemas-auto.yaml#/sysModbusClientMap"
sysModbusClientMap:
  type: object
  properties:
    {name}:
      $ref: "./schemas-auto.yaml#/sysModbusClientMap{mbmname}"
sysModbusClientMap{mbmname}:
  type: object
  properties:
    option:
      $ref: "./schemas-auto.yaml#/sysModbusClientMap{mbmname}Option"
    reg:
      $ref: "./schemas-auto.yaml#/sysModbusClientMap{mbmname}Reg"
sysModbusClientMap{mbmname}Option:
  type: object
  properties:
    {name}:
      $ref: "./schemas-auto.yaml#/sysModbusClientMap{mbmname}Option{mbmoptname}"
sysModbusClientMap{mbmname}Option{mbmoptname}:
  type: string
sysModbusClientMap{mbmname}Reg:
  type: array
sysModbusClientMap{mbmname}RegItem:
  type: object
  properties:
    name:
      $ref: "./schemas-auto.yaml#/sysModbusClientMap{mbmname}RegItemName"
    addr:
      $ref: "./schemas-auto.yaml#/sysModbusClientMap{mbmname}RegItemAddr"
    type:
      $ref: "./schemas-auto.yaml#/sysModbusClientMap{mbmname}RegItemType"
    kind:
      $ref: "./schemas-auto.yaml#/sysModbusClientMap{mbmname}RegItemKind"
    unit:
      $ref: "./schemas-auto.yaml#/sysModbusClientMap{mbmname}RegItemUnit"
    offset:
      $ref: "./schemas-auto.yaml#/sysModbusClientMap{mbmname}RegItemOffset"
    scale:
      $ref: "./schemas-auto.yaml#/sysModbusClientMap{mbmname}RegItemScale"
    access:
      $ref: "./schemas-auto.yaml#/sysModbusClientMap{mbmname}RegItemAccess"
sysModbusClientMap{mbmname}RegItemName:
  type: string
sysModbusClientMap{mbmname}RegItemAddr:
  type: integer
sysModbusClientMap{mbmname}RegItemType:
  type: string
sysModbusClientMap{mbmname}RegItemKind:
  type: string
sysModbusClientMap{mbmname}RegItemUnit:
  type: string
sysModbusClientMap{mbmname}RegItemOffset:
  type: number
sysModbusClientMap{mbmname}RegItemScale:
  type: number
sysModbusClientMap{mbmname}RegItemAccess:
  type: string
sysModel:
  type: string
sysNet:
  type: object
  properties:
    ipv4:
      $ref: "./schemas-auto.yaml#/sysNetIpv4"
    ntp:
      $ref: "./schemas-auto.yaml#/sysNetNtp"
    wlan:
      $ref: "./schemas-auto.yaml#/sysNetWlan"
sysNetIpv4:
  type: object
  properties:
    dhcp:
      $ref: "./schemas-auto.yaml#/sysNetIpv4Dhcp"
    address:
      $ref: "./schemas-auto.yaml#/sysNetIpv4Address"
    broadcast:
      $ref: "./schemas-auto.yaml#/sysNetIpv4Broadcast"
    netmask:
      $ref: "./schemas-auto.yaml#/sysNetIpv4Netmask"
    network:
      $ref: "./schemas-auto.yaml#/sysNetIpv4Network"
    gateway:
      $ref: "./schemas-auto.yaml#/sysNetIpv4Gateway"
sysNetIpv4Dhcp:
  type: boolean
sysNetIpv4Address:
  type: string
sysNetIpv4Broadcast:
  type: string
sysNetIpv4Netmask:
  type: string
sysNetIpv4Network:
  type: string
sysNetIpv4Gateway:
  type: string
sysNetNtp:
  type: object
  properties:
    server:
      $ref: "./schemas-auto.yaml#/sysNetNtpServer"
sysNetNtpServer:
  type: array
sysNetNtpServerItem:
  type: object
  properties:
    address:
      $ref: "./schemas-auto.yaml#/sysNetNtpServerItemAddress"
    name:
      $ref: "./schemas-auto.yaml#/sysNetNtpServerItemName"
    state:
      $ref: "./schemas-auto.yaml#/sysNetNtpServerItemState"
    weight:
      $ref: "./schemas-auto.yaml#/sysNetNtpServerItemWeight"
    trust_level:
      $ref: "./schemas-auto.yaml#/sysNetNtpServerItemTrustLevel"
    stratum:
      $ref: "./schemas-auto.yaml#/sysNetNtpServerItemStratum"
    next_poll:
      $ref: "./schemas-auto.yaml#/sysNetNtpServerItemNextPoll"
    poll_interval:
      $ref: "./schemas-auto.yaml#/sysNetNtpServerItemPollInterval"
    offset:
      $ref: "./schemas-auto.yaml#/sysNetNtpServerItemOffset"
    delay:
      $ref: "./schemas-auto.yaml#/sysNetNtpServerItemDelay"
    jitter:
      $ref: "./schemas-auto.yaml#/sysNetNtpServerItemJitter"
sysNetNtpServerItemAddress:
  type: string
sysNetNtpServerItemName:
  type: string
sysNetNtpServerItemState:
  type: string
sysNetNtpServerItemWeight:
  type: integer
sysNetNtpServerItemTrustLevel:
  type: integer
sysNetNtpServerItemStratum:
  type: integer
sysNetNtpServerItemNextPoll:
  type: integer
sysNetNtpServerItemPollInterval:
  type: integer
sysNetNtpServerItemOffset:
  type: number
sysNetNtpServerItemDelay:
  type: number
sysNetNtpServerItemJitter:
  type: number
sysNetWlan:
  type: object
  properties:
    ap:
      $ref: "./schemas-auto.yaml#/sysNetWlanAp"
    net:
      $ref: "./schemas-auto.yaml#/sysNetWlanNet"
sysNetWlanAp:
  type: array
sysNetWlanApItem:
  type: object
  properties:
    bssid:
      $ref: "./schemas-auto.yaml#/sysNetWlanApItemBssid"
    flags:
      $ref: "./schemas-auto.yaml#/sysNetWlanApItemFlags"
    frequency:
      $ref: "./schemas-auto.yaml#/sysNetWlanApItemFrequency"
    signal_level:
      $ref: "./schemas-auto.yaml#/sysNetWlanApItemSignalLevel"
    ssid:
      $ref: "./schemas-auto.yaml#/sysNetWlanApItemSsid"
sysNetWlanApItemBssid:
  type: string
sysNetWlanApItemFlags:
  type: string
sysNetWlanApItemFrequency:
  type: string
sysNetWlanApItemSignalLevel:
  type: string
sysNetWlanApItemSsid:
  type: string
sysNetWlanNet:
  type: array
sysNetWlanNetItem:
  type: object
  properties:
    network_id:
      $ref: "./schemas-auto.yaml#/sysNetWlanNetItemNetworkId"
    bssid:
      $ref: "./schemas-auto.yaml#/sysNetWlanNetItemBssid"
    flags:
      $ref: "./schemas-auto.yaml#/sysNetWlanNetItemFlags"
    ssid:
      $ref: "./schemas-auto.yaml#/sysNetWlanNetItemSsid"
sysNetWlanNetItemNetworkId:
  type: string
sysNetWlanNetItemBssid:
  type: string
sysNetWlanNetItemFlags:
  type: string
sysNetWlanNetItemSsid:
  type: string
sysReboot:
  type: boolean
sysSn:
  type: string
sysStatus:
  type: object
  properties:
    {name}:
      $ref: "./schemas-auto.yaml#/sysStatus{token}"
sysStatus{token}:
  type: object
  properties:
    args:
      $ref: "./schemas-auto.yaml#/sysStatus{token}Args"
    done:
      $ref: "./schemas-auto.yaml#/sysStatus{token}Done"
    error:
      $ref: "./schemas-auto.yaml#/sysStatus{token}Error"
    info:
      $ref: "./schemas-auto.yaml#/sysStatus{token}Info"
    progress:
      $ref: "./schemas-auto.yaml#/sysStatus{token}Progress"
    ts:
      $ref: "./schemas-auto.yaml#/sysStatus{token}Ts"
sysStatus{token}Args:
  type: array
sysStatus{token}ArgsItem:
  type: string
sysStatus{token}Done:
  type: boolean
sysStatus{token}Error:
  type: string
sysStatus{token}Info:
  type: string
sysStatus{token}Progress:
  type: number
sysStatus{token}Ts:
  type: string
sysTime:
  type: string
sysUptime:
  type: number
sysVersion:
  type: object
  properties:
    firmware:
      $ref: "./schemas-auto.yaml#/sysVersionFirmware"
    kernel:
      $ref: "./schemas-auto.yaml#/sysVersionKernel"
sysVersionFirmware:
  type: string
sysVersionKernel:
  type: string
