/auth/login:
  post:
    tags:
    - /auth
    summary: Obtain token
    operationId: authLoginPost
    description: |
      There are two ways for supplying credentials to
      obtain a token:

        1) With a Digest object in the request body, a token is
        obtained without transmitting the password.

        1) With a Password object in the request body, a token is
        obtained with a password.  This option is available only over
        a secure connection (`https://` scheme).

        We recommend using Digest-based authentication whenever possible.
    requestBody:
      content:
        application/json:
          schema:
            oneOf:
            - $ref: "./schemas.yaml#/DigestObject"
            - $ref: "./schemas.yaml#/PasswordObject"
    responses:
      "200":
        description: Authentication response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/JWTObject"
      "400":
        description: Bad Request.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/ErrorObject"
            example: {"error":"Bad Request"}

/auth/logout:
  get:
    tags:
    - /auth
    summary: Revoke token
    operationId: authLogoutGet
    description: |
      Revoke the JWT supplied as the bearer token in the Authorization
      header.
    responses:
      "200":
        description: Logout response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/StatusObject"
      "400":
        description: Bad Request.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/ErrorObject"
            example: {"error":"Bad Request"}

/auth/unauthorized:
  get:
    tags:
    - /auth
    summary: Validate token
    operationId: authUnauthorizedGet
    description: |
      This resource returns a 401 response unless the request contains
      an `Authorized` header with a valid JWT token.  This can be used
      to check the validity of a JWT token and, if invalid, obtain the
      realm and server nonce required to refresh the token.
    responses:
      "200":
        description: Status response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/StatusObject"
              example: You are logged in.
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/auth/rights:
  get:
    tags:
    - /auth
    summary: Get token rights
    operationId: authRightsGet
    description: Return the list of rights associated with the token.
    responses:
      "200":
        description: Rights response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/RightsObject"
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/capture:
  get:
    tags:
    - /capture
    summary: Capture waveform data
    operationId: captureGet
    parameters:
    - name: C
      in: query
      description: The channel number to use as the trigger.
      schema:
        type: integer
        minimum: 0
    - name: M
      in: query
      description: |
        The trigger mode to use.  `any` triggers immediately, `rise`
        triggers when a rising edge crosses the trigger level, `fall`
        triggers when a falling edge crosses the trigger level, `gt`
        triggers when the trigger channel's sample value is greater
        than the trigger level, and `lt` triggers when it is less than
        the trigger level.
      schema:
        type: string
        enum: [any, rise, fall, gt, lt]
    - name: L
      in: query
      description: The trigger level.
      schema:
        type: number
    - name: R
      in: query
      description: |
        If present, this query parameter cancels a pending capture and
        resets the state to `available`.  If a value for query
        parameter `n` is also specified, only the matching capture is
        canceled.  Otherwise, any pending capture is canceled.
      allowEmptyValue: true
      schema:
        type: boolean
    - name: T
      in: query
      description: |
        Trigger timeout in milliseconds.  After starting a capture, if
        the trigger condition is not satisfied within this timeout
        period, the capture is auto-triggered.
      schema:
        type: number
        minimum: 0
    - name: c
      in: query
      description: |
        Channel number to be captured.  This query parameter can be
        specified multiple times to capture multiple channels.  If not
        specified, all configured channels are captured by default.
      schema:
        type: integer
        minimum: 0
    - name: d
      in: query
      description: |
        Capture duration in seconds.  If less than or equal to 0, the
        maximum number of samples are acquired. This maximum is
        implementation dependent but, generally, a fixed size buffer
        is used to store all samples of all channels, so the more
        channels are being captured, the lower the upper bound for
        this value.  If the value is greater than this upper bound, it
        is automatically capped at that value.
      schema:
        type: number
    - name: i
      in: query
      allowEmptyValue: true
      description: |
        Return a channel info object, describing each channel that may
        be captured, its name and its physical unit.
      schema:
        type: boolean
    - name: n
      in: query
      allowEmptyValue: true
      description: |
        Non-blocking operation.  If the query parameter has no value
        or an empty string value, this requests that a capture is
        initiated without waiting for the result to be available
        (asynchronous operation).  In this case, a cookie object is
        returned which contains a token.  The token can be used in
        subsequent requests to fetch the result of the capture or to
        check on its status.

        If a value is specified, it must be a token returned in an
        earlier cookie object response.  In this case, the capture
        status is reported via a progress object if it is still
        pending or a capture result object if the capture is complete.
      schema:
        type: integer
        minimum: 0
    - name: p
      in: query
      description: |
        Pre-trigger duration in seconds.  Specifies how many seconds
        of samples before the trigger point should be acquired.  If
        omitted, this defaults to 0 seconds of pre-trigger data.
      schema:
        type: number
    - name: t
      in: query
      description: |
        If present, this query parameter requests that the data should
        be returned as plain text rather than as JSON.
      deprecated: true
      schema:
        type: boolean
    - name: r
      in: query
      allowEmptyValue: true
      description: |
        If present, this query parameter requests that the sample
        values should be returned as raw (digital) sample values
        rather than as values converted to the channel's physical
        unit.
      schema:
        type: boolean
    responses:
      "200":
        description: Capture response.
        content:
          application/json:
            schema:
              oneOf:
              - $ref: "./schemas.yaml#/CaptureChannelInfoObject"
              - $ref: "./schemas.yaml#/CaptureCookieObject"
              - $ref: "./schemas.yaml#/CaptureProgressObject"
              - $ref: "./schemas.yaml#/CaptureResultObject"
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/cmd/activate:
  post:
    tags:
    - /cmd
    summary: Activate a service
    operationId: cmdActivatePost
    description: |
        Activate a service with an external provider (web server).

        This request returns a token which can then be used to monitor
        the status of the operation.  See
        [/sys/status/*token*/result](path:/sys/status/{token}/result)
        for details.
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              service:
                type: string
                enum:
                  - alert
                  - push
                description: |
                  The type of service to activate.  This can be `alert` for
                  the alert reporting service or `push` for the data-sharing
                  service.
              provider:
                type: string
                example: Cloudly's Alert Service
                description: |
                  The name of the service provider with which to activate
                  the service.
            required: [service, provider]
    responses:
      "200":
        description: Activation response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/TokenObject"
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/cmd/cancel:
  post:
    tags:
    - /cmd
    summary: Cancel pending operation
    operationId: cmdCancelPost
    description: |
      Cancel the long-running operation identified by its token.
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              token:
                type: string
                minLength: 32
                description: |
                  The token of the operation to be cancelled.  This
                  token is the hexadecimal string (typically 32
                  characters long) that was returned when the
                  operation was initiated.
                example: 473c31462e62848b5352314dfc608669
    responses:
      "200":
        description: Cancel response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/StatusObject"
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/cmd/clear:
  post:
    tags:
    - /cmd
    summary: Clear data
    operationId: cmdClearPost
    description: |
      Clear data.  The string in the request body identifies what data
      to clear:

        * `excess`: For register values that are read from a remote
          device, it is possible that the meter may not be able to
          reach the remote device at times (e.g., due to a networking
          problem).  If the remote device provides cumulative values,
          this means that when the remote device becomes accessible
          again, the cumulative value may have increased
          significantly, which could then cause a spike in the graphed
          values for that register.  To prevent such spikes, the meter
          will instead record the jump as an *excess* and then replay
          that excess gradually over time so that the meter can catch
          up to the true value without causing a spike.  Executing
          this command clears to zero the excess of all registers.
          This will typically cause a spike in the graphed values for
          any remote registers which had a non-zero excess but, on the
          positive side, will then ensure that the cumulative
          values afterwards match those of the remote
          device(s).

          **Note** If excess keeps accumulating, it may be better to
          use the [`spiky`](path:/config/remote) option for remote
          registers.

        * `web_cache`: Clears the web server cache of compressed
          files.  Under normal circumstances, it is not necessary to
          clear this cache explicitly.  However, this command can be
          used in case the cache gets corrupted, e.g., due to a power
          cycle while the meter is in the middle of writing a cache
          file.
    requestBody:
      content:
        application/json:
          schema:
            type: string
            enum:
            - excess
            - web_cache
    responses:
      "200":
        description: Clear response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/StatusObject"
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/cmd/db:
  post:
    tags:
    - /cmd
    summary: Manipulate database
    operationId: cmdDbPost
    description: |
      This command supports restoring the database from a backup file,
      zeroing of all or parts of the database, as well as splitting
      the positive values of certain registers into separate
      positive-only registers.
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              action:
                type: string
                enum:
                - restore
                - zero
                - split
                description: |
                  The action to perform.  The possible values are:

                    * `restore`: Restores data from a backup file to
                      the device database.
                    * `zero`: Zeroes out one or more registers in the
                      device database.
                    * `split`: Split the positive changes of a net
                      register into a separate positive-only register.
              from:
                description: |
                  If specified, this limits the operation to data
                  that is not older than the timestamp specified
                  here.
                $ref: "./schemas.yaml#/ForeverStamp"
              to:
                description: |
                  If specified, this limits the operation to data
                  that is not younger than the timestamp specified
                  here.
                $ref: "./schemas.yaml#/ForeverStamp"
              regs:
                type: array
                items:
                  type: integer
                  minimum: 0
                description: |
                  If specified, the operation is limited to the
                  registers whose [database
                  ids](path:/config/register/physical/{reg}/did) appear in
                  this list.
              data:
                type: string
                description: |
                  This member is required for action `restore`. It
                  contains the binary backup data to be restored,
                  encoded in
                  [base64](https://en.wikipedia.org/wiki/Base64). A
                  device may reject a restore request if this member
                  is larger than 2 MiB.  It may therefore be necessary
                  to split up a large backup file into multiple
                  smaller chunks that are then restored one after the
                  other.
              more_chunks:
                type: boolean
                description: |
                  This is used only for `restore` operations.  It
                  indicates whether a the backup data has been
                  split up into multiple chunks and the current chunk
                  is to be follow by the next older, adjacent chunk.
                  Setting this flag is not required, but doing so can
                  greatly speed up a restore operation.  On the other
                  hand, setting this flag to `true` without following
                  it up with the next older adjacent chunk can leave
                  the database in a corrupted state, with large spikes
                  at the beginning of the current chunk.
            required: [action]
    responses:
      "200":
        description: DB response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/StatusObject"
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/cmd/factory-restore:
  post:
    tags:
    - /cmd
    summary: Restore factory settings
    operationId: cmdFactoryRestorePost
    description: |
      Restore the factory settings and reboot the meter.

      **Warning** All existing data and settings will be lost.
    responses:
      "200":
        description: Restore factory settings response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/StatusObject"
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/cmd/homeplug:
  post:
    tags:
    - /cmd
    summary: Manage HomePlug
    operationId: cmdHomePlugPost
    description: |
      Manage one or more HomePlug devices.
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              action:
                type: string
                enum:
                - setpwd
                description: |
                  The action to perform.  The only action currently
                  supported is `setpwd`.  It establishes a new encryption
                  password on the meter's HomePlug bridge and one or more
                  remote bridges.
              password:
                type: string
                example: HomePlugAV
                minLength: 4
                maxLength: 24
                description: |
                  The password to use for encrypting the HomePlug
                  traffic.  The password may consist of any characters
                  except for double-quote or control characters.
              targets:
                type: array
                minItems: 1
                example: [11:22:33:44:55:66/ABCD-EFGH-IJKL-MNOP,78:9a:bc:de:f0:01/TPED-PBTX-BLRQ-CPER]
                description: |
                  The list of bridges on which to set the new
                  password.  Each bridge is identified by a string
                  that specifies its MAC address (in the form
                  `xx:xx:xx:xx:xx:xx` where `x` is a hexadecimal
                  digit), followed by a slash character (`/`),
                  followed by the bridge's device encryption key
                  (DEK).  The latter can be found printed on the label
                  of the bridge.
                items:
                  type: string
            required: [action, password, targets]
    responses:
      "200":
        description: Manage HomePlug response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/StatusObject"
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/cmd/reboot:
  post:
    tags:
    - /cmd
    summary: Reboot the meter
    operationId: cmdRebootPost
    description: |
      Initiate a reboot of the meter. The actual reboot command is
      delayed by one second to increase the likelihood that the reply
      to this request can be received by the client before the meter
      shuts down.

      Once initiated, the meter will be unavailable for a while
      (typically, 20 to 60 seconds). If the network configuration of
      the meter was changed, the reboot may cause the meter to not
      become available again at the old network address. Thus, the
      client should check for such changes before initiating the
      reboot and take appropriate action if the network configuration
      did change.
    responses:
      "200":
        description: Set time response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/StatusObject"
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/cmd/set-time:
  post:
    tags:
    - /cmd
    summary: Set date and time
    operationId: cmdSetTimePost
    description: |
        Optionally set the date/time of the meter and restart the NTP
        and/or the PTP services, if configured.
    requestBody:
      content:
        application/json:
          schema:
            oneOf:
            - $ref: "./schemas.yaml#/ForeverStamp"
            - type: 'null'
              description: |
                Do not set the date/time.  Only restart NTP and/or
                PTP, if configured.
    responses:
      "200":
        description: Set time response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/StatusObject"
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/cmd/test-email:
  post:
    tags:
    - /cmd
    summary: Test sending email
    operationId: cmdTestemailPost
    description: |
        Test sending an email using the mail configuration specified
        in the body of this request.

        This request returns a token which can then be used to monitor
        the status of the operation.  See
        [/sys/status/*token*/result](path:/sys/status/{token}/result)
        for details.
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              address:
                type: string
                example: user@domain.com
                description: |
                  The email address to send the test email to.
              smarthost:
                type: string
                example: smtp.domain.com
                description: |
                  The hostname of the smart host (mail relay) through
                  which to send the email.  If this is left
                  unspecified, the meter will attempt to send the
                  email directly to the destination address.
              mailuser:
                type: string
                example: username
                description: |
                  If a smarthost is defined, this specifies the user
                  name which is used to log into the smart host.  If
                  left unspecified, the meter will attempt to send the
                  email without authentication.
              mailpass:
                type: string
                example: secret-pw
                description: |
                  If a smarthost is defined, this specifies the password
                  which is used to log into the smart host.  If
                  left unspecified, the meter will attempt to send the
                  email without authentication.
              fromaddr:
                type: string
                example: nobody@eGauge123456
                description: |
                  The email address to use as the sender of the email
                  ("From:" address).
            required: [address]
    responses:
      "200":
        description: Test email response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/TokenObject"
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/cmd/test-remote:
  post:
    tags:
    - /cmd
    summary: Test remote device
    operationId: cmdTestremotePost
    description: |
        Try connecting to a remote device and, if successful, return
        the set of registers available on the device.

        This request returns a token which can then be used to monitor
        the status of the operation.  See
        [/sys/status/*token*/result](path:/sys/status/{token}/result)
        for details.
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              address:
                type: string
                example: modbus://sunspec.1@USB2
                description: |
                  The address of the remote device.  The format of
                  this string depends on the value of `linktype`.
              linktype:
                type: string
                example: slowd
                description: |
                  The [link type](glossary:Link-Types) to use to
                  connect to the remote device.
            required: [address, linktype]
    responses:
      "200":
        description: Test remote device response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/TokenObject"
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/cmd/update:
  post:
    tags:
    - /cmd
    summary: Update the meter
    operationId: cmdUpdatePost
    description: |
        Update the meter firmware or kernel.
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              action:
                type: string
                enum:
                - list
                - install
                description: |
                  The action to perform. The value `list` requests
                  that the latest available version should be returned
                  as a version object response.

                  The value `install` requests that the kernel or
                  firmware should be updated.  In this case, a token
                  is returned.  With that, the progress of the
                  installation can be monitor at
                  [/sys/status/*token*](path:/sys/status/{token}).
              target:
                type: string
                enum:
                - fw
                - kernel
                description: |
                  The target of the action. A value of `fw` indicates
                  that the meter firmware is the target of the action,
                  a value of `kernel` indicates that the kernel is the
                  target.
              branch:
                type: string
                description: |
                  The release branch to install from or to list the
                  available version for. If left unspecified, this
                  defaults to the branch the currently running
                  firmware was installed from.  An empty string refers
                  to the default release branch.
              force:
                type: boolean
                description: |
                  If `true`, the firmware/kernel is installed even if
                  the version to be installed does not appear to be
                  newer than the currently installed version.
              version:
                type: string
                example: 4.5
                description: |
                  The version to install.

                  **Note** Downgrading to an older firmware or kernel
                  may have unpredictable effects and may damage the
                  meter.
            required: [action, target]
    responses:
      "200":
        description: Update response.
        content:
          application/json:
            schema:
              oneOf:
              - $ref: "./schemas.yaml#/VersionObject"
              - $ref: "./schemas.yaml#/TokenObject"
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/cmd/wlan:
  post:
    tags:
    - /cmd
    summary: Manage WLAN (WiFi) connection
    operationId: cmdWlanPost
    description: |
      Manage WLAN (Wi-Fi) connection.  See
      [/sys/net/wlan](path:/sys/net/wlan) to get the currently
      detected and configured WLAN networks.
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              action:
                type: string
                enum:
                - add
                - select
                - forget
                description: |
                  The action to perform.  It must be one of:

                    * `add`: Add a WLAN network by specifying its SSID,
                      whether or not it is a hidden network, and,
                      optionally, its passphrase or passkey.  If adding
                      the network succeeds, it is also selected as the
                      currently active one.
                    * `select`: Select a network as the currently active one.
                    * `forget`: Forget the information associated with
                      a network.
              hex:
                type: boolean
                description: |
                  Must be set to `true` if member `key` is a
                  hexadecimal key rather than a passphrase.
              hidden:
                type: boolean
                description: |
                  Must be set to `true` if the network to be added is
                  hidden (i.e., its SSID is not being broadcast).
              id:
                type: integer
                minimum: 0
                description: |
                  The id of the network that should be selected or
                  forgotten.
              key:
                type: string
                example: secrets-secrets
                description: |
                  The passphrase or hex key to use for the network
                  being added. If omitted, the newly added network has
                  key management disabled.
              ssid:
                type: string
                description: |
                  The name (SSID) of the network to be added.  The
                  characters in this string may be any Unicode
                   character except for ASCII newline or ASCII NUL.
            required: [action]
    responses:
      "200":
        description: WLAN response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/StatusObject"
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/ctid:
  get:
    tags:
    - /ctid
    summary: Get all CTid® information
    operationId: ctidGet
    description: |
      Read the existing (previously scanned) CTid® info of all sensor
      ports.
    responses:
      "200":
        description: CTid® information response.
        content:
          application/json:
            schema:
              type: object
              properties:
                info:
                  type: array
                  items:
                    $ref: "./schemas.yaml#/CTidInfoObject"
                error:
                  $ref: "./schemas.yaml#/ErrorString"
              example: {"info":[{"ts":"1678384222","tid":2,"port":1,"polarity":"+","version":4,"mfgid":0,"model":"EV1000","sn":80,"k":3,"rsrc":160,"rload":10000000,"params":{"scale":2071.98706,"offset":0,"delay":116.27,"unit":0}},{"ts":"1668455577","tid":2008264382,"port":2,"polarity":"+","version":2,"mfgid":0,"model":"ERA","sn":2,"k":2,"rsvd":0,"mfgdata":0,"rsrc":176,"rload":10000000,"params":{"size":106.0,"i":2775.0,"v":0.333330,"a":0.45,"tv":0,"ta":0,"cal":{"1.5":{"v":0.00,"a":0.00},"5.0":{"v":0.00,"a":0.00},"15.0":{"v":0.00,"a":0.00},"50.0":{"v":0.00,"a":0.00}}}}]}
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"
  put:
    tags:
    - /ctid
    summary: Replace saved CTid® info of several sensors
    operationId: ctidPut
    description: |
      Write CTid® info of the sensor ports specified in the request
      body to the meter.  This does _not_ update the CTid® info on the
      sensors themselves.

      This method is supported mainly for testing purposes.  However,
      it could also be used to fix faulty or inaccurate sensor
      information.  The written information will persist only until
      the sensor ports are scanned again, so this would only be a
      temporary fix.
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              info:
                type: array
                minItems: 1
                items:
                  $ref: "./schemas.yaml#/CTidInfoObject"
    responses:
      "200":
        description: CTid® information response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/StatusObject"
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/ctid/{port}:
  parameters:
  - description: |
      The port number to apply this request to.
    in: path
    name: port
    required: true
    schema:
      type: integer
      minimum: 1
  get:
    tags:
    - /ctid
    summary: Get CTid® info of a port
    operationId: ctidPortGet
    description: |
      Read the CTid® info of a sensor port or get the status of an
      operation that is in progress.

      Without a query parameter, this returns the CTid® info object of
      the most recent scan.  If the port has not been scanned or the
      scan failed, an empty object is returned instead.

      If the `tid` query parameter is specified, it must be the
      transaction id of a CTid® operation that was previously
      initiated on this port.  A status object is returned if the
      operation identified by `tid` is still in progress.  Otherwise,
      the request is handled as if `tid` had not been specified.
    parameters:
    - name: tid
      in: query
      description: |
        The transaction id of the CTid® operation to return
        information on.
      schema:
        type: integer
        minimum: 0
    responses:
      "200":
        description: CTid® information response.
        content:
          application/json:
            schema:
              oneOf:
              - $ref: "./schemas.yaml#/CTidInfoObject"
              - $ref: "./schemas.yaml#/EmptyObject"
              - $ref: "./schemas.yaml#/StatusObject"
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"
  post:
    tags:
    - /ctid
    summary: Initiate CTid® operation on a port
    operationId: ctidPortPost
    description: |
      Initiate the operation specified in the request body.  EG4*xxx*
      series meters are limited to performing one CTid® operation at a
      time.  If this request is received while another operation is
      pending, an error is returned.
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              op:
                type: string
                enum: [flash, scan]
                description: |
                  The operation to be initiated:

                    * `flash`: Start blinking the locator LED on the
                    sensor.

                    * `scan`: Start scanning the sensor's CTid®
                    information.  A scan typically takes one to
                    five seconds.  If the scan is successful, the
                    resulting information is stored on the meter.
              polarity:
                type: string
                enum: ["+", "-"]
                description: |
                  The voltage polarity with which to initiate the
                  operation.  A plus sign (`+`) requests positive
                  polarity, a minus sign (`-`) requests negative
                  polarity.

                  For operation `scan`, positive polarity should
                  succeed unless the sensor is miswired.  Thus, it is
                  usually best to attempt scanning first with positive
                  polarity and, if that fails, retry with negative
                  polarity.

                  For operation `flash`, either polarity will cause
                  the locator LED to blink, albeit with different
                  blink frequency.  For a correctly wired sensor,
                  negative polarity should be used for blinking.  If
                  this operation is not stopped explicitly, it will
                  time out automatically after about 30 minutes.
              tid:
                type: integer
                minimum: 0
                maximum: 4294967295
                description: |
                  The transaction id to use for the operation.  This
                  should be a randomly-chosen integer that uniquely
                  identifies the operation to be initiated.  The
                  client can later check on the status of the
                  operation by passing this number as the `tid` query
                  parameter to a `GET` request on this resource.
            required: [op, polarity, tid]
    responses:
      "200":
        description: CTid® post response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/StatusObject"
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"
  put:
    tags:
    - /ctid
    summary: Replace saved CTid® info of the port
    operationId: ctidPortPut
    description: |
      Write CTid® info of the sensor port.  This replaces any existing
      CTid® info on the meter with the one passed in the request body.
      It does _not_ update the CTid® info on the sensor itself.

      This method is supported mainly for testing purposes.  However,
      it could also be used to fix faulty or inaccurate sensor
      information.  The written information will persist only until
      the sensor port is scanned again, so this would only be a
      temporary fix.
    requestBody:
      content:
        application/json:
          schema:
            $ref: "./schemas.yaml#/CTidInfoObject"
    responses:
      "200":
        description: CTid® put response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/StatusObject"
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"
  delete:
    tags:
    - /ctid
    summary: Delete CTid® information of the port
    operationId: ctidPortDelete
    description: |
      Delete the CTid® info associated with the port from the meter.
      This also terminates any pending `scan` or `flash` operations.

      The CTid® info stored in the sensor is not affected by this
      operation.
    responses:
      "200":
        description: CTid® delete response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/StatusObject"
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/ctid/stop:
  post:
    tags:
    - /ctid
    summary: Stop any pending CTid® operation
    operationId: ctidStopPost
    description: |
      Immediately stop any pending `scan` or `flash` operation.
      Generally, this should be used only after successfully
      initiating a `flash` operation as `scan` operations will stop
      automatically after a few seconds.
    responses:
      "200":
        description: CTid® stop response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/StatusObject"
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/ctrl/call:
  post:
    tags:
    - /ctrl/call
    summary: Issue control call
    operationId: ctrlCallPost
    description: |
      Issue a control call to a device identified by a set of [device
      attributes](glossary:Device-Attributes).
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              attrs:
                $ref: "./schemas.yaml#/DeviceAttributesWithIndexObject"
                description: |
                  The [device
                  attributes](glossary:Device-Attributes) that
                  identify the device on which to initiate the control
                  action.

                  In addition to the usual device attributes, `index`
                  may be specified as the first attribute.  This
                  attribute is used when the other attributes match
                  multiple devices.  Specifically, if the value of
                  `index` is _n_, then the call would be issued on the
                  device with index _n_ (with the first device having
                  an index of 0).  The default value for this
                  attribute is 0.

                  For example, if there are three devices supporting
                  the `relay` interface then
                  `{"index":1,"interface":"relay"}` would result in a
                  call to the second device.
              method:
                type: string
                description: |
                  The name of the control action to issue on the
                  device.  This may be either a bare method name, such
                  as `close_mask`, or a fully qualified name such as
                  `relay.close_mask`. In the former case, the method
                  is invoked on the first interface registered for
                  that device that implements a method by that name.
                  In the latter case, the method is invoked only on
                  the specified interface (`relay`).
              args:
                type: array
                description: |
                  The list of arguments to pass to the method.  This
                  list must have values that are compatible with the
                  arguments expected by the method.
                items:
                  format: json
          example: {"attrs":{"mfg":"egauge","model":"prm3","sn":"00000006"},"method":"relay.close_mask","args":[1]}
    responses:
      "200":
        description: |
            Control call response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/CtrlCallResponseObject"
            example: {"result":{"tid":4294967360}}
      "401":
        description: unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/ctrl/call/{tid}:
  parameters:
  - name: tid
    in: path
    required: true
    description: |
      The transaction id of the call.
    schema:
      type: integer
      format: int54
      minimum: 0
    example: 4294967360
  get:
    tags:
    - /ctrl/call
    summary: Get call result
    operationId: ctrlCallTidGet
    description: |
      Get the result of a control call on return an error message,
      e.g., if the result is not yet available.
    responses:
      "200":
        description: Control result response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/CtrlCallResultObject"
            examples:
              try_again:
                summary: Try again error
                value: {"error":"EAGAIN: Call is pending."}
              call_result:
                summary: Call result
                value: {"result":6}
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/ctrl/device:
  get:
    tags:
    - /ctrl/device
    summary: Get control device info
    operationId: ctrlDeviceGet
    description: |
      Get information about some or all available control devices.
    parameters:
    - name: attrs
      in: query
      description: |
        If present, return only devices matching the specified
        attributes.  Note that special characters in the query
        parameter need to URI-encoded to form a valid URL.  For
        example, `{` needs to be encoded as `%7b` and `}` needs to be
        encoded as `%7d`.

        As a special case, attribute `interface` is considered to
        match a device if the device supports the specified interface.
        The attribute may be specified multiple times to check for the
        presence of multiple interfaces. For example, the URI-encoded
        version of `attrs={"interface":"relay","interface":"modbus"}`
        would only match devices that provide both the `relay` and
        `modbus` interfaces.

        This parameter also supports the `index` attribute like
        [/ctrl/call](path:/ctrl/call) does.
      schema:
        type: object
        patternProperties:
          /^[-_a-zA-Z0-9]*$/:
            type: string
            description: |
              The value of the attribute.
      example: '{"interface":"relay"}'
    responses:
      "200":
        description: Device information response
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/CtrlDeviceResultObject"
            example: {"result":[{"path":["net.egauge.slowd","USB1","1"],"name":"prm3","mfg":"eGauge","model":"PRM3","sn":"00000007","prot":"Modbus","link":"serial","quality":"0","interface":["relay","modbus"]}]}
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/local:
  get:
    tags:
    - /local
    summary: Get local sensor values
    operationId: localGet
    parameters:
    - name: values
      in: query
      description: |
        If present, the sensor values are returned in member `values`
        of the response.
      schema:
        type: boolean
    - name: energy
      in: query
      description: |
        If present, the calculated (real) energy values are returned
        in member `energy` of the response.
      schema:
        type: boolean
    - name: apparent
      in: query
      description: |
        If present, the calculate apparent energy values are returned
        in member `apparent` of the response.
      schema:
        type: boolean
    - name: stats
      in: query
      description: |
        If present, statistics about the internal operation of the
        meter are returned in member `stats` of the response.
      schema:
        type: boolean
    - name: rate
      in: query
      description: |
        If present, the rate metrics of each sensor are included in
        the response (members `rate`).
      schema:
        type: boolean
    - name: cumul
      in: query
      description: |
        If present, the cumulative metrics of each sensor are included
        in the response (members `cumul`).
      schema:
        type: boolean
    - name: type
      in: query
      description: |
        If present, the [type code](glossary:Type-Codes) (physical
        unit) of each sensor is included in the response (members
        `type`).
      schema:
        type: boolean
    - name: normal
      in: query
      description: |
        If present, the normal value of each sensor is included in the
        response. For most sensor types, this is the RMS value of the
        sensor signal but for some, this may be the average value
        (e.g., for temperature sensors) or a count (e.g., for pulse
        sensors).
      schema:
        type: boolean
    - name: mean
      in: query
      description: |
        If present, the mean (average) value of each sensor is
        included in the response.
      schema:
        type: boolean
    - name: freq
      in: query
      description: |
        If present, the frequency (in hertz) of each sensor signal is
        included in the response.  It is calculated as the number of
        times the signal crosses zero per second. For some sensor
        types (e.g., temperature sensors), frequency is not calculated
        and the returned value is always zero.
      schema:
        type: boolean
    - name: env
      in: query
      description: |
        If present, this parameter specifies a comma-separated list of
        built-in environmental sensors whose measurements should be
        included in the response.  The list may contain the following
        strings (case-insensitive):

          * `ALL`: Include measurements for all built-in environmental
          sensors.

          * `Hpcb`: Include measurements for the built-in relative
          humidity sensor.  This sensor measures relative humidity
          inside the meter's enclosure. It is not available on all
          meters.

          * `Tpcb`: Include measurements for the built-in temperature
          sensor.  This sensor measures temperature inside the meter's
          enclosure, which is generally a few degrees celsius higher
          than the temperature of the air surrounding the meter.

        **Note** Environmental sensors have only rate metrics, no
        cumulative metrics, and only have a normal value, no mean or
        frequency.
      schema:
        type: array
        items:
          type: string
          enum: [ALL, Hpcb, Tpcb]
    - name: l
      in: query
      description: |
        If present, this parameter specifies a comma-separated list of
        voltages whose metrics should be included in the response.
        The following voltage names may be specified
        (case-insensitve):

          * `ALL`: Include measurements for all available line
          voltages.

          * `L1`, `L2`, or `L3`: The voltage of the named line input
          pin relative to the neutral pin.

          * `D1`, `D2`, or `D3`: The voltage of the named line input
          pin relative to a virtual neutral.  The virtual neutral is
          calculated assuming the signals at pins D1, D2, and D3 are
          of equal amplitude and are phase-shifted by 120° relative to
          each other.  If either of these assumptions is not true, the
          measured voltages are not be meaningful.

          * `L12`, `L23`, or `L31`: The voltage between the two line
          input pin numbers.  For example, `L12` measures the voltage
          between pins `L1` and `L2`.

          * `Ldc`: The voltage at the DC input port.

        It is also possible to specify a range of voltages by using a
        colon to separate the first and the last voltage to be
        included in the range.  For example, `L1:L3` would request
        inclusion of the measurements for `L1`, `L2`, and `L3`.
      schema:
        type: array
        items:
          type: string
    - name: s
      in: query
      description: |
        If present, this parameter specifies a comma-separated list of
        sensors whose metrics should be included in the response.  The
        following sensor names may be specified (case-insensitve):

          * `ALL`: Include measurements for all available sensors.

          * `Sn`: Include measurements for sensor `Sn` where `n` is a
          number in the range from 1 to the number of sensor inputs
          supported by the meter.

          * `Sn:Sm`: Include measurements for sensors `Sn` through
          `Sm`, where `n` and `m` are numbers in the range from 1 to
          the number of sensor inputs supported by the meter and `n`
          is smaller than `m`.  For example, `S3:S5` would request
          inclusion of the measurements for `S3`, `S4`, and `S5`.
      schema:
        type: array
        items:
          type: string
    responses:
      "200":
        description: Local response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/LocalObject"
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"


/log/alert:
  parameters:
  - $ref: "./params.yaml#/afterParam"
    description: |
      Restricts the method to apply only to those alerts whose
      `last` timestamp is newer (younger) than the specified timestamp.
    example: 1685739455.043332818
  - name: acked
    in: query
    description: |
      Restrict the method to apply only to those alerts whose
      acknowledgment status matches the value of this query parameter
      (`true` for acknowledged, `false` for unacknowledged).
    schema:
      type: boolean
  - name: ids
    in: query
    description: |
      Restricts the method to apply only to those alerts whose id
      is listed in the value of this query parameter.
    schema:
      type: array
      items:
        type: integer
        minimum: 0
  - name: min_prio
    in: query
    description: |
      Restrict the method to apply only to those alerts whose priority is
      at least as high as the value of this query parameter.
    schema:
      type: integer
      minimum: 0
      maximum: 7
  get:
    tags:
    - /log
    summary: Get alert log
    operationId: logAlertGet
    description: |
      Get the alert log.  It has a fixed maximum length and consists
      of a sequence of prioritized and time-stamped entries. When the
      log fills up, older entries are replaced.  Currently up to 50
      alert log entries are supported.
    responses:
      "200":
        description: Alert log response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/AlertLogObject"
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"
  post:
    tags:
    - /log
    summary: Update alert log
    operationId: logAlertPost
    description: |
      Acknowledge all or some alerts.
    requestBody:
      content:
        application/json:
          schema:
            type: string
            enum:
              - ack
    responses:
      "200":
        description: Status response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/StatusObject"
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"
  delete:
    tags:
    - /log
    summary: Delete alert log
    operationId: logAlertDelete
    description: |
      Delete all or some alerts.
    responses:
      "200":
        description: Status response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/StatusObject"
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/log/kernel:
  get:
    tags:
    - /log
    summary: Get kernel log
    operationId: logKernelGet
    parameters:
    - $ref: "./params.yaml#/afterParam"
    description: |
      Get the kernel log.  It has a fixed size and consists of a
      sequence of prioritized and time-stamped entries. When the log
      fills up, older entries are replaced.
    responses:
      "200":
        description: Kernel log response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/KernelLogObject"
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/log/lua/{name}:
  parameters:
  - description: |
      The name of a Lua log.  This may be one of:

        * `alertd`: The log for scripts that are executed when
        checking for and generating alerts.

        * `ctrld`: The log for control scripts.

        * `teamd`: The log for scripts executed while evaluating
        formula scripts and for calculating costs (tariff script).
    in: path
    name: name
    required: true
    schema:
      type: string
      enum: [alertd, ctrld, teamd]
  get:
    tags:
    - /log
    summary: Get a Lua log
    operationId: logLuaNameGet
    parameters:
    - $ref: "./params.yaml#/afterParam"
    description: |
      Get a Lua log. Each log has a fixed size and consists of a
      sequence of time-stamped entries. When the log fills up, older
      entries are replaced.
    responses:
      "200":
        description: Lua log response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/LuaLogObject"
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/log/system:
  get:
    tags:
    - /log
    summary: Get system log
    operationId: logSystemGet
    description: |
      Get the system log.  It has a fixed size and consists of a
      sequence of messages. When the log fills up, older messages are
      replaced.  The size of this log can be configured
      with [/config/log/system/size](path:/config/log/system/size).
    responses:
      "200":
        description: System log response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/SystemLogObject"
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/providers/alert:
  get:
    tags:
    - /providers
    summary: Get alert service providers
    operationId: providersAlertGet
    description: |
      Get a list of available alert service providers.

      Reporting alerts to a service provider requires executing the
      [service activation command](op:/cmd/activate:post) on the meter.
      That command then uses the [service activation
      protocol](glossary:Service-Activation) to set up the provider to
      ensure it is able and willing to accept the alerts.
    responses:
      "200":
        description: Alert providers response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/ServiceProvidersObject"
            example: {"reply":{"providers": [{"name":"Alert Service","control":"http://alert.com/"}]}}
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/providers/push:
  get:
    tags:
    - /providers
    summary: Get push service providers
    operationId: providersPushGet
    description: |
      Get a list of available push service providers.

      Sharing data with a push service provider requires executing the
      [service activation command](op:/cmd/activate:post) on the meter.
      That command then uses the [service activation
      protocol](glossary:Service-Activation) to set up the provider to
      ensure it is able and willing to accept the data.
    responses:
      "200":
        description: Push providers response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/ServiceProvidersObject"
            example: {"reply":{"providers": [{"name":"Backup Service","control":"http://backup.com/"},{"name": "Cloudly","control":"http://cloud.com/"}]}}
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/providers/tariff:
  get:
    tags:
    - /providers
    summary: Get tariff service providers
    operationId: providersTariffGet
    description: |
      Get a list of available tariff service providers.
    responses:
      "200":
        description: Tariff providers response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/TariffProvidersObject"
            example: {"reply":{"providers": [{"country":"Korea","name":"KEPCO","tariffs":"http://tariffs.com/kepco.lua","params":["start_day","taxes"]}]}}
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/providers/tariff/{idx}:
  get:
    tags:
    - /providers
    summary: Get list of tariffs
    operationId: providersTariffIdxGet
    parameters:
    - in: path
      name: idx
      required: true
      schema:
        type: integer
        minimum: 0
      description: |
        The index of the tariff provider (utility) whose tariff list
        to return. The index is assigned in order in which the
        services appear in `/providers/tariff`.  The first entry has
        index 0, the second has index 1, and so on.
    description: |
      Get a list of tariffs of a provider.
    responses:
      "200":
        description: Tariff list response.
        content:
          application/json:
            schema:
              type: object
              properties:
                tariffs:
                  type: array
                  description: |
                    The list of tariff names available from this utility.
                  items:
                    type: string
            example: {"tariffs":["Residential General","Medical Exemption","Residential Demand","C Commercial"]}
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/register:
  get:
    tags:
    - /register
    summary: Get register data
    operationId: registerGet
    parameters:
    - name: delta
      in: query
      allowEmptyValue: true
      description: |
        If present, return the first row of data as usual and each
        subsequent row as the amount of change since the previous row.
        This delta-encoding usually reduces the size of the response
        significantly.

        With `format=csv`, the first row is skipped and not returned
        at all.

        Note that the value of this parameter is ignored and may even
        be empty.
      schema:
        type: boolean
        example: true
    - name: demand
      in: query
      description: |
        This parameter may only be specified when output format JSON
        (the default) or CSV is selected (`format=csv`).  If
        specified, it requests that the result include the _demand_ of
        the selected registers in addition to the normal register
        values.  Demand is the average rate of change over a period of
        time called the _demand interval_.  A typical demand interval
        may be 15 minutes or 30 minutes long.  _Demand_ is either the
        maximum or minimum demand across multiple demand intervals,
        such as the demand intervals in a billing cycle.

        There are two principal methods for subdividing a time period
        into demand intervals.  With the _set_ demand interval method,
        the longer time period is subdivided into contiguous,
        non-overlapping demand intervals.  For example, with 15 minute
        demand intervals, an hour would be subdivided into four demand
        intervals: from minute 0 through 14, 15 through 29, 30 through
        44, and, finally 45 through 59.  In contrast, with the
        _rolling_ demand interval method, the larger time period is
        subdivided into overlapping demand intervals.  After each
        demand calculation, the demand interval is shifted to the
        right by one minute.  With rolling demand, the first demand
        interval would span minute 46 from the previous hour up to and
        including minute 0 of the current hour.  The next interval
        would span minute 47 from the previous hour up to minute 1 of
        the current hour, and so on until the last interval would span
        minute 45 up to and including minute 59 of the current hour.

        The value of the `demand` query parameter specifies the
        details of how the demand is to be calculated.  Specifically,
        the value of this parameter has the form `TPI` where `T` is
        one of:


          * `roll`: Use the rolling demand method.

          * `set`: Use the set demand method.

        `P` indicates which demand should be returned:

          * `+`: Return the maximum demand.

          * `-`: Return the minimum demand.

          * `|`: Return the demand with the largest magnitude
            (absolute value).  For example, if the maximum demand is
            +5kW and the minimum demand is −6kW, this would return
            −6kW.

        `I` is the length of the demand interval expressed as a number
        of seconds.  The interval must be an integer multiple of 60
        and cannot exceed 3600 (one hour).

        For example, query option `demand=set+900` would return the
        maximum set demand of the selected registers when using a 900
        second (15 minute) demand interval.

        When `format=csv` is in effect, the resulting CSV file
        contains two additional column for each register which
        indicate the demand value and the starting time of that demand
        interval.
      schema:
        type: string
        example: roll|900
    - name: filename
      in: query
      description: |
        For `format=backup` and `format=csv`, this specifies the name
        of the file in which the response should be saved.  This is
        indicated via a `Content-disposition` response header.
      schema:
        type: string
        example: data.csv
    - name: format
      in: query
      description: |
        Selects the format of the response.  This must be one of:

          * `json`: Return the response as JSON.  This is the default.

          * `backup`: Return the response as a backup file.  The
          response has MIME type `text/plain`.

          * `csv`: Return the response as a CSV (comma-separated
          values) file.  The response has MIME type `text/plain`.
      schema:
        type: string
        enum: [backup, csv, json]
      example: csv
    - name: if
      in: query
      description: |
        Only return data if the specified condition is `true`.  The
        string must have the form _texpr_ _op_ _val_ where _texpr_ is a
        [time expression](glossary:Time-Expressions) (`epoch`,
        `sob` or similar), _op_ is one of `==` (test for equality) or
        `!=` (test for inequality) and _val_ is a decimal string
        specifying a [Unix timestamp](glossary:Unix-Timestamp).  If
        the condition is `true`, data is returned as usual.  If
        `false`, a current condition object is returned which contains
        the current value of _texpr_.
      schema:
        type: string
        example: epoch==1675276020
    - name: rate
      in: query
      allowEmptyValue: true
      description: |
        If present, return the `rate` member in the `registers`
        section of the response.  The value of this member is the rate
        at which the value of the register has been changing most
        recently.

        Note that the value of this parameter is ignored and may even
        be empty.
      schema:
        type: boolean
        example: true
    - name: raw
      in: query
      allowEmptyValue: true
      description: |
        If present, return accumulated values of registers as raw
        cumulative values which start at zero when the meter database
        was created.  By default, the values are returned relative to
        the [meter epoch](path:/config/db/epoch), which means register
        values are zero at the time of the epoch.

        Note that the value of this parameter is ignored and may even
        be empty.
      schema:
        type: boolean
        example: true
    - name: reg
      in: query
      description: |
        Select a range of registers to be included in the result.  A
        range can be one of:

          * `all`: All available registers are selected to be returned
          in the result.

          * `none`: No registers are selected to be returned in the
          result.

          * `n0`: Select the register with index `n0`.  The index of a
          register can be found in the `idx` member of the `registers`
          section of the response.

          * `n0:n1`: Select the registers with indices `n0` through
          `n1`.

        If the value of this parameter starts with a plus sign (`+`),
        the specified range is added to the set of registers to be
        returned.  If it starts with a minus sign (`-`), the specified
        range is removed from the set of registers to be returned.  If
        the value starts with any other character, the specified range
        establishes the set of registers to be returned.  Additional
        ranges can be specified by adding a plus sign followed by a
        range to add more registers or a minus sign followed by a
        range to remove registers from the selected set.

        It is also possible to specify combine `view` and `reg`
        parameters in a single request.  The parameters are processed
        in the order specified (from left-to-right) and update the set
        of selected registers incrementally.  For example,
        `view==environmentals&reg=-0:7` would select all registers in
        view `environmentals`, except those with a register index in
        the range from 0 through 7.

        Virtual registers are output only if they are selected in the
        set of registers to be returned **and** query parameter
        `virtual` is specified.
      schema:
        type: string
        example: all-0:7
    - name: time
      in: query
      description: |
        A comma-separated list of [time ranges](glossary:Time-Ranges).
        Only data for rows that fall within the specified time ranges
        are returned.  Each time-range is processed independently and
        in the order specified.  That is, if overlapping time-ranges
        are specified, the same rows may be output multiple times.
      schema:
        type: string
        example: now-900:60:now,epoch
    - name: ts
      in: query
      description: |
        This query parameter controls how timestamps are handled
        during this `GET` request.  The value must be a string of the
        form `tz;fmt`, where `tz` is a timezone string and `fmt` is a
        format string.  Either `tz` or `fmt` may be empty.

        If non-empty, `tz` sets the timezone to use.  If left
        unspecified or empty, the [device
        timezone](path:/config/time/zone) is used by default.  The
        selected timezone affects, for example, how [time point
        names](glossary:Time-Point-Names) such as `sod` (start-of-day)
        are interpreted and how time is output in the response.  The
        timezone must be in the format defined by
        [tzset()](https://man7.org/linux/man-pages/man3/tzset.3.html).
        This parameter must appear before (to the left of) any `time`
        parameters that use timezone-dependent time-points such 'sod',
        for example.

        The `fmt` string is used only when query parameter
        `format=csv` is in effect.  In that case, `fmt` defines how
        timestamps are output in the CSV response.  By default, the
        format string `%F %T` is used, which would output July 6,
        2016 4:56pm as `2016-07-06 16:56:00`.  The full syntax
        available in the format string is documented in function
        [strftime()](https://man7.org/linux/man-pages/man3/strftime.3.html).

        Note that the format-string typically will need to be
        percent-encoded.  In particular, each `%` character needs to
        be encoded as `%25`, for example.
      schema:
        type: string
        example: UTC;%y/%m/%d %I:%M
    - name: view
      in: query
      description: |
        Select registers to be included in the result by the [view
        name](glossary:View-Names) specified as the value of this
        parameter.  The view name must be prefixed by one of
        characters:

          * `=`: Only select the registers matching the view name are
          returned.

          * `+`: The registers matching the view name are added to the
          set of registers to be returned.

          * `-`: The registers matching the view name are removed from
          the set of registers to be returned.
      schema:
        type: string
        example: =environmentals
    - name: virtual
      in: query
      description: |
        This parameter specifies that virtual register should be
        returned in the response and also selects how to return them.
        The value of the parameter must be one of:

          * `formula`: Virtual registers are returned via the
          `formula` member in the `registers` section.  See [virtual
          register formulas](glossary:Virtual-Register-Formulas) for
          details.

          * `value`: The value of virtual registers is calculated by
          the meter and then return in the `ranges` section like any
          other register value.
      schema:
        type: string
        enum: [value, formula]
      example: formula
    - name: noHTTP
      in: query
      description: |
        If present, requests that the response is to be returned
        without the normal HTTP headers.  Only the body of the
        response will be returned.

        Note that the value of this parameter is ignored and may
        even be empty.
      allowEmptyValue: true
      deprecated: true
      schema:
        type: boolean
    responses:
      "200":
        description: Register response.
        content:
          application/json:
            schema:
              oneOf:
              - $ref: "./schemas.yaml#/RegisterResponseObject"
              - $ref: "./schemas.yaml#/RegisterConditionObject"
          text/plain; charset=utf-8:
            schema:
              type: string
              example: |
                "Date & Time","Humidity [%]"
                "23/03/08 08:44","18.138051351"
                "23/03/08 08:43","18.151999919"
                "23/03/08 08:42","18.441518148"

      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/sys/slowd:
  get:
    tags:
    - /sys/slowd
    summary: Get slowd status
    operationId: sysSlowd
    description: |
      Get the status of the slowd (serial device) service.
    responses:
      "200":
        description: slowd status object response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/StatusObject"
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/store/{section}:
  parameters:
  - name: section
    in: path
    required: true
    description: |
      Name of the server-storage section.
    schema:
      type: string
      example: global
  get:
    deprecated: true
    tags:
    - /store
    summary: Get section
    operationId: storeSectionGet
    responses:
      "200":
        description: Store content response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/StoreContentObject"
            examples:
              url_encoded:
                summary: URL-encoded values
                value: {"name":"global/","content":{"billing/start_day":"6","billing/contract_demand":"10","billing/bill_contracted_demand":"false","billing/schedule":"R%20Residential%20General","billing/surcharges":"0%2E07","billing/taxes":"8%2E2","billing/tariff_uri":"https%3A%2F%2Fapi%2Eegauge%2Enet%2Fv1%2Ftariffs%2F2%2Elua","billing/provider":"Xcel%20Colorado"}}
              json_encoded:
                summary: JSON-encoded values
                value: {"name":"dash/","content":{"dashCfg-default":"{\"name\":\"default\",\"changed\":false,\"dashlets\":[{\"tag\":\"flow\",\"id\":1,\"cfg\":{\"nodes\":[{\"pos\":[0,0],\"icon\":\"house\",\"reg\":\"use\"},{\"pos\":[0,1],\"icon\":\"solar\",\"reg\":\"gen\"},{\"pos\":[1,0],\"icon\":\"battery\",\"reg\":\"bat\"},{\"pos\":[0,-1],\"icon\":\"grid\",\"reg\":\"Grid\",\"costsMoney\":true}]}}],\"layouts\":[{\"designWidth\":0,\"designHeight\":0,\"pages\":[{\"locs\":[{\"id\":1,\"x\":0,\"y\":0,\"w\":10,\"h\":10}]}]}]}"}}
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"
  put:
    deprecated: true
    tags:
    - /store
    summary: Update or delete section
    operationId: storeSectionPut
    description: |
      Update or delete a server-storage section according to the
      contents of the request body.
    requestBody:
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "./schemas.yaml#/StoreVariableUpdates"
              - type: 'null'
                description: Delete the entire section.
          example: {"test/delete_me": null, "prefs/color": "cyan"}
    responses:
      "200":
        description: Store update response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/StatusObject"
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/store/{section}/{variable}:
  parameters:
  - name: section
    in: path
    required: true
    description: |
      Name of the server-storage section.
    schema:
      type: string
      example: dash
  - name: variable
    in: path
    required: true
    description: |
      Name of the section variable.
    schema:
      type: string
      example: dashCfg-default
  get:
    deprecated: true
    tags:
    - /store
    summary: Get section variable
    operationId: storeSectionVarGet
    responses:
      "200":
        description: Store variable response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/StoreContentObject"
            example: {"name":"dash/dashCfg-default","content":{"":"{\"name\":\"default\",\"changed\":false,\"dashlets\":[{\"tag\":\"flow\",\"id\":1,\"cfg\":{\"nodes\":[{\"pos\":[0,0],\"icon\":\"house\",\"reg\":\"use\"},{\"pos\":[0,1],\"icon\":\"solar\",\"reg\":\"gen\"},{\"pos\":[1,0],\"icon\":\"battery\",\"reg\":\"bat\"},{\"pos\":[0,-1],\"icon\":\"grid\",\"reg\":\"Grid\",\"costsMoney\":true}]}}],\"layouts\":[{\"designWidth\":0,\"designHeight\":0,\"pages\":[{\"locs\":[{\"id\":1,\"x\":0,\"y\":0,\"w\":10,\"h\":10}]}]}]}"}}
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"
  put:
    deprecated: true
    tags:
    - /store
    summary: Update or delete section variable
    operationId: storeSectionVarPut
    description: |
      Update or delete a section variable according to the contents of
      the request body.
    requestBody:
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "./schemas.yaml#/StoreSingleVariableUpdate"
              - type: 'null'
                description: Delete the section variable.
          example: {"":"{\"name\":\"default\",\"changed\":false,\"dashlets\":[{\"tag\":\"flow\",\"id\":1,\"cfg\":{\"nodes\":[{\"pos\":[0,0],\"icon\":\"house\",\"reg\":\"use\"},{\"pos\":[0,1],\"icon\":\"solar\",\"reg\":\"gen\"},{\"pos\":[1,0],\"icon\":\"battery\",\"reg\":\"bat\"},{\"pos\":[0,-1],\"icon\":\"grid\",\"reg\":\"Grid\",\"costsMoney\":true}]}}],\"layouts\":[{\"designWidth\":0,\"designHeight\":0,\"pages\":[{\"locs\":[{\"id\":1,\"x\":0,\"y\":0,\"w\":10,\"h\":10}]}]}]}"}
    responses:
      "200":
        description: Delete section variable response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/StatusObject"
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/store/{section}/{paragraph}/:
  parameters:
  - name: section
    in: path
    required: true
    description: |
      Name of the server-storage section.
    schema:
      type: string
      example: global
  - name: paragraph
    in: path
    required: true
    description: |
      Name of the paragraph.
    schema:
      type: string
      example: billing
  get:
    deprecated: true
    tags:
    - /store
    summary: Get paragraph
    operationId: storeParagraphGet
    responses:
      "200":
        description: Store paragraph response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/StoreContentObject"
            example: {"name":"global/billing/","content":{"start_day":"6","contract_demand":"10","bill_contracted_demand":"false","schedule":"R%20Residential%20General","surcharges":"0%2E07","taxes":"8%2E2","tariff_uri":"https%3A%2F%2Fapi%2Eegauge%2Enet%2Fv1%2Ftariffs%2F2%2Elua","provider":"Xcel%20Colorado"}}
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"
  put:
    deprecated: true
    tags:
    - /store
    summary: Update or delete paragraph
    operationId: storeParagraphPut
    description: |
      Update or delete a paragraph according to the contents of the request
      body.
    requestBody:
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "./schemas.yaml#/StoreVariableUpdates"
              - type: 'null'
                description: Delete the paragraph.
          example: {"start_day": "7","taxes": null}
    responses:
      "200":
        description: Store update response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/StatusObject"
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"

/store/{section}/{paragraph}/{variable}:
  parameters:
  - name: section
    in: path
    required: true
    description: |
      Name of the server-storage section.
    schema:
      type: string
      example: global
  - name: paragraph
    in: path
    required: true
    description: |
      Name of the paragraph.
    schema:
      type: string
      example: billing
  - name: variable
    in: path
    required: true
    description: |
      Name of the variable.
    schema:
      type: string
      example: start_day
  get:
    deprecated: true
    tags:
    - /store
    summary: Get variable
    operationId: storeVarGet
    responses:
      "200":
        description: Store content response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/StoreContentObject"
            example: {"name":"global/billing/start_day","content":{"":"6"}}
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"
  put:
    deprecated: true
    tags:
    - /store
    summary: Update or delete variable
    operationId: storeVarPut
    description: |
      Update or delete a variable according to the contents of the
      request body.
    requestBody:
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "./schemas.yaml#/StoreVariableUpdates"
              - type: 'null'
                description: Delete the variable.
          example: {"": "7"}
    responses:
      "200":
        description: Store update response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/StatusObject"
      "401":
        description: Unauthorized response.
        content:
          application/json:
            schema:
              $ref: "./schemas.yaml#/UnauthorizedObject"
