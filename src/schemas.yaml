AlertLogObject:
  type: object
  properties:
    drops:
      type: integer
      minimum: 0
      description: |
        The number of alert entries that have been dropped from the log
        because a newer or higher priority alert had to be added when
        the log was full.
    log:
      type: array
      description: |
        The alert log.
      items:
        type: object
        properties:
          acked:
            type: boolean
            description: |
              True if this alert has been acknowledged by the user.
          count:
            type: integer
            minimum: 1
            description: |
              The number of times this alert has occurred.
          detail:
            type: string
            description: |
              The reason the alert was triggered.
          first:
            description: |
              The timestamp of when this alert occurred first.
            $ref: "#/ForeverStamp"
          last:
            description: |
              The timestamp of when this alert occurred last.
            $ref: "#/ForeverStamp"
          last_reported:
            description: |
              The timestamp of when this alert was last reported.
              Only present if `reported` is `true`.
            $ref: "#/ForeverStamp"
          id:
            type: integer
            minimum: 0
            description: |
              An identifier that uniquely identifies this log entry.
          name:
            type: string
            description: |
                The name of this alert.
          priority:
            type: integer
            minimum: 0
            maximum: 7
            description: |
              The priority of the alert that resulted in this log entry.
              Zero is the lowest priority, 7 the highest.
          reported:
            type: boolean
            description: |
              True if this alert has been reported already.
        required: [acked, count, detail, first, last, id, name, priority, reported]
      example: [{"id":1804289524,"acked":false,"prio":6,"reported":false,"count":1,"first":"1684952450.123","last":"1684952450,123","name":"Device up and running","detail":"software reset"},{"id":1804289527,"acked":true,"prio":3,"reported":true,"count":15,"first":"1684952489.205","last":"1685739471.800","name":"Proxy-connection established","detail":"","last_reported":"1685739472.250"}]
    error:
      $ref: "#/ErrorString"

CaptureChannelInfoObject:
  type: object
  properties:
    channels:
      description: |
        Map of available (configured) channels.  For each channel
        number, the name name and the physical unit of the sample
        values are given.
      type: object
      patternProperties:
        ^[0-9]+$:
          type: object
          properties:
            name:
              description: Channel name.
              type: string
            unit:
              description: Physical unit of channel values.
              type: string
          required: [name, unit]
      example: {"0":{"name":"L1","unit":"V"},"4":{"name":"S1","unit":"A"}}
    error:
      $ref: "#/ErrorString"
  required: [channels]

CaptureCookieObject:
  type: object
  properties:
    state:
      $ref: "#/CaptureState"
    cookie:
      description: "The token that identifies the newly started capture."
      type: integer
      minimum: 0
      maximum: 4294967295
    error:
      $ref: "#/ErrorString"
  required: [state, cookie]
  example: {"state":"armed","cookie":34551455}

CaptureProgressObject:
  type: object
  properties:
    state:
      $ref: "#/CaptureState"
    count:
      description: The number of samples acquired so far.
      type: integer
      minimum: 0
    max_count:
      description: The total number of samples being acquired.
      type: integer
      minimum: 1
    error:
      $ref: "#/ErrorString"
  required: [state, count, max_count]
  example: {"state":"capturing","count":235,"max_count":600}

CaptureResultObject:
  type: object
  properties:
    state:
      $ref: "#/CaptureState"
    ts_freq:
      description: The frequency of the timestamp counter in hertz.
      type: integer
      minimum: 0
    first_sample:
      description: The absolute timestamp of the first sample.
      $ref: "#/ForeverStamp"
    ch_mask:
      description: |
        Bit mask of channels included in `r` member. Each array
        element contains 32 bits in little-endian word order.  Note
        that `r` may contain more channels than requested.
      type: array
      items:
        type: integer
        minItems: 1
        minimum: 0
        maximum: 4294967295
    r:
      description: |
        The sampled data in order of lowest-numbered channel to
        highest numbered channel.
      type: array
      items:
        description: The data sampled for one timestamp.
        type: object
        properties:
          t:
            description: |
              Timestamp relative to previous sample in units of
              timestamp ticks, ticking at the frequency given
              by member `ts_freq`.
            type: integer
          d:
            description: Channel data acquired for this timestamp.
            type: array
            items:
              type: number
              minItems: 1
          trigger:
            description: |
              This is `true` if the trigger occurred at the time
              indicated by member `t`.
            type: boolean
        required: [t, d]
    error:
      $ref: "#/ErrorString"
  required: [state, ts_freq, first_sample, ch_mask, r]
  example: {"state":"full","ts_freq":1000000,"first_sample":"1676992626.953","ch_mask":[5,0],"r":[{"t":5300,"d":[515.5,1034.5]},{"t":42,"d":[-515.5]}]}

CaptureState:
  type: string
  description: |
    Current state of the capture interface:

      * `available`: The capture interface is idle and available for use.
      * `armed`: A capture has been initiated and the system is waiting
        for the trigger condition to be satisfied.
      * `capturing`: The capture interface is busy collecting samples.
      * `full`: The capture has finished and the sampled data is included
        in the response.
  enum:
    - available
    - armed
    - capturing
    - full

CTidInfoObject:
  type: object
  description: Provides information about the sensor attached to a port.
  properties:
    error:
      $ref: "#/ErrorString"
    k:
      type: integer
      minimum: 0
      description: |
        The type of the sensor (kind).
    mfgid:
      type: integer
      minimum: 0
      description: |
        The numeric identifier of the manufacturer of the sensor.
    model:
      type: string
      description: |
        The model name of the sensor.
    params:
      type: object
      description: Sensor-type dependent parameters.
      patternProperties:
        ^[a-zA-Z_][a-zA-Z_0-9]+$:
          description: A sensor-type dependent parameter.
    polarity:
      type: string
      enum:
        - +
        - "-"
      description: |
        The polarity of the voltage that was used to read this info.
    port:
      type: integer
      minimum: 1
      description: |
        The port number this information is associated with.
    rload:
      type: number
      description: |
        The load resistance that was applied when characterizing the
        other parameters of this sensor.
    rsrc:
      type: number
      description: |
        The output resistance of the sensor.
    sn:
      type: integer
      minimum: 0
      maximum: 16777215
      description: |
        The serial number of the sensor.
    tid:
      type: integer
      minimum: 0
      description: |
        Transaction ID of the scan that initiated the reading of this
        information.
    ts:
      description: |
        The [Unix timestamp](glossary:Unix-Timestamp) of when the
        information was scanned.
      $ref: "#/ForeverStamp"
    version:
      type: integer
      minimum: 0
      description: |
        The CTid protocol version that the sensor implements.
  required: [ts, tid, port, mfgid, model, sn]
  example: {"ts":"1668455577","tid":2008264382,"port":2,"polarity":"+","version":2,"mfgid":0,"model":"ERA","sn":2,"k":2,"rsrc":176,"rload":10000000,"params":{"size":106.0,"i":2775.0,"v":0.333330,"a":0.45,"tv":0,"ta":0,"cal":{"1.5":{"v":0.00,"a":0.00},"5.0":{"v":0.00,"a":0.00},"15.0":{"v":0.00,"a":0.00},"50.0":{"v":0.00,"a":0.00}}}}

CtrlCallResponseObject:
  type: object
  properties:
    result:
      type: object
      properties:
        tid:
          type: integer
          format: int54
          minimum: 0
          description: |
            The transaction id that uniquely identifies the newly
            issued call.  This id can be used to fetch the result of
            the method call or to cancel the call.
    error:
      $ref: "#/ErrorString"
  example: {"result":{"tid":4294967360}}

CtrlCallResultObject:
  type: object
  properties:
    result:
      description: |
        The value returned by the method.  If the method returns
        no value, this member is not present.
    error:
      description: |
        If this string starts with `EAGAIN:`, the call is still in
        progress and the application should retry the same request at
        a later time.
      $ref: "#/ErrorString"

CtrlDeviceResultObject:
  type: object
  properties:
    result:
      type: array
      description: The list of detected devices.
      items:
        type: object
        description: Detected device description.
        properties:
          path:
            type: array
            items:
              type: string
            description: The unique path identifying the device.
          interface:
            type: array
            items:
              type: string
              description: The list interface names supported by the device.
        additionalProperties:
          patternProperties:
            ^[-_a-zA-Z0-9]*$:
              type: string
              description: |
                The value of the attribute.
    error:
      $ref: "#/ErrorString"

DeviceAttributesObject:
  type: object
  properties:
    path:
      type: array
      items:
        type: string
      description: The unique path identifying the device.
    interface:
      type: array
      items:
        type: string
      description: The list interface names supported by the device.
  additionalProperties:
    patternProperties:
      ^[-_a-zA-Z0-9]*$:
        type: string
        description: |
          The value of the attribute.

DeviceAttributesWithIndexObject:
  type: object
  properties:
    index:
      type: number
      description: |
        The optional index used to select a unique device in case the
        other attributes are ambiguous and match multiple devices.  If
        not specified explicitly, an index of 0 is implied.
    path:
      type: array
      items:
        type: string
      description: The unique path identifying the device.
    interface:
      type: array
      items:
        type: string
        description: |
          The interface name that must be supported by the target
          device.
  additionalProperties:
    patternProperties:
      ^[-_a-zA-Z0-9]*$:
        type: string
        description: |
          The value of the attribute.

DigestObject:
  type: object
  properties:
    rlm:
      type: string
      description: "The authentication realm as returned in a 401 response."
      example: eGauge Administration
    usr:
      type: string
      description: "The username to authenticate with."
      example: owner
    nnc:
      type: string
      description: |
          The server nonce as returned in a 401 response.  Server
          nonces have a lifetime of about 1 minute.  This means a
          client has to be able to complete the digest login within a
          minute of receiving a 401 response. If it fails to do so,
          the server would reject an authentication request, even
          though the credentials may have been valid. If this were to
          happen, the client would simply have to redo the digest
          login with the new nonce. It is therefore advisable for the
          client to (temporarily) save the password the user entered,
          so that if the 1 minute lifetime were to expire, the client
          could reissue the request without having to prompt the user
          for credentials again.
      example: eyJ0eXAi...w5GCvM
    cnnc:
      type: string
      description: |
          A client-selected nonce.  This should be generated with a
          cryptographically strong random number generator.

          The purpose of the client-nonce is to prevent chosen
          plain-text attacks by a malicious server (or
          intermediary). Without the client nonce, a malicious server
          could try to guess the password by sending specially crafted
          nonce values. The client nonce prevents such attacks as long
          as the client uses new and cryptographically strong random
          value on each login attempt.
      example: 565ce9541eddec103347b5174704e188
    hash:
      type: string
      description: |
        The hash which proves that the client possesses
        the password of the specified username.  This must be
        calculated as the MD5 hash of the string obtained by
        concatenating *ha1*, a colon, *nnc*, a colon, and *cnnc*.
        *nnc* is the server nonce
        returned in a 401 response, *cnnc* is the client-selected
        nonce, and *ha1* is the string obtained by calculating the
        MD5 hash of the string obtained by concatenating the
        username *usr*, a colon, realm *rlm*, a colon, and
        password *pwd*.  More formally:

          > *ha1 = MD5(usr:rlm:pwd)* \
          > *hash = MD5(ha1:nnc:cnnc)*
      example: ce5e308c27da651964de14f65bd8b059
  required: [rlm, usr, nnc, cnnc, hash]

EmptyObject:
  properties:
    error:
      $ref: "#/ErrorString"

ErrorObject:
  type: object
  properties:
    error:
      $ref: "./schemas.yaml#/ErrorString"

ErrorString:
  type: string
  description: |
      A message describing the first error that occurred.  This
      member is present only if an error occurred.
  example: "Error message (present if an error occurred)."

ETagHeader:
  description: |
      The returned value is a tag that uniquely identifies the
      meter configuration.  Subsequent modification requests can include
      this tag in an `If-Match` header to apply the modification only if the
      configuration has changed since the tag was obtained.
  schema:
    type: string

Int64:
  type: string
  description: Decimal signed 64-bit integer.
  example: "345359"

ForeverStamp:
  type: string
  description: |
    A [Unix timestamp](glossary:Unix-Timestamp) expressed as a
    decimal string that may contain a fractional value for sub-second
    resolution.  A string is used here since most JSON libraries store
    numbers as IEEE-754 double-precision numbers and the 54-bit
    mantissa of that format may not be sufficient to accurately
    represent the timestamp.
  example: "1677523091.000900435"

FuncObjectName:
  description: |
    The name of the eScript function.
    Function names start with a letter and consist entirely of alpha-numeric
    characters or underscores (`_`).

FuncObjectArg:
  description: |
    The list of input arguments the function expects.

FuncObjectArgItem:
  description: |
    Description of the argument expected at index {idx} of the
    argument list.

FuncObjectArgItemName:
  description: |
    The formal name of the argument.  The name starts with a letter
    and consist entirely of alpha-numeric characters or underscores
    (`_`).  The name usually suggests the purpose of the
    argument.  It may also be referenced within the help string
    (member `help`).  Other than that, the name has no significance.

FuncObjectArgItemType:
  description: |
    A [type code](glossary:Type-Codes) indicating the type of the
    argument.  The special value `string` indicates that the value
    must be a string.

FuncObjectHelp:
  description: |
    The help string (documentation) for this function.  In this
    string, references to argument names are enclosed in `arg` tags
    using an XML-like syntax. For example, a reference to an argument
    with name `count` would appear as `<arg>count</arg>` in this
    string.  This can be used to highlight argument names in the
    document string, for example.

FuncObjectMinArgs:
  description: |
    The minimum number of arguments that need to be passed when
    calling this function.  If zero, all arguments are optional.  This
    value is never larger than the length of the array given for
    member `arg`.

IPv4Object:
  description: |
    The Internet Protocol v4 ([IPv4](https://www.rfc-editor.org/rfc/rfc791))
    configuration.

IPv4ObjectAddress:
  example: 192.168.1.42
  description: |
    An IPv4 address in dotted decimal notation.

IPv4ObjectBroadcast:
  example: 192.168.1.255
  description: |
    An IPv4 broadcast address in dotted decimal notation.

IPv4ObjectDHCP:
  description: |
    Whether or not to use [DHCP](https://www.ietf.org/rfc/rfc2131.txt)
    to automatically provision the IPv4 address.  If `true`, DHCP is
    enabled. If `false`, the manually configured IPv4 settings are
    used.

IPv4ObjectNetmask:
  example: 255.255.255.0
  description: |
    The address of the IPv4 gateway in dotted decimal notation.

IPv4ObjectNetwork:
  example: 192.168.1.0
  description: |
    The IPv4 network mask in dotted decimal notation.

IPv4ObjectGateway:
  example: 192.168.1.1
  description: |
    The IPv4 network number in dotted decimal notation.

JWTObject:
  type: object
  properties:
    jwt:
      type: string
      format: jwt
      description: "A JWT which can be used to authenticate accesses to
      protected resources."
      example: eyJ0eXAi...aQvQxY
    error:
      $ref: "#/ErrorString"

KernelLogObject:
  type: object
  properties:
    log:
      type: array
      description: |
        The kernel log, sorted from oldest to youngest.
      items:
        type: object
        properties:
          prio:
            type: integer
            minimum: 0
            description: |
              The priority of the log message, 0 being lowest
              priority and 7 being the highest.
          ts:
            type: number
            description: |
              The timestamp of when the entry was added to
              the log.  It is measured as seconds since the meter was
              booted (powered up).
          msg:
            type: string
            description: "The log message."
      example: [{"prio":6,"ts":"6.9801816","msg":"    6.980181] ehci-atmel: EHCI Atmel driver"},{"prio":3,"ts":"6.9886136","msg":"    6.988613] atmel-ehci 500000.ehci: EHCI Host Controller"}]
    error:
      $ref: "#/ErrorString"

LocalObject:
  type: object
  properties:
    ts:
      description: |
        The realtime stamp of when the returned values where measured.
      $ref: "#/ForeverStamp"
    apparent:
      $ref: "#/LocalApparentObject"
    energy:
      $ref: "#/LocalEnergyObject"
    stats:
      $ref: "#/LocalStatsObject"
    values:
      $ref: "#/LocalValuesObject"
  required: [ts]
  example: {"ts":"1579893622.000132","values":{"L1":{"rate":{"n":125.01754,"f":60.0079803}},"L3-L1":{"rate":{"n":0.631658375,"f":59.9902229}},"S15":{"rate":{"n":0.554819047,"f":0}},"S5":{"rate":{"n":3.87214255,"f":0}}},"energy":{"S1*L1":{"rate":-145.436066},"S15*(L3-L1)":{"rate":-0.000681963167},"-S5*L1":{"rate":-0.846870422}}}

LocalApparentObject:
  type: object
  description: |
      Calculated apparent energy values (product of the normal values of two
      sensors).
  patternProperties:
    ".*$":
      type: object
      description: |
          Apparent energy metrics.  The member names indicate the pair
          of sensors used to calculate the apparent energy.  For
          example, `S3*L3` is the apparent energy of sensor
          inputs `S3` and `L3`.  If the member name starts with a dash
          (`-`), it indicates that the produce was negated.
      properties:
        cumul:
          # $ref: "#/Int64"	 this isn't working...
          type: string
          description: |
              Accumulated apparent energy.  This is a signed 64-bit integer
              encoded as a decimal string.
          example: "-3452345"
        rate:
          type: number
          description: Rate of change of apparent energy (apparent power).

LocalEnergyObject:
  type: object
  description: |
      Calculated (real) energy values (time-integral of the product of
      two sensors).
  patternProperties:
    "^.*$":
      description: |
          Real energy metrics. The member names indicate the pair of
          sensors used to calculate the energy.  For example, `S3*L3`
          is the energy of sensor inputs `S3` and `L3`.  If the
          member name starts with a dash (`-`), it indicates that the
          value of the first sensor was negated before
          time-integrating the product.
      type: object
      properties:
        cumul:
          # $ref: "#/Int64"	 this isn't working...
          type: string
          description: |
              Accumulated energy.  This is a signed 64-bit integer
              encoded as a decimal string.
          example: "-1234"
        rate:
          description: Rate of change of energy (power).
          type: number

LocalStatsObject:
  type: object
  properties:
    dt_overflow:
      type: integer
    upos_overflow:
      type: integer
    zc_overflow:
      type: integer
    dt2_overflow:
      type: integer
    dt2_out_of_10percent_bounds:
      type: integer
    ring_buffer_overflows:
      type: integer
    dma_late:
      type: integer
    intgr_overflows:
      type: integer

LocalValuesObject:
  type: object
  description: Sensor values.
  patternProperties:
    "^.*$":
      description: Sensor metric and/or type.
      type: object
      properties:
        type:
          description: |
            [Type code](glossary:Type-Codes) indicating physical unit.
          type: string
        cumul:
          description: Accumulated sensor values.
          type: object
          properties:
            n:
              # $ref: "#/Int64"	 this isn't working...
              type: string
              description: |
                  Accumulated normal value (usually RMS).  This is a
                  signed 64-bit integer encoded as a decimal string.
              example: "42"
            m:
              # $ref: "#/Int64"	 this isn't working...
              type: string
              description: |
                  Accumulated mean (average) value.  This is a
                  signed 64-bit integer encoded as a decimal string.
              example: "345"
            f:
              # $ref: "#/Int64"	 this isn't working...
              type: string
              description: |
                  Accumulated frequency [Hz·s].  This is a
                  signed 64-bit integer encoded as a decimal string.
              example: "345"
        rate:
          description: Rate of change (current) values.
          type: object
          properties:
            n:
              description: Normal value (usually RMS value).
              type: number
            m:
              description: Mean (average) value.
              type: number
            f:
              description: Frequency [Hz].
              type: number

LuaLogObject:
  type: object
  properties:
    log:
      type: array
      description: |
        The Lua output log, sorted from oldest to youngest.
      items:
        type: object
        properties:
          ts:
            description: |
              The [Unix timestamp](glossary:Unix-Timestamp) indicating
              when the entry was added to the log.
            $ref: "#/ForeverStamp"
          msg:
            type: string
            description: "The log message."
    error:
      $ref: "#/ErrorString"
  example: {"log":[{"ts":"1677872469.109779248","msg":"Register cost script failed: Lua error: unknown register Grid."},{"ts":"1677872470.100956573","msg":"Tariff season: Winter"}]}

ModbusClientMapObject:
  example: {"option":{"default-modbus-addr": "2", "default-serial-params":"9600/8n1"},"reg":[{"name":"irradiance","addr":0,"type":"u32","kind":"analog","unit":"W","offset":0,"scale":0.1,"access":"ro"},{"name":"temp","addr":1,"type":"s32","kind":"analog","unit":"degC","offset":0,"scale":0.01,"access":"ro"}]}
  description: |
    Modbus map consisting of a list of register definitions and a set
    of options.

ModbusClientMapObjectOption:
  example: {default-modbus-addr: "2", default-serial-params: 9600/8n1}
  description: |
    A set of options.  The meter currently supports the following
    options:

      * `default-modbus-addr`: The Modbus unit-number to use by
      default.  This must be a decimal string.  For example: `"1"`.

      * `default-serial-params`: The default serial parameters to use
      when the remote device is connected via a serial port
      (Modbus/RTU).  This must be a string.  For example: `"9600/8n1"`
      for 9600 baud, 8 databits, no parity, 1 stop bit.

      * `default-tcp-port`: The default TCP port number to use when
      the remote device is connected via Modbus/TCP.  This must be a
      decimal string.  For example: `"6001"`.

ModbusClientMapObjectOptionObject:
  example: 9600/8n1
  description: |
    The value of the Modbus map option.

ModbusClientMapObjectReg:
  description: |
    A list of Modbus register definitions.

ModbusClientMapObjectRegObject:
  description: |
    A Modbus register definition.

ModbusClientMapObjectRegObjectName:
  example: irradiance
  description: |
    The name of the register.  The user can choose this name freely so
    long as each register within a map has a unique name.

ModbusClientMapObjectRegObjectAddr:
  minimum: 0
  maximum: 65535
  description: |
    The Modbus address of the register.

ModbusClientMapObjectRegObjectType:
  example: u32
  enum: [bit, s16, u16, s32, u32, s32l, u32l, s64, u64, float16, float16l, float, floatl, double]
  description: |
    The type of the register value.  This may be one of the following:

      * `bit`: One-bit value (a coil, in Modbus terminology).
      * `s16`: Signed 16-bit integer.
      * `u16`: Unsigned 16-bit integer.
      * `s32`: Signed 32-bit integer.
      * `u32`: Unsigned 32-bit integer.
      * `s32l`: Signed 32-bit integer, word-swapped.
      * `u32l`: Unsigned 32-bit integer, word-swapped.
      * `s64`: Signed 64-bit integer.
      * `u64`: Unsigned 64-bit integer.
      * `float16`: IEEE-754 half-precision float.
      * `float16l`: IEEE-754 half-precision floating point,
        little-endian (byte-swapped).
      * `float`: IEEE-754 single-precision float.
      * `floatl`: IEEE-754 single-precision float, word-swapped.
      * `double`: IEEE-754 double-precision float.

ModbusClientMapObjectRegObjectKind:
  enum: [analog, enum, bitset]
  description: |
    The kind of the register. Possible values are:

      * `analog`: The value is continuous (the average of two values is
        meaningful).

      * `enum`: The value is discrete (the average of two values is not
        meaningful).  An example for this would be a numeric error code.

      * `bitset`: Each bit in the value is a discrete on/off value.
      An example for this would be a set of error flags.

ModbusClientMapObjectRegObjectUnit:
  example: W
  description: |
    For register of the `analog` kind, this defines the physical unit of
    the register value.  This must be one of the following:

      * `#3`: Unit-less number with 3 decimal digits of precision.
      * `%`: Percentage.
      * `A`: Electric current in amperes.
      * `Ah`: Electric charge in ampere-hours.
      * `As`: Electric charge in ampere-seconds.
      * `C`: Temperature in degree celsius.
      * `Degrees`: Angle in degrees.
      * `Hz`: Frequency in hertz.
      * `Ohm`: Resistance in ohm.
      * `Pa`: Pressure in pascals.
      * `Pct`: Percentage.
      * `RH`: Relative humidity.
      * `Tmd`: Time in days.
      * `Tmh`: Time in hours.
      * `Tms`: Time in seconds.
      * `VA`: Apparent power in volt-amperes.
      * `VAh`: Apparent energy in volt-ampere-hours.
      * `V`: Electric potential in volts.
      * `W/m2`: Irradiance in watts-per-square-meter.
      * `W/m^2`: Irradiance in watts-per-square-meter.
      * `W`: Power in watts.
      * `Wh`: Energy in watt-hours.
      * `degC`: Temperature in degree celsius.
      * `deg`: Angle in degrees.
      * `g`: Mass in grams.
      * `hPa`: Pressure in hecto-pascals.
      * `h`: Time in hours.
      * `kAh`: Electric charge in kilo-ampere-hours.
      * `kO`: Resistance in kilo-ohms.
      * `kPa`: Pressure in kilo-pascals.
      * `kVAh`: Apparent energy in kilo-volt-ampere-hours.
      * `kW`: Power in kilo-watts.
      * `kWh`: Energy in kilo-watt-hours.
      * `kg`: Mass in kilo-grams.
      * `kvarh`: Reactive energy in kilo-volt-ampere-hours.
      * `m/s`: Speed in meters-per-second.
      * `m3/s`: Volume flow in cubic-meters-per-second.
      * `m3`: Volume in cubic-meters.
      * `mA`: Electric current in milli-amperes.
      * `mAh`: Electric charge in milli-ampere-hours.
      * `mSecs`: Time in milli-seconds.
      * `mV`: Electric potential in milli-volts.
      * `mV`: Electric potential in milli-volts.
      * `m^3/s`: Volume flow in cubic-meters-per-second.
      * `m^3`: Volume in cubic-meters.
      * `meters`: Distance in meters.
      * `mm`: Distance in milli-meters.
      * `mps`: Speed in meters-per-second.
      * `ms`: Time in milli-seconds.
      * `ohms`: Resistance in ohm.
      * `ppm`: Parts-per-million.
      * `s`: Time in seconds.
      * `secs`: Time in seconds.
      * `var`: Reactive power in volt-ampere.
      * `varh`: Reactive energy in volt-ampere-hours.
      * `°C`: Temperature in degree celsius.

ModbusClientMapObjectRegObjectOffset:
  description: |
    An offset value that is used to convert the Modbus register value
    to a value in the specified physical unit.  Specifically, when the
    Modbus value of the register is *reg*, then corresponding physical
    value *phys* is calculated as:

      > *phys* = (*reg* + `offset`) * `scale`

    where `offset` is the value defined here and `scale` is
    the value defined for member `scale`.

ModbusClientMapObjectRegObjectScale:
  example: 0.1
  description: |
    A scale value that is used to convert the Modbus register value
    to a value in the specified physical unit.  Specifically, when the
    Modbus value of the register is *reg*, then corresponding physical
    value *phys* is calculated as:

      > *phys* = (*reg* + `offset`) * `scale`

    where `scale` is the value defined here and `offset` is
    the value defined for member `offset`.

ModbusClientMapObjectRegObjectAccess:
  enum: [ro, rw]
  description: |
    The access-mode of the register.  It must be one of:
      * `ro`: read-only
      * `rw`: read-write

PasswordObject:
  type: object
  properties:
    pwd:
      type: string
      format: password
      description: "The password to authenticate with."
      example: secrets-secrets
    rlm:
      type: string
      description: "The authentication realm as returned in a 401 response."
      example: eGauge Administration
    usr:
      type: string
      description: "The username to authenticate with."
      example: owner
  required: [rlm, usr, pwd]

RegisterResponseObject:
  properties:
    error:
      $ref: "#/ErrorString"
    ranges:
      type: array
      items:
        type: object
        properties:
          ts:
            description: |
              The timestamp of the first row in member `rows`.
            $ref: "#/ForeverStamp"
          delta:
            type: number
            minimum: 0
            description: |
                The number of seconds that elapsed between adjacent
                entries in array `rows`.
          rows:
            type: array
            items:
              type: array
              items:
                $ref: "#/Int64"
            description: |
                An array of register rows ordered from youngest to
                oldest.  The first row was measured at the timestamp
                given by member `ts`.  Each subsequent row is `delta`
                seconds older than its preceeding row.  A row consists
                of an array of strings which list the register values
                in order of increasing register index.  Only selected
                registers are present in this array (see query option
                `reg`).  The register values are signed 64-bit
                integers, represented as decimal strings.
    registers:
      type: array
      items:
        type: object
        properties:
          did:
            type: integer
            minimum: 0
            description: |
              This member is present only for physical registers.  It
              indicates the column number in which the database stores
              the register value.  Each physical register has a
              unique column number.  If a register is renamed, this
              number remains the same.  On the other hand, if a
              register is deleted and then another one is added back,
              the new one may get assigned the column number of the
              old, deleted register.
          formula:
            type: string
            description: |
              This member is present for virtual registers but only if
              query parameter `virtual=formula` is specified.  It
              provides the
              [formula](glossary:Virtual-Register-Formulas) that
              is used to calculate the value of the virtual register.
          idx:
            type: integer
            minimum: 0
            description: |
              The index of this register.  Register indices are used
              to provide a compact way to specify sets of registers
              (see query parameter `reg`).
          name:
            type: string
            description: The register name.
          rate:
            type: number
            description: |
              The rate at which the value of the register is changing
              as of the most recent measurement.  For example, for a
              register that records energy used, the number reported
              here is the current power consumption.
          type:
            type: string
            description: |
              The [type code](glossary:Type-Codes) of the register.
        required: [name, type, idx]
    ts:
      description: |
        The realtime stamp of the most recent measurement.  This is
        the time the `rate` members returned in section `registers`
        were measured.
      $ref: "#/ForeverStamp"
  example: {"ts":"1678330813.000129799","registers":[{"name":"use","type":"P","idx":0,"formula":"+\"Grid\"+\"Solar\""},{"name":"Grid","type":"P","idx":17,"did":0,"rate":1798},{"name":"Solar","type":"P","idx":20,"did":1,"rate":-4}],"ranges":[{"ts":"1678298313.000129799","delta":1.000,"rows":[["117607805899","268487638108"],["-224","-480"],["-218","-481"]]},{"ts":"1678298040","delta":60.000,"rows":[["905","-3533"],["7663","-34573"],["12036","-35703"],["8418","-36612"],["6408","-37505"]]}]}

RegisterConditionObject:
  properties:
    current:
      $ref: "#/ForeverStamp"
      description: |
          Current value of the time point specified in the condition.
    error:
      $ref: "#/ErrorString"
    result:
      type: boolean
      example: false
      description: |
        The value the condition evaluated to.  This will always be
        `false` as, otherwise, a normal register result would have
        been returned.

RightsObject:
  properties:
    usr:
      type: string
      description: "The username of the authenticated user."
      example: owner
    rights:
      description: |
        The array of rights the user possesses.  Possible rights
        are:

          1) `save`: The user has the right to change (save) the meter
          configuration.

          1) `ctrl`: The user has the right to perform control operations
          such as putting a device in a particular operational state
          (e.g., opening or closing a relay or setting the temperature
          on a thermostat).  The device being controlled may be a remote
          device attached to the meter implementing this API.
      type: array
      items:
        type: string
        enum:
        - save
        - ctrl
      example: ["save", "ctrl"]

ServiceProvidersObject:
  type: object
  properties:
    reply:
      type: object
      properties:
        providers:
          type: array
          description: |
            The list of available service providers.
          items:
            type: object
            description: |
              A service provider.
            properties:
              name:
                type: string
                description: |
                  The name of the service provider.
              control:
                type: string
                description: |
                  The control URL through which a customer can sign up
                  for this service.

StatusObject:
  type: object
  properties:
    status:
      type: string
      description: "A string describing the successful completion of an
      operation."
      example: OK
    error:
      $ref: "#/ErrorString"

StoreContentObject:
  type: object
  properties:
    name:
      type: string
      description: |
        The name of the section being read.
    content:
      description: |
          The content as name/value pairs.
      patternProperties:
        "^[-a-zA-Z%_/]*$":
          type: string
          description: |
            The value of the variable.  Interpretation of this value
            is left to the applications that use it.  By convention,
            this is often a URL-encoded string or a JSON-encoded
            value.

StoreVariableUpdates:
  type: object
  patternProperties:
    "^[-a-zA-Z%_/]*$":
      type: [string, 'null']
      description: |
        The new value of the variable.  A `null` value deletes the
        variable.  Any other value either creates a new variable or
        updates an existing variable with the specified value.

        Interpretation of this value is left to the applications that
        use it.  By convention, this is often a URL-encoded string or
        a JSON-encoded value.

StoreVariable:
  type: object
  properties:
    "":
      type: [string, 'null']
      description: |
        The new value of the variable.  A `null` value deletes the
        variable.  Any other value either creates a new variable or
        updates an existing variable with the specified value.

        Interpretation of this value is left to the applications that
        use it.  By convention, this is often a URL-encoded string or
        a JSON-encoded value.

StoreSingleVariableUpdate:
  type: object
  properties:
    "":
      type: [string, 'null']
      description: |
        The new value of the variable.  A `null` value deletes the
        variable.  Any other value either creates a new variable or
        updates an existing variable with the specified value.

        Interpretation of this value is left to the applications that
        use it.  By convention, this is often a URL-encoded string or
        a JSON-encoded value.

SystemLogObject:
  type: object
  properties:
    log:
      type: array
      description: |
        The system log, sorted from oldest to youngest.
      items:
        type: object
        properties:
          msg:
            type: string
            description: |
              The syslog message.  The message starts with a
              human-readable timestamp.  However, there is no
              indication of the timezone in this timestamp and,
              depending on the source of the message, the timestamp
              may be in UTC or in the local timezone.
    error:
      $ref: "#/ErrorString"
  example: {"log":[{"msg":"Aug 31 22:11:08 devname syslog.info syslogd started: BusyBox v1.26.2"},{"msg":"Aug 31 22:11:08 devname daemon.err statusd[427]: failed"}]}

TariffProvidersObject:
  type: object
  properties:
    reply:
      type: object
      properties:
        providers:
          type: array
          description: |
            The list of available tariff service providers.
          items:
            type: object
            description: |
              A tariff service provider.
            properties:
              name:
                type: string
                description: |
                  The tariff name.
              country:
                type: string
                description: |
                  The name of the country in which this tariff
                  provider operates.
              utility:
                type: string
                description: |
                  The name of the service provider.
              tariffs:
                type: string
                description: |
                  The URL of a [Lua](glossary:Lua-Scripts) script
                  which calculates the applicable rate.
              params:
                type: array
                description: |
                  An array of tariff parameters that need to be
                  defined for this tariff provider.  User interfaces
                  need to make sure that the listed parameters are
                  filled in by the user and then save them in the
                  corresponding [server-storage](path:/store) variables
                  before activating the tariff.  The Lua tariff script
                  can then rely on these variables to correctly
                  calculate cost.

                  The parameters have the following meaning:

                    * `bill_contracted_demand`: If present,
                    [server-storage](path:/store) variable
                    `global/billing/bill_contracted_demand` needs to
                    be set up to indicated whether or not the contract
                    demand should be billed, regardless of the actual
                    demand.  If the value of this variable is the
                    string `"true"`, the contract demand needs to be
                    billed.

                    * `contract_demand`: If present,
                    [server-storage](path:/store) variable
                    `global/billing/contract_demand` needs to be set
                    up to indicate the demand (typically in kilowatts)
                    that was contracted from the utility.  This must
                    be a decimal number string.

                    * `start_day`: If present,
                    [server-storage](path:/store) variable
                    `global/billing/start_day` needs to be set up to
                    indicate the day of the month that the meter is
                    read.  This must be a decimal integer string in
                    the range from 1 to 31.

                    * `surcharges`: If present,
                    [server-storage](path:/store) variable
                    `global/billing/surcharges` needs to be set up to
                    indicate energy surcharges as a cost per unit
                    energy (e.g., dollars per kWh).  This must be a
                    decimal number string.

                    * `taxes`: If present,
                    [server-storage](path:/store) variable
                    `global/billing/taxes` needs to be set up to
                    indicate the percentage of taxes to add to the
                    calculated energy cost.  This must be a positive
                    decimal number string.
                items:
                  type: string
                  enum:
                    - bill_contracted_demand
                    - contract_demand
                    - start_day
                    - surcharges
                    - taxes
TokenObject:
  properties:
    token:
      type: string
      description: |
          A status token.  This token is a hexadecimal string
          (typically 32 characters long) which can be used to check on
          the current status of a potentially long-running operation.
          The current status can be retrieved from URL
          [/sys/status/*token*](path:/sys/status/{token}).
      example: 473c31462e62848b5352314dfc608669
    error:
      $ref: "#/ErrorString"

UnauthorizedObject:
  description: Unauthorized response.
  properties:
    rlm:
      type: string
      description: "The authentication realm."
      example: eGauge Administration
    nnc:
      type: string
      description: "The server nonce to use for obtaining JWT token via the
      digest protocol."
      example: eyJ0eXAi...w5GCvM
    error:
      type: string
      description: "The reason the 401 response was returned."
      example: Authentication required.

VersionObject:
  properties:
    version:
      type: string
      description: "The latest available firmware/kernel version."
      example: 4.4
    minimum:
      type: string
      description: |
        The minimum firmware/kernel version that should be used on the
        meter.  Older versions may not have the latest security fixes
        or other issues that could prevent proper operation of the
        meter.
      example: 4.1.2
    error:
      $ref: "#/ErrorString"
