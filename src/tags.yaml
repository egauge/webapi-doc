# Tags are output in the order in which they appear here.  We start
# with the Intro and end with the Glossary.

- name: Introduction
  description: |
    The eGauge WebAPI is a [JSON](https://www.json.org/)-based API
    that provides access to eGauge meters. It offers secure means to
    read device data, configure the device, and perform various
    control operations.

    The WebAPI is intended to eventually replace the [eGauge XML
    API](https://www.egauge.net/docs/egauge-xml-api.pdf). For new
    applications, developers are encouraged to use WebAPI rather than
    the legacy XML API.

    ## Legal Disclaimer

    This document and the API it describes may be amended and modified
    by eGauge Systems LLC at any time with or without notice. eGauge
    Systems LLC strives to avoid changes that break
    backwards-compatibility, but reserves the right to do so at its
    sole discretion.

    ## Getting Started

    ### With Python

    To make it easy to get started, eGauge provides an open source
    Python package.  It can be installed with the command:

      ```sh
      pip install egauge-python
      ```

    With this package installed, accessing an eGauge meter becomes
    very simple.  For example, to fetch the hostname of the meter, you
    could use:

      ```python
      from egauge import webapi

      URI = "https://DEV.egaug.es"      # replace DEV with meter name
      USR = "USER"                      # replace USER with user name
      PWD = "PASS"                      # replace PASS with password

      dev = webapi.device.Device(URI, webapi.JWTAuth(USR,PWD))

      print("hostname is " + dev.get("/config/net/hostname")["result"])
      ```

    The package also contains various convenience classes to read
    meter data, capture waveform samples, convert between physical
    units, and so on.

    The official GIT repository for this package is at
    [https://bitbucket.org/egauge/python/](https://bitbucket.org/egauge/python/).
    Various code examples can be found in the
    [examples](https://bitbucket.org/egauge/python/src/master/examples/)
    directory.

- name: /auth
  description: |
    The authentication service.  Clients can use
    this to obtain and manage tokens that grant access to the other
    resources in this API.


    The meter uses [JSON Web
    Tokens](https://rfc-editor.org/rfc/rfc7519) (JWT or simply token)
    to restrict access to protected resources.  Clients must include
    such tokens in requests via the [HTTP Authorization
    header](https://www.rfc-editor.org/rfc/rfc7235).  This header must
    have the form:

      > Authorization: Bearer *JWT*

    where *JWT* is a valid token.

    Tokens are valid for a limited time; typically for about 10
    minutes.  However, a meter may revoke a token earlier, e.g.,
    due to a reboot.

- name: /capture
  description: |
    The capture service allows collecting waveform data for configured
    input channels.

    ## Basic Usage

    `GET /capture&i` returns information about the channels for which
    waveform data can be captured.  The returned object might look
    like this:

    ```json
    {
      "channels": {
        "0": {"name": "L1", "unit": "V"},
        "1": {"name": "L2", "unit": "V"},
        "4": {"name": "S1", "unit": "A"}
        }
    }
    ```

    This response indicates that three channels are available.  The
    meter-internal channel numbers are 0, 1, and 4. As the `name`
    values indicate, those channels correspond to meter inputs L1, L2,
    and S1, respectively.  The first two channels return samples as
    volts (`V`) and the third returns samples as amperes (`A`).

    `GET /capture?n&d=1e-3&c=0&c=4` initiates a capture for 1ms of
    samples on channels 0 and 4 and returns a cookie (token) to be
    used to retrieve the capture samples. The response for this
    request might look like this:

    ```json
    {"state": "armed", "cookie": 1875353535}
    ```

    State `armed` indicates that the meter successfully processed the
    capture request and is waiting for the trigger to occur. Cookie
    `1875353535` is a random integer to be used when retrieving the
    sampled data, as shown next.

    `GET /capture?n=1875353535` can now be used to fetch the samples.
    The response might look as shown below:

    ```json
      {
        "state": "full", "ts_freq": 1000000, "first_sample": "1619637288.061",
        "ch_mask": [17, 0],
        "r": [
          {"t": 495514564, "d": [135.059]},
          {"t":        82, "d": [-0.0146239]},
          {"t":      1354, "d": [105.454, -0.00731193]}
        ]
      }
    ```

    State `full` indicates that the capture buffer is full and
    therefore the response contains sample values. The frequency of
    the counter used to generate the timestamps is 1MHz (`"ts_freq":
    1000000`) and the realtime [Unix
    timestamp](glossary:Unix-Timestamp) of the first sample is 28
    April 2021, 19:14:48 UTC (`first_sample": "1619637288.061"`). The
    `ch_mask` member is an array of 32-bit integers.  If a bit is set
    in this mask, data for that channel is included in the response.
    In our case, the channel mask has only bits 0 and 4 set in the
    first integer (17), indicating that channels 0 and 4 are contained
    in the sampled data (in order from smallest to largest channel
    numbers). The timestamp `t` of the first sample is 495514564 and
    the subsequent samples were acquired 82 and 1354 timestamp ticks
    after the corresponding previous sample.  Thus, the reconstructed
    sample values for the channels are:

      |**Timestamp [Âµs]**|**Channel 0 value [V]**|**Channel 1 value [A]**|
      |-----------------:|----------------------:|----------------------:|
      |         495514564|                135.059|                       |
      |         495514646|                       |            -0.01462390|
      |         495516000|                105.454|            -0.00731193|

    Note how the sample values are returned strictly in order from
    lowest number to highest numbered channel: 0, 4, 0, 4.  Also note
    how there is a separate entry in the result array `r` for each
    unique timestamp.  Each data array (`d`) may have just a single
    entry or multiple entries if there are multiple sample values with
    the same timestamp.

    ## Python Example

    A Python program illustrating the use of this service can be found
    [here](https://bitbucket.org/egauge/python/src/master/examples/test_capture.py).
    This program takes advantage of class
    `egauge.webapi.device.Capture` to handle the details of encoding
    the HTTP requests and decoding the responses.

- name: /cmd
  description: |
    The service provides the ability to execute various operations for
    their side effects, such as rebooting the meter.  Unless stated
    otherwise, the resources in this service are available only to
    users with the save right (see
    [/auth/rights](op:/auth:authRightsGet)).

- name: /config
  x-path-methods: [get, put, post, delete]
  x-path-method-get:
    parameters:
    - $ref: "./params.yaml#/maxDepthParam"
      x-meta-types: [object, array]
    - $ref: "./params.yaml#/filterParam"
      x-meta-types: [object, array]
    responses:
      "200":
        headers:
          ETag:
            $ref: "schemas.yaml#/ETagHeader"
  x-path-method-put:
    description: |
      A `PUT` request is equivalent to a `DELETE` followed by a `POST`
      with the same request body.  Because of that, care must be taken
      to ensure the desired configuration is written.  Specifically:

        * The classic interface uses CGI-BIN programs.  It is
          therefore recommended to include member
          `"net":{"http":{"cgi-bin":"user-required"}}` in the request
          body as otherwise CGI-BIN support is disabled.

        * Member `alert` may contain references to register names (as
          part of custom alert conditions).  This member should
          therefore appear after member `register`.

        * Member `remote` must appear in the request body before
          member `register` as otherwise the remote registers in this
          member will be deleted when member `remote` is processed.
  x-schema:
    description: The meter configuration.
  description: |
    The meter configuration service.

    The endpoints under `/config` provide common method semantics and
    atomicity guarantees as described below.


    ## HTTP Method Semantics

    The endpoints generally support HTTP methods `GET`, `PUT`, `POST`,
    and `DELETE`, though some of the endpoints may have restrictions.
    For example, security-sensitive values such as certificates or
    passwords are usually write-only.

    `GET` returns the current value of the endpoint and has no
    side-effect.

    The exact semantics of the other methods depend on the JSON type
    of the value that the endpoint represents:

    ### Semantics for Object Values

    `PUT` replaces the value of the object with the one in the request
    body.  `POST` updates the object based on the members in the
    request body.  That is, the `POST` may add new members or updates
    the values of existing members. `DELETE` removes the object where
    that makes sense and otherwise resets the object to its default
    value.

    ### Semantics for Array Values

    `PUT` replaces the value of the array with the array contained in
    the request body.  `POST` appends the array in the request body to
    the existing array.  `DELETE` removes the array where that makes
    sense and otherwise resets it to its default value (usually the
    empty array).

    ### Semantics for String and Number Values

    `PUT` and `POST` replace the value.  `DELETE` removes the
    value if that is possible and otherwise resets it to the default
    value.

    ## Atomicity

    `GET` responses are guaranteed to return a consistent view of the
    meter configuration.  That is, if there are simultaneous
    modification requests, it is guaranteed that the modifications
    take place either before or after the `GET` response is created,
    not partway through it.

    Modification requests (`POST`, `PUT`, and `DELETE`) are executed
    transactionally, meaning either all of a modification is applied
    or none of it.  Multiple modifications are applied in a
    sequentially consistent fashion.  That is, there must exist a
    sequential order in which the modifications can be applied that
    yields the final result.

    HTTP headers `ETag` and `If-Match` can be used to ensure a
    modification request is applied only if the configuration has not
    been changed since the `GET` request that returned the `ETag`.

- name: /config/alert
  description: |
    The alert configuration of the meter.

- name: /config/alert/custom
  x-path-var:
    name: idx
    in: path
    description: |
      The index of a custom alert.
    required: true
    schema:
      type: integer
      minimum: 0
  description: |
    Up to 32 custom alerts.

    Custom alerts consist of an arbitrary boolean condition that is
    checked at certain times.  When the condition evaluates to true,
    the alert is triggered.

- name: /config/alert/custom/{idx}
  x-path-method-delete:
    description: |
      Delete this custom alert.
  description: |
    The custom alert.

- name: /config/alert/custom/{idx}/cond
  x-path-method-delete:
    description: |
      Reset to default condition which is always false.
  description: |
    The boolean condition consists of three parts: `lhs op rhs`. `lhs`
    and `rhs` are arbitrary expressions and `op` must be a comparison
    operator.

- name: /config/alert/custom/{idx}/cond/lhs
  description: |
    An [eScript](glossary:eScript) expression that returns the
    value to use on the left hand side of the comparison.
  x-schema:
    example: temp_internal()

- name: /config/alert/custom/{idx}/cond/op
  x-path-method-delete:
    description: |
      Reset to `<`.
  x-schema:
    enum: ["<", "<=", "==", "!=", ">=", ">"]
  description: |
    The comparison-operator to use for comparing the left-hand-side
    expression `lhs` against the right-hand side expression `rhs`.  It
    may be one of:

      * `<`: Condition is true if `lhs` is less than `rhs`.
      * `<=`: Condition is true if `lhs` is less-than-or-equal to `rhs`.
      * `==`: Condition is true if `lhs` is equal to `rhs`.
      * `!=`: Condition is true if `lhs` differs from `rhs`.
      * `>=`: Condition is true if `lhs` is greater-than-or-equal to `rhs`.
      * `>`: Condition is true if `lhs` is greater than `rhs`.

- name: /config/alert/custom/{idx}/cond/rhs
  x-schema:
    example: "30"
  description: |
    An [eScript](glossary:eScript) expression that returns the
    value that to use on the right hand side of the comparison.

- name: /config/alert/custom/{idx}/detail
  x-schema:
    example: "It is hot in here: %l C!"
  description: |
    Alert detail message.  This may be up to 255 bytes in length.  The
    following sequences within this string get replaced as follows:

      * `%%` is replaced by a single percent character.
      * `%l` is replaced by the value of the `lhs` expression.
      * `%r` is replaced by the value of the `rhs` expression.
      * `%L` is replaced by the `lhs` expression string.
      * `%R` is replaced by the `rhs` expression string.

- name: /config/alert/custom/{idx}/frequency
  x-path-method-delete:
    description: |
      Reset to `sec`.
  x-schema:
    enum: [sec, min, hr, dy, wk, mon, an]
  description: |
    The frequency with which this custom alert should be checked.
    Possible values are:

      * `sec`: The alert will be checked once a second.
      * `min`: The alert will be checked once a minute.
      * `hr`: The alert will be checked once an hour.
      * `dy`: The alert will be checked once a day.
      * `wk`: The alert will be checked once a week.
      * `mon`: The alert will be checked once a month.
      * `an`: The alert will be checked once a year.

- name: /config/alert/custom/{idx}/name
  x-schema:
    example: "temperature alert"
  description: |
    The user-selected name of this custom alert.

- name: /config/alert/custom/{idx}/priority
  x-schema:
    minimum: 0
    maximum: 7
  description: |
    The priority of this custom alert.  Zero is the lowest, seven the
    highest priority.

- name: /config/alert/reporter
  x-path-method-delete:
    description: |
      Reset to default (reporting disabled).
  description: |
    The alert reporting configuration.  Alerts may be reported via a
    web server or via an email server.

- name: /config/alert/reporter/mail
  x-path-method-delete:
    description: |
      Reset to default (email reporting disabled).
  description: |
    The configuration for reporting alerts via email server.  If alert
    reporting via web server is enabled
    ([/config/alert/reporter/web/uri](glossary:configalertreporterweburi)
    is not empty), reporting via email server is disabled.

- name: /config/alert/reporter/mail/server
  x-schema:
    example: smtp.mail.com
  description: |
    The hostname of a mail server that speaks the
    [SMTP](https://www.rfc-editor.org/rfc/rfc821) protocol.  If this
    is set to an empty string, the meter will attempt to deliver mail
    directly to the destination host.  Many Internet service providers
    block direct mail delivery, so leaving this string empty generally
    results in alert emails getting blocked.

- name: /config/alert/reporter/mail/user
  x-schema:
    example: egaugealert@mail.com
  description: |
    The user name to provide to the email server for authentication
    purposes.

- name: /config/alert/reporter/mail/password
  x-path-methods: [put, post, delete]
  description: |
    The password to provide to the email server for authentication
    purposes.

    This resource is write-only.

- name: /config/alert/reporter/mail/from-address
  x-schema:
    example: eGauge1345
  description: |
    The "From" email address to use when sending an email alert.  If
    set to an empty string, the email server will use a default
    address.

- name: /config/alert/reporter/mail/to
  x-path-var:
    name: idx
    in: path
    description: |
      The index of an alert destination.
    required: true
    schema:
      type: integer
      minimum: 0
      maximum: 3
  description: |
    The email destinations to send the alerts to.

- name: /config/alert/reporter/mail/to/{idx}
  description: |
    An email destination to send the alerts to.

- name: /config/alert/reporter/mail/to/{idx}/address
  x-schema:
    example: user@site.com
  description: |
    The destination email address to send the alert to.

- name: /config/alert/reporter/mail/to/{idx}/format
  x-path-method-delete:
    description: |
      Delete this mail destination.
  description: |
    The reporting format to use for this destination.  Valid values
    are:

      * `short`: Report only the newest alert with the highest
        priority.

      * `full`: Report all unacknowledged alerts that are pending in
        order from highest to lowest priority.

- name: /config/alert/reporter/mail/to/{idx}/min-priority
  x-schema:
    minimum: 0
    maximum: 7
    example: 3
  description: |
    The minimum priority that is required for a new alert to generate
    an email.  When an email is generated, other lower priority alerts
    may also be included if they are unacknowledged and the reporting
    format allows it.

- name: /config/alert/reporter/web
  description: |
    The configuration for reporting alerts via web server.

- name: /config/alert/reporter/web/min-priority
  x-schema:
    minimum: 0
    maximum: 7
  description: |
    The minimum priority that is required for a new alert to generate
    a report to the web server.  When a report is generated, all other
    unacknowledged alerts are also reported, even if they have a
    priority lower than the value indicated by this resource.

- name: /config/alert/reporter/web/options
  x-schema:
    example: gzip,secure
  description: |
    The options to use when sending an alert report to the web server.

    This resource is available only if
    [/config/alert/reporter/web/service](path:/config/alert/reporter/web/service)
    is an empty string.

    Multiple options can be specified in the string by separating them
    with a comma.  Supported options are:

      * `deflate`: Use HTTP Content-Encoding `deflate` when
        transmitting the alert report.

      * `gzip`: Use HTTP Content-Encoding `gzip` when
        transmitting the alert report.

      * `secure`: Only send the alert report if the server's HTTP
        certificate can be verified by the meter.  This option is
        ignored if
        [/config/net/http/client/insecure](path:/config/net/http/client/insecure)
        is `true`.

- name: /config/alert/reporter/web/password
  x-path-methods: [put, post, delete]
  x-schema:
    example: secret!
  description: |
    The password to be provided to the web server for authentication
    purposes.

    This resource is write-only

- name: /config/alert/reporter/web/service
  x-schema:
    example: ""
  description: |
    The name of the alert service provider to use for reporting
    alerts.

    To set this to a non-empty value please use the [service
    activation command](op:/cmd:cmdActivate) since that ensures the
    service provider knows to expect alerts from this meter.  The body
    of the activation request should contain member `service` set to
    the string `alert` and `provider` set to name of the desired
    service provider.

- name: /config/alert/reporter/web/uri
  x-schema:
    example: https://alerts.com/report
  description: |
    The URI of the web server to use for reporting alerts.

    This resource is available only if
    [/config/alert/reporter/web/service](path:/config/alert/reporter/web/service)
    is an empty string.

- name: /config/alert/reporter/web/user
  x-schema:
    example: jsmith
  description: |
    The user name to provide to the web server for authentication
    purposes.  If this string is not empty, the user name and the
    password are both sent to the web server using HTTP Basic
    authorization.  For security reasons, this should only be used
    when connecting to the server via an encrypted connection (https).

    This resource is available only if
    [/config/alert/reporter/web/service](path:/config/alert/reporter/web/service)
    is an empty string.

- name: /config/alert/sys-prio
  x-path-var:
    name: idx
    in: path
    description: |
      The index of a system alert.
    required: true
    schema:
      type: integer
      minimum: 0
  x-path-method-delete:
    description: |
      Reset system alert priorities to 0.
  x-schema:
    example: [0,0,7,0,7,4,0,0,1,6,0,0,0,5,0,0,0,0,0,0]
  description: |
    The priority of each system-generated alert.
    [/sys/alert](path:/sys/alert) provides a description of these
    alerts.

- name: /config/alert/sys-prio/{idx}
  x-schema:
    minimum: 0
    maximum: 7
  description: |
    The priority of this system alert.

- name: /config/bacnet
  description: |
    The [BACnet](https://bacnet.org/) configuration.

- name: /config/bacnet/server
  description: |
    The [BACnet](https://bacnet.org/) server configuration.

- name: /config/bacnet/server/bip
  description: |
    The [BACnet](https://bacnet.org/) over
    [IPv4](https://en.wikipedia.org/wiki/Internet_Protocol_version_4)
    configuration.

- name: /config/bacnet/server/bip/port
  x-path-method-delete:
    description: |
      Reset to 47808 (BAC0 in hex).
  x-schema:
    minimum: 0
    maximum: 65535
    example: 47808
  description: |
    The IPv4 port number used by the server when `bip` is enabled in
    [/config/bacnet/server/enable](path:/config/bacnet/server/enable).
    The default value is 0xBAC0 (47808).

- name: /config/bacnet/server/enable
  x-path-var:
    name: idx
    in: path
    description: |
      The index of an enabled BACnet protocol.
    required: true
    schema:
      type: integer
      minimum: 0
      maximum: 0
  x-path-method-delete:
    description: |
      Disable the BACnet server.
  description: |
    The list of BACnet protocols that are enabled.  An empty list
    indicates that the BACnet server is disabled.  The meter is
    currently restricted to supporting a single protocol at a time, so
    this array may have at most one element.

- name: /config/bacnet/server/enable/{idx}
  x-path-method-delete:
    description: |
      Disable this protocol.
  x-schema:
    enum: [ethernet, bip, mstp]
  description: |
    The name of an enabled BACnet protocol.  Possible values are:

      * `ethernet`: BACnet over raw Ethernet.

      * `bip`: BACnet over the UDP/IP.

      * `mstp`: BACnet over MS/TP (RS-485).

- name: /config/bacnet/server/epoch-relative
  x-path-method-delete:
    description: |
      Reset to `true`.
  description: |
    If true, the BACnet server reports cumulative values relative to
    the [meter epoch](path:/config/db/epoch).  If false, raw absolute
    values are reported relative to when the meter was manufactured.

- name: /config/bacnet/server/id
  x-path-method-delete:
    description: |
      Reset to 1.
  x-schema:
    minimum: 0
    maximum: 4194303
  description: |
    The object id of the BACnet server.

- name: /config/bacnet/server/mstp
  x-schema:
    minimum: 0
    maximum: 127
    example: 1
  description: |
    The BACnet over MS/TP configuration.  This is used only if the
    `mstp` protocol is [enabled](path:/config/bacnet/server/enable).

- name: /config/bacnet/server/mstp/mac
  x-schema:
    minimum: 0
    maximum: 127
  description: |
    The MS/TP address of the meter's BACnet server.

- name: /config/bacnet/server/mstp/max-mac
  description: |
    The maximum address used by any device connected to the same MS/TP
    network as this meter.  A value of 127 is safe, but setting it to
    the lowest address in use significantly increases MS/TP
    performance.

- name: /config/bacnet/server/mstp/port
  x-schema:
    example: USB1:19200/8n1
  description: |
    The [serial-port](glossary:Serial-Ports) to use for the MS/TP
    protocol.

- name: /config/db
  description: |
    The database configuration.

- name: /config/db/epoch
  x-path-method-get:
    description: |
      Get the meter epoch.
    responses:
      "200":
        content:
          application/json:
            schema:
              example: {"result":"1194937200"}
  x-path-method-post:
    description: |
      Update the epoch with the value passed in the request body.

      This resource is **not** updated
      [transactionally](glossary:Non-Transactional-Updates).
  x-path-method-put:
    description: |
      Update the epoch with the value passed in the request body.

      This resource is **not** updated
      [transactionally](glossary:Non-Transactional-Updates).
  x-path-method-delete:
    description: |
      Reset the database epoch to the current time of the meter.

      This resource is **not** updated
      [transactionally](glossary:Non-Transactional-Updates).
  x-schema:
    example: "1675276020"
  description: |
    The time when the meter started recording data.  This is a decimal
    [Unix timestamp](glossary:Unix-Timestamp) string.

    The relevance of this resource is that other services in this API
    by default return accumulated register values relative to this
    time so that, at the time of the epoch, they all read 0.  Changing
    this value therefore changes the values reported by those
    services.  Similarly, user interfaces that use this API generally
    do not present data before the epoch, effectively providing a
    limit to the history visible to the user.

    Writing this resource does not change the data stored in the
    database.  In other words, the epoch generally can freely be moved
    forward or backward in time.  The only constraint is that the new
    epoch does have to be within the time range covered by the
    database.  If a future time is specified, it will automatically be
    capped to the time of the most recent row in the database.  If a
    time is specified that is older than the oldest row in the
    database, an error object is returned.  If this error occurs,
    check the device time ([/sys/time](path:/sys/time)) and database
    configuration ([/sys/db](path:/sys/db)) to confirm that they have
    the expected values.

- name: /config/display
  description: |
    The display (LCD) configuration of the meter.

- name: /config/display/backlight
  description: |
    The backlight configuration of the display.

- name: /config/display/backlight/brightness
  x-schema:
    minimum: 0
    maximum: 255
  description: |
    The brightness of the backlight.  Zero is darkest (backlight off),
    255 is the brightest.

- name: /config/display/backlight/duration
  x-schema:
    format: int32
    minimum: -1
    maximum: 2147483647
    example: 60
  description: |
    The number of seconds the backlight should remain on after the
    last activation of the display navigation buttons.  Zero means the
    backlight is always off.  The special value -1 indicates that the
    backlight remains on at all times.

- name: /config/display/contrast
  x-schema:
    minimum: 0
    maximum: 127
    example: 65
  description: |
    The LCD contrast Zero means no contrast (display is blank), 127
    means maximum contrast (display is all black).  A value of around
    65 usually provides a good contrast.

- name: /config/display/fontset
  x-path-method-delete:
    description: |
      Reset to `normal`.
  x-schema:
    enum: [small, normal, large]
    example: normal
  description: |
    The fontset to use for the display.  Possible values are:

      * `small`: Smaller than the `normal` fontset, this is a lower
        quality fontset that can fit more text on the display.

      * `normal`: This fontset provides a good tradeoff between font
        quality and the amount of text that can fit on the display.
        This should work well for languages with relatively simple
        characters, such as English or French.

      * `large`: This fontset should work well for languages with more
        complex characters such as Korean or Chinese.

    **Note** The value of this resource needs to be localized
    (translated) before presenting it to a user.

- name: /config/display/orientation
  x-schema:
    minimum: 0
    maximum: 359
    example: 90
  description: |
    The angle in degrees by which the orientation of the display
    should be rotated in the counterclockwise direction.  An angle of
    0 degree results in the display being aligned with the label on
    the meter.  The value of this resource is rounded to an integer
    multiple of 90 degrees.

- name: /config/display/screen
  x-schema:
    description: Screen configurations.
    example: {"use":"ic","gen":"ic","Grid":"ic","Solar":"ic","temp":"i",".default":""}
  description: |
    Screen configurations.  At this time, only the registers screen
    is configurable.

- name: /config/display/screen/registers
  x-schema:
    description: The register screen configuration.
  x-path-var:
    name: name
    in: path
    description: |
      The name of a register or the special keyword `.default`.
    required: true
    schema:
      type: string
      example: Solar
  x-path-method-delete:
    description: |
      Reset to empty (no registers displayed).
  description: |
    The configuration of the registers screen - a screen that cycles
    through a list of registers, displaying their values.

- name: /config/display/screen/registers/{name}
  x-path-method-delete:
    description: |
      Remove this register from the screen.
  x-schema:
    example: ic
  description: |
    Specifies how the named register is to be displayed.
    The following characters may appear in this string:

      * `i`: The instantaneous (rate of change) value of the register
        should be displayed.

      * `c`: The accumulated (cumulative) value of the register should
      be displayed.

    Note that an empty string imples that the register is not
    displayed at all

    For the special keyword `.default`, this establishes how registers
    should be displayed that are not mentioned otherwise.

- name: /config/language_code
  x-path-method-delete:
    description: |
      Reset to default language code `en`.
  x-schema:
    example: en_GB
  description: |
    The code of the preferred language for the meter.  When the meter
    needs to generate a message (e.g., as a result of an alert
    triggering), it will generate the message in the language selected
    by this code whenever possible.  The code should be in a format
    acceptable to the
    [`setlocale()`](https://linux.die.net/man/3/setlocale) function.
    Language codes currently supported include:

      * `de`: German.

      * `en`: US English (defaults to 12-hour clock and imperial units).

      * `en_GB`: British English (defaults to 24-hour clock and metric units).

      * `es`: Spanish.

      * `fr`: French.

      * `he`: Hebrew.

      * `it`: Italian.

      * `ko`: Korean.

      * `pl`: Polish.

      * `zh_Hans`: Simplified Chinese (Mandarin).

      * `zh_Hant`: Traditional Chinese (Cantonese).

    See [eGauge Internationalization
    Instructions](https://www.egauge.net/i18n/) for information on
    adding other languages or improving an existing translation.

    **Note** When accessing the meter from a web browser, the value of
    this resource has normally no effect as the user interface is
    presented in the language selected by the browser.

- name: /config/local
  x-path-method-delete:
    description: |
      Reset configuration to the default (all sensors off).
  description: |
    The configuration of directly attached sensors.

- name: /config/local/gain
  x-path-method-delete:
    description: |
      Reset gain to `normal`.
  x-schema:
    enum: [normal, high]
  description: |
    The amplifier gain to use for the local sensor inputs (`S1` and
    up).  All meters support the value `normal`.  Model EG4*xxx* meters
    also support the value `high`. This gain increases the input gain
    to approximately ten times of the normal gain.  That is, the
    sensors are approximately 10 times more sensitive than normal, at
    the expense of having a 10 times smaller range.

- name: /config/local/sensor
  x-path-var:
    name: name
    in: path
    description: |
      The name of a sensor (L1-L3, Ldc, or S1-S30).
    required: true
    schema:
      type: string
    example: S1
  x-path-method-delete:
    description: |
      Reset configuration to all sensors off.
  x-schema:
    example: {"L1":{"channel":{"bias":0.000000000,"mode":"normal","scale":-74.013999939},"error":0.000000000,"model":"1:1","phase":""},"S1":{"channel":{"bias":0.000000000,"mode":"normal","scale":-206.659896851},"error":0.000000000,"model":"ML-SCT-019-0100","phase":"2.96@1.5:2.59@3:2.34@6:2.06@15:1.82@50:1.89@100"},"S2":{"channel":{"bias":0.000000000,"mode":"normal","scale":-206.659896851},"error":0.000000000,"model":"ML-SCT-019-0100","phase":"2.96@1.5:2.59@3:2.34@6:2.06@15:1.82@50:1.89@100"}}
  description: |
    The sensor configurations.

- name: /config/local/sensor/{name}
  x-path-method-delete:
    description: |
      Reset configuration to off.
  description: |
    The sensor configuration.

- name: /config/local/sensor/{name}/channel
  x-path-method-delete:
    description: |
      Reset channel to default configuration.
  description: |
    The A/D converter channel configuration of the named sensor.

- name: /config/local/sensor/{name}/channel/bias
  x-schema:
    example: 0
  description: |
    The bias value (offset) to be added when converting an A/D
    converter sample to a physical quantity.

- name: /config/local/sensor/{name}/channel/mode
  x-path-method-delete:
    description: |
      Reset to `off`.
  x-schema:
    enum: [off, normal, integrate]
    example: normal
  description: |
    The channel's acquisition mode.  Possible values are:

      * `integrate`: The sample values are integrated over time.

      * `normal`: The sensor is operating in normal mode.

      * `off`: The sensor is not in use.

- name: /config/local/sensor/{name}/channel/scale
  x-schema:
    example: -206.66
  description: |
    The scale value by which an A/D converter sample is to be
    divided to convert a sample to a physical quantity (the bias
    value is added to the sample before the scale is applied).

- name: /config/local/sensor/{name}/error
  x-schema:
    example: 0.0
  description: |
    The attached sensor's relative output error (ratio error) in
    percent. For example, a value of 2.5 would indicate that the
    sensor is reading 2.5% higher than nominal. This value is ignored
    if member `model` is `CTid`.

- name: /config/local/sensor/{name}/model
  x-schema:
    example: ML-SCT-019-0100
  description: |
    The model name of the attached sensor. If this is `CTid`, a
    CTidÂ®-enabled sensor is attached and the [/ctid](path:/ctid)
    service should be used to obtain details about the attached
    sensor.

- name: /config/local/sensor/{name}/phase
  x-schema:
    example: 2.59@3:2.34@6:2.06@15:1.89@100
  description: |
    The phase (timing) adjustment required by the attached sensor.
    This value is ignored if member `model` is `CTid`.

    The format of this string is a colon-separated list of phase- and
    amplitude-level pairs of the form `p@l`, where `p` is the
    phase-adjustment in degrees at 60Hz, and `l` is a percentage of
    the sensor's full scale value.  For example, for a 100A current
    sensor, the phase string `1@1:0.75@50` would indicate that the
    phase needs to be adjusted by 1 degree at 1A and by 0.75 degrees
    at 50A.

- name: /config/local/update-interval
  x-path-method-delete:
    description: |
      Reset to 1000 milliseconds.
  x-schema:
    example: 500
  description: |
    The interval in milliseconds between measurement updates.  The
    default is 1000ms (one update per second) but some meters support
    smaller values.  The rate of change values are averaged over this
    period of time.

- name: /config/location
  description: |
    The geographic location of the meter.

- name: /config/location/latitude
  x-schema:
    example: 36.03500
  description: |
    The latitude of the meter's location in degrees.  Positive values
    are north of the equator, negative values south of it.

- name: /config/location/longitude
  x-schema:
    example: -115.46639
  description: |
    The longitude of the meter's location in degrees.  Positive values
    are east of the prime meridian, negative values are west of it.

- name: /config/log
  description: |
    The log configuration.

- name: /config/log/system
  description: |
    The system log configuration.

- name: /config/log/system/size
  x-schema:
    example: 131072
  description: |
    The size of the system log buffer in bytes.  When writing this
    value, it is rounded up to the nearest kilobyte boundary.  A size
    of 0 disables the system log.  Otherwise, the size is rounded up
    to a minimum of 4KiB.

- name: /config/lua
  description: |
    Lua scripting configuration.

- name: /config/lua/script
  description: |
    Lua scripts.

- name: /config/lua/script/alertd
  x-schema:
    example: print("this is the alert script");
  description: |
    The Lua script loaded by alert reporting daemon.  This script can
    be used to define helper functions that can then be called from
    the alert conditions.

    If loading this script takes longer than 15 seconds or evaluating
    any custom alert condition takes longer than 60 seconds, an alert
    is raised.

- name: /config/lua/script/tariff
  x-schema:
    example: print("this is the tariff script");
  description: |
    The Lua script used to calculate energy cost.  This script can be
    modified only if [server-storage](path:/store) variable
    `global/billing/tariff_uri` is empty or unset.

    If loading this script takes longer than 15 seconds or evaluating
    the register formulas takes longer than half the
    [update-interval](path:/config/local/update-interval), an alert is
    raised.

- name: /config/lua/script/teamd
  x-schema:
    example: print("this is the formulas script");
  description: |
    The Lua script loaded by the register calculator.  This script can
    be used to define helper functions that can then be called from
    register formulas.

    If loading this script takes longer than 15 seconds or evaluating
    the register formulas takes longer than half the
    [update-interval](path:/config/local/update-interval), an alert is
    raised.

- name: /config/lua/ctrld
  x-path-var:
    name: script
    in: path
    description: |
      The name of a Lua script.
    required: true
    schema:
      type: string
  x-path-method-delete:
    description: |
      Delete all control scripts.
  x-schema:
    example: {"test":"print(\"this is control script test\");"}
  description: |
    The control scripts.  Control scripts generally run indefinitely.
    The more control scripts exist, the slower they will execute.  If
    a control script voluntarily terminates execution, it is restarted
    automatically after five seconds.  If a control script is updated,
    its execution is automatically restarted.

- name: /config/lua/ctrld/{script}
  x-path-method-delete:
    description: |
      Delete the script.
  x-schema:
    example: print("this is control script test");
  description: |
    The control script.

- name: /config/modbus
  description: |
    [Modbus](https://www.modbus.org/)-related configurations.

- name: /config/modbus/client
  description: |
    Modbus client configuration.  This is used by the meter to
    communicate with other Modbus devices.

- name: /config/modbus/client/map
  x-path-var:
    name: name
    in: path
    description: |
      The name of a user Modbus map (editable).
    required: true
    schema:
      type: string
      example: my_modbus_map
  x-path-method-delete:
    description: |
      Delete all user maps.
  x-schema:
    example: {"user_dev":{"option":{"default-modbus-addr": "2", "default-serial-params":"9600/8n1"},"reg":[{"name":"irradiance","addr":0,"type":"u32","kind":"analog","unit":"W","offset":0,"scale":0.1,"access":"ro"},{"name":"temp","addr":1,"type":"s32","kind":"analog","unit":"degC","offset":0,"scale":0.01,"access":"ro"}]}}
  description: |
    User-defined Modbus address maps.  The builtin, read-only system
    maps are available at
    [/sys/modbus/client/map](path:/sys/modbus/client/map).  If a
    user-defined map with the same name as a system map exists, it
    will shadow (mask) the system map with them same name.

- name: /config/modbus/client/map/{name}
  x-path-method-delete:
    description: |
      Delete this map.
  x-schema-ref: "./schemas.yaml#/ModbusClientMapObject"

- name: /config/modbus/client/map/{name}/option
  x-path-var:
    name: opt
    in: path
    description: |
      The name of a Modbus map option.
    required: true
    schema:
      type: string
      enum: [default-modbus-addr, default-serial-params, default-tcp-port]
  x-path-method-delete:
    description: |
      Delete all options.
  x-schema-ref: "./schemas.yaml#/ModbusClientMapObjectOption"

- name: /config/modbus/client/map/{name}/option/{opt}
  x-path-method-delete:
    description: |
      Delete this option.
  x-schema-ref: "./schemas.yaml#/ModbusClientMapObjectOptionObject"

- name: /config/modbus/client/map/{name}/reg
  x-path-var:
    name: idx
    in: path
    description: |
      The index of a Modbus map register.
    required: true
    schema:
      type: string
  x-schema-ref: "./schemas.yaml#/ModbusClientMapObjectReg"

- name: /config/modbus/client/map/{name}/reg/{idx}
  x-path-method-delete:
    description: |
      Delete this register definition.
  x-schema-ref: "./schemas.yaml#/ModbusClientMapObjectRegObject"

- name: /config/modbus/client/map/{name}/reg/{idx}/name
  x-schema-ref: "./schemas.yaml#/ModbusClientMapObjectRegObjectName"

- name: /config/modbus/client/map/{name}/reg/{idx}/addr
  x-schema:
    minimum: 0
    maximum: 65535
  x-schema-ref: "./schemas.yaml#/ModbusClientMapObjectRegObjectAddr"

- name: /config/modbus/client/map/{name}/reg/{idx}/type
  x-path-method-delete:
    description: |
      Reset to `u16`.
  x-schema-ref: "./schemas.yaml#/ModbusClientMapObjectRegObjectType"

- name: /config/modbus/client/map/{name}/reg/{idx}/kind
  x-path-method-delete:
    description: |
      Reset to `analog`.
  x-schema-ref: "./schemas.yaml#/ModbusClientMapObjectRegObjectKind"

- name: /config/modbus/client/map/{name}/reg/{idx}/unit
  x-schema-ref: "./schemas.yaml#/ModbusClientMapObjectRegObjectUnit"

- name: /config/modbus/client/map/{name}/reg/{idx}/offset
  x-schema-ref: "./schemas.yaml#/ModbusClientMapObjectRegObjectOffset"

- name: /config/modbus/client/map/{name}/reg/{idx}/scale
  x-path-method-delete:
    description: |
      Reset to 1.
  x-schema-ref: "./schemas.yaml#/ModbusClientMapObjectRegObjectScale"

- name: /config/modbus/client/map/{name}/reg/{idx}/access
  x-path-method-delete:
    description: |
      Reset to `rw`.
  x-schema-ref: "./schemas.yaml#/ModbusClientMapObjectRegObjectAccess"

- name: /config/modbus/server
  description: |
    Modbus server configuration.  This configures the server-side of
    the meter.  That is, it defines how the meter provides its own
    data to other Modbus devices.

- name: /config/modbus/server/enable
  x-path-var:
    name: idx
    in: path
    description: |
      The index of an enabled Modbus protocol.
    required: true
    schema:
      type: integer
      minimum: 0
  description: |
    The list of protocols (if any) that are enabled in the Modbus
    server. An empty list indicates that the Modbus server is
    disabled.

    Valid protocol names are:

      * `rtu`: The
        [Modbus/RTU](https://modbus.org/docs/Modbus_over_serial_line_V1_02.pdf)
        protocol.

      * `tcp`: The
        [Modbus/TCP](https://modbus.org/docs/Modbus_Messaging_Implementation_Guide_V1_0b.pdf)
        protocol.

- name: /config/modbus/server/enable/{idx}
  x-path-method-delete:
    description: |
      Disable this protocol.
  x-schema:
    enum: [rtu, tcp]
  description: |
    The name of a protocol that is enabled.

- name: /config/modbus/server/id
  x-path-method-delete:
    description: |
      Reset to 1.
  x-schema:
    minimum: 1
    maximum: 247
  description: |
    The address of the meter on the Modbus/RTU network. Every Modbus
    device must have a unique address. The default unit id is 1.

    **Note** Address 0 is the broadcast address and addresses 248..255
    are reserved for future use.

- name: /config/modbus/server/rtu
  description: |
    The RTU protocol configuration.

- name: /config/modbus/server/rtu/port
  x-schema:
    example: USB2:9600/8o2
  description: |
    The [serial-port](glossary:Serial-Ports) to use for the RTU
    protocol.

- name: /config/modbus/server/tcp
  description: |
    The TCP protocol configuration.

- name: /config/modbus/server/tcp/port
  x-path-method-delete:
    description: |
      Reset to 502.
  x-schema:
    minimum: 0
    maximum: 65535
    example: 502
  description: |
    The IP port of the Modbus server.  The default value is 502.

- name: /config/net
  description: |
    The network configuration.

    The current state of the network is available at
    [/sys/net](path:/sys/net).

- name: /config/net/ethernet
  description: |
    The Ethernet configuration of the meter.

- name: /config/net/ethernet/watchdog
  x-path-method-delete:
    description: |
      Reset to `true`.
  x-schema:
    example: true
  description: |
    Whether or not the Ethernet watchdog is enabled.  If enabled, the
    watchdog will reset the Ethernet's PHY chip and/or reload the
    Ethernet driver if it appears that the Ethernet link was lost.

    This should normally be set to `true`.

- name: /config/net/goproxy
  description: |
    The Go proxy configuration of the meter.

- name: /config/net/goproxy/enable
  description: |
    If `true`, the meter will connect to the Go proxy server.

- name: /config/net/goproxy/server
  x-schema:
    example: proxy.egauge.io
  description: |
    The hostname of the Go proxy server.

- name: /config/net/homeplug
  description: |
    HomePlug configuration.  This is used only by devices with
    built-in HomePlug power-line communication (egauge2, EG3*x*10 and
    EG41*xx*).

- name: /config/net/homeplug/region
  x-path-method-delete:
    description: |
      Reset to `NA`.
  x-schema:
    enum: [CE, NA]
  description: |
    The jurisdiction the meter is operating under.  The possible values are:

      * `CE`: European Union region.
      * `NA`: North American region.

    This resource controls the frequency bands used by the HomePlug
    communications interface that is built into some meters.  For
    those meters, this resource must be set to the correct geographic
    region to ensure compliance with local laws.

- name: /config/net/hostname
  x-schema:
    example: eGauge42
  description: |
    The hostname of the meter.  Must consist of ASCII letters, digits,
    and dashes only.

- name: /config/net/http
  x-schema:
    example: {"cgi-bin":"user-required","client":{"insecure":"false"}}
  description: |
    Web (HTTP) related configurations.

    Modification requests (`PUT`, `POST`, and `DELETE`) to this
    resource are not executed
    [transactionally](glossary:Non-Transactional-Updates).

- name: /config/net/http/certificate
  x-path-methods: [put, post, delete]
  x-path-method-post:
    description: |
      Set the HTTP certificate to the one passed in the request body.

      This resource is **not** updated
      [transactionally](glossary:Non-Transactional-Updates).
  x-path-method-put:
    description: |
      Set the HTTP certificate to the one passed in the request body.

      This resource is **not** updated
      [transactionally](glossary:Non-Transactional-Updates).
  x-path-method-delete:
    description: |
      Reset to a factory-installed self-signed certificate.

      This resource is **not** updated
      [transactionally](glossary:Non-Transactional-Updates).
  description: |
    The certificate used by the web server to identify itself over
    HTTPS connections.

    This resource is write-only.

    The string is in [PEM
    format](https://en.wikipedia.org/wiki/X.509#Certificate_filename_extensions)
    and must contain both a private key as well as the matching
    certificate chain.

- name: /config/net/http/client
  description: |
    Configuration for meter-initiated HTTP connections.

- name: /config/net/http/client/insecure
  x-schema:
    example: false
  description: |
    If `true`, meter-initiated secure HTTPS connections will accept
    servers whose certificate cannot be validated by the meter.  This
    should normally be set to `false`.

- name: /config/net/http/cgi-bin
  x-schema:
    enum: [disable, user-optional, user-required]
  x-path-method-post:
    description: |
      Set CGI-BIN support according to the value passed in the request body.

      This resource is **not** updated
      [transactionally](glossary:Non-Transactional-Updates).
  x-path-method-put:
    description: |
      Set CGI-BIN support according to the value passed in the request body.

      This resource is **not** updated
      [transactionally](glossary:Non-Transactional-Updates).
  x-path-method-delete:
    description: |
      Reset to `disable`.

      This resource is **not** updated
      [transactionally](glossary:Non-Transactional-Updates).
  description: |
    Controls access to CGI-BIN programs.  The following values are supported:

      * `disable`: Completely disable access to CGI-BIN programs.
      **Warning** This will render the classic user-interface of the
      meter inoperable.

      * `user-required`: Allow authenticated users to access CGI-BIN programs.

      * `user-optional`: Allow even unauthenticated users to access
        CGI-BIN programs that are not considered security critical.

- name: /config/net/ipv4
  x-schema-ref: "./schemas.yaml#/IPv4Object"

- name: /config/net/ipv4/dhcp
  x-path-method-delete:
    description: |
      Reset to `true`.
  x-schema-ref: "./schemas.yaml#/IPv4ObjectDHCP"

- name: /config/net/ipv4/address
  x-path-method-delete:
    description: |
      Reset to 0.0.0.0.
  x-schema-ref: "./schemas.yaml#/IPv4ObjectAddress"

- name: /config/net/ipv4/broadcast
  x-path-method-delete:
    description: |
      Reset to 0.0.0.0.
  x-schema-ref: "./schemas.yaml#/IPv4ObjectBroadcast"

- name: /config/net/ipv4/netmask
  x-path-method-delete:
    description: |
      Reset to 0.0.0.0.
  x-schema-ref: "./schemas.yaml#/IPv4ObjectNetmask"

- name: /config/net/ipv4/network
  x-path-method-delete:
    description: |
      Reset to 0.0.0.0.
  x-schema-ref: "./schemas.yaml#/IPv4ObjectNetwork"

- name: /config/net/ipv4/gateway
  x-path-method-delete:
    description: |
      Reset to 0.0.0.0.
  x-schema-ref: "./schemas.yaml#/IPv4ObjectGateway"

- name: /config/net/nameserver
  description: |
    The name server ([DNS](https://www.ietf.org/rfc/rfc1035.txt))
    configuration.

- name: /config/net/nameserver/server
  x-schema:
    example: [1.1.1.1,8.8.8.8,2606:4700:4700::1111]
  x-path-var:
    name: idx
    in: path
    description: |
      The index of a DNS server.
    required: true
    schema:
      type: integer
      minimum: 0
  description: |
    The IP addresses to use as name servers. If multiple name servers
    are specified, they are queried in the order in which they appear
    here.

- name: /config/net/nameserver/server/{idx}
  x-path-method-delete:
    description: |
      Remove this name server.
  x-schema:
    example: 1.1.1.1
  description: |
    The IPv4 or IPv6 address a DNS server.

- name: /config/net/ntp
  description: |
    The Network Time Protocol
    ([NTP](https://www.rfc-editor.org/rfc/rfc5905)) configuration.

- name: /config/net/ntp/server
  x-path-var:
    name: idx
    in: path
    description: |
      The index of an NTP server.
    required: true
    schema:
      type: integer
      minimum: 0
  x-schema:
    example: [192.168.1.1,north-america.pool.ntp.org,2610:20:6f15:15::27]
  description: |
    The NTP servers to use.

- name: /config/net/ntp/server/{idx}
  x-path-method-delete:
    description: |
      Remove this NTP server.
  x-schema:
    example: north-america.pool.ntp.org
  description: |
    The hostname or an IPv4 or IPv6 address of an NTP server.

- name: /config/net/proxy
  description: |
    The proxy configuration of the meter.

- name: /config/net/proxy/enable
  description: |
    If `true`, the meter will connect to the proxy server.

- name: /config/net/proxy/server
  x-schema:
    example: d.egauge.net
  description: |
    The hostname of the proxy server.

- name: /config/net/ptp
  x-schema:
    description: |
      The Precision Time Protocol
      ([PTP](https://www.rfc-editor.org/rfc/rfc8173.html))
      configuration.
  description: |
    The Precision Time Protocol
    ([PTP](https://www.rfc-editor.org/rfc/rfc8173.html))
    configuration.  NTP should normally be disabled when using this
    protocol. This can be achieved by deleting resource
    [/config/net/ntp/server](path:/config/net/ntp/server).

    Only model EG4*xxx* or newer meters support this resource.

    The following properties of the PTP service are currently fixed:

      * **Update method**: Two Step
      * **Delay Mechanism**: End to End
      * **Domain Number**: 0
      * **Priority 1**: 128
      * **Priority 2**: 128
      * **Transmission Method**: Multicast
      * **Log Announce Interval**: 1 (2 seconds)
      * **Log Sync Interval**: 0 (1 second)
      * **Log Min Delay Request Interval**: 0 (1 second)
      * **Log Min PDelay Request Interval**: 0 (1 second)
      * **PTP Destination MAC**: 01:1B:19:00:00:00
      * **PTP Destination MAC**: 01:80:C2:00:00:0E
      * **Transport Specific Field**: 0

- name: /config/net/ptp/client_only
  description: |
    If `true`, the meter will only act as a client.  Otherwise, the
    meter will also act as a server if the PTP algorithm selects it as
    the best clock.

- name: /config/net/ptp/interface
  x-path-var:
    name: if
    in: path
    description: |
      The name of a network interface to use for PTP.
    required: true
    schema:
      type: string
      example: eth0
  x-path-method-delete:
    description: |
      Reset to empty (PTP disabled).
  x-schema:
    example: {"eth0":{"transport":"UDPv4","udp_ttl":1}}
  description: |
    The network interface configurations for PTP. If empty, PTP is disabled.

- name: /config/net/ptp/interface/{if}
  x-path-method-delete:
    description: |
      Remove this interface.
  description: |
    The configuration to use for the named interface.

- name: /config/net/ptp/interface/{if}/transport
  x-path-method-delete:
    description: |
      Reset to `UDPv4`.
  x-schema:
    enum: [L2, UDPv4, UDPv6]
  description: |
    The network transport to use for the interface. Possible values are:

      * `UDPv4`: UDP over IPv4.
      * `UDPv6`: UDP over IPv6.
      * `L2`: Layer-2 transport (e.g., Ethernet).

- name: /config/net/ptp/interface/{if}/udp_ttl
  x-path-method-delete:
    description: |
      Reset to 1.
  x-schema:
    type: integer
    minimum: 1
    maximum: 255
  description: |
    The Time-to-live (TTL) value for IPv4 multicast messages and the
    hop limit for IPv6 multicast messages.  This value is ignored
    unless `transport` is either `UDPv4` or `UDPv6`.  The default
    is 1, which restricts the messages to the same subnet.

- name: /config/push
  x-schema:
    example: {"interval":60,"options":"json,gzip,epoch,sec,skip=59","service":"","uri":"https://push-service.com/data","user":"jsmith"}
  description: |
    The push service configuration.  This service is used to share the
    meter data with a remote web server.  The data is sent via an HTTP
    `POST` request.

- name: /config/push/interval
  x-path-method-delete:
    description: |
      Reset to 60.
  x-schema:
    example: 60
    minimum: 1
  description: |
    The interval in seconds between push updates.  A value of 60, for
    example, would cause the push service to attempt to send data to
    the remote web server once a minute.

- name: /config/push/options
  x-schema:
    example: json,gzip,epoch,sec,skip=59
  description: |
    The options controlling how data is pushed to the remote web
    server.  Multiple options must be separated by commas (`,`).

    This resource is available only if
    [/config/push/service](path:/config/push/service) is an empty string.

    Available options are:

      * `day`: Data will be pushed with day granularity (at most one
        row of data per day).

      * `deflate`: Use the deflate algorithm to compress the push
        data.  This adds HTTP header `Content-Encoding: deflate` to
        the `POST` request.

      * `epoch`: Report the register values relative to the
        [epoch](path:/config/db/epoch).  Without this option, absolute
        values are sent which start at zero at the time the meter
        database was created.

      * `gzip`: Use the gzip algorithm to compress the push data.
        This adds HTTP header `Content-Encoding: gzip` to the `POST`
        request.

      * `json`: Push data in JSON format instead of XML.  The JSON
        format is the same as the one returned by the
        [/register](path:/register) service, except that the top-level
        `ts` section and the `idx` members in the `registers` section
        are omitted since they are not meaningful for push data.

      * `hour`: Data will be pushed with hour granularity (at most one
        row of data per hour).

      * `max=n`: Pushed at most `n` rows in a single `POST` request.
        This limit must be in the range from 1 to 900.

      * `msec`: Data will be pushed with millisecond granularity (at
        most one row of data per millisecond).

      * `old_first`: Push the oldest data row first.  By default, the
        youngest data row is pushed first.

      * `sec`: Data will be pushed with second granularity (at most
        one row of data per second).

      * `secure`: If this option is present, secure connections to the
        remote web server are allowed only if the server possesses a
        certificate that the meter can verify as authentic.  Without
        this option, the server's certificate is not verified.  This
        option is ignored if
        [/config/net/http/client/insecure](path:/config/net/http/client/insecure)
        is `true`.

      * `skip=n`: Push only every `(n+1)`-th data row.  For example,
        with hour granularity and skip=2, data rows would be spaced
        apart by (at least) 3 hours.  They may be spaced apart more
        depending on the rows that are available in the database.

      * `totals`: Push not just the physical registers but also the
        virtual registers.

    By default, data is pushed with minute granularity (at most one
    row of data per minute).

- name: /config/push/password
  x-path-methods: [put, post, delete]
  x-schema:
    example: secret!
  description: |
    The password to be provided to the remote web server for
    authentication purposes.  The password is submitted to the remote
    web server as part of a
    [Basic](https://www.rfc-editor.org/rfc/rfc7617) HTTP
    `Authorization` header.  For this reason, a password should only
    be specified when using a secure connection (`https` scheme).

    This resource is available only if
    [/config/push/web/service](path:/config/push/service) is an empty
    string.

    This resource is write-only.

- name: /config/push/service
  description: |
    The name of a push service provider to shared data with.

    To set this to a non-empty value please use the [service
    activation command](op:/cmd:cmdActivate) since that ensures the
    push provider knows to expect data from this meter.  The body of
    the activation request should contain member `service` set to the
    string `push` and `provider` set to name of the desired push
    service provider.

- name: /config/push/uri
  x-schema:
    example: https://push-service.com/data
  description: |
    The URI of the web server to share data with.  This resource is
    available only if [/config/push/service](path:/config/push/service)
    is an empty string.

- name: /config/push/user
  x-schema:
    example: jsmith
  description: |
    The user name to provide to the web server for authentication
    purposes.  If this string is not empty, the user name and the
    password are both sent to the web server as part of a
    [Basic](https://www.rfc-editor.org/rfc/rfc7617) HTTP
    `Authorization` header.

    This resource is available only if
    [/config/push/web/service](path:/config/push/service) is an empty
    string.

- name: /config/register
  description: |
    The register configuration of the meter.

- name: /config/register/physical
  x-path-var:
    name: reg
    in: path
    description: |
      The [name of a register](glossary:Physical-Register-Names).
    required: true
    schema:
      type: string
  x-schema:
    description: |
      The physical register configuration of the meter.
    example: {"grid":{"dev":"local","did":0,"type":"P","value":"S16*L1+S17*L2"},"grid*":{"dev":"local","did":8,"type":"S","value":"grid"},"solar":{"dev":"local","did":1,"type":"P","value":"S3*L1+-S3*L2"},"temp":{"dev":"SMANet","did":12,"type":"T","value":"13590.TmpAmb_C"}}
  description: |
    The physical register configuration of the meter.

    A register is a named measurement whose values are recorded in a
    database at discrete points in time (the database rows).  There is
    an upper limit on the number of physical registers that can be
    supported by the meter.  Depending on meter model and database
    configuration, typically, 16 to 64 phycial registers are
    available. The actual limit is available at
    [/sys/db/max-registers](path:/sys/db/max-registers).

- name: /config/register/physical/{reg}
  description: |
    The configuration of the named physical register.

- name: /config/register/physical/{reg}/dev
  x-path-method-delete:
    description: |
      Reset to `local`.
  x-schema:
    example: local
  description: |
    The name of the device that is the source of the register values.
    The name `local` indicates that the meter itself measures or
    calculates the value.  Any other value is a reference to the
    remote device of the same name defined at
    [/config/remote](path:/config/remote).

- name: /config/register/physical/{reg}/did
  x-schema:
    minimum: 0
  description: |
    The column number in which the database stores the register value.
    Each physical register has a unique column number.  If a register
    is renamed, this number remains the same.  On the other hand, if a
    register is deleted and then another one is added back, the new
    one may get assigned the column number of the old, deleted
    register.

    Each physical register must have a unique value.  Invalid values
    automatically get remapped to an unused index.

- name: /config/register/physical/{reg}/type
  x-schema:
    example: P
  description: |
    The [type code](glossary:Type-Codes) of the register.

- name: /config/register/physical/{reg}/value
  x-schema:
    example: S16*L1+S17*L2
  description: |
    Defines the how the register value is obtained or calculated.  For
    register where `dev` is `local`, this is one of:

      * A [local](path:/local) sensor name: `L1`-`L3`, `Ldc`, or
        `S1`-`S30`.

      * A power formula written as a sum of products of sensors.  For
        example, `S1*L1+S2*L2` would indicate that the register value
        is calculated as the real power measured by current sensor
        `S1` and line-voltage `L1` plus the real power measured by
        current sensor `S2` and line-voltage `L2`.  Note that even
        though the real power calculation is indicated by an asterisk,
        it is actually calculated by averaging the product of the
        instantaneous current and voltage samples, not by multiplying
        the RMS voltages of `S1` and `L1`.  The first factor of each
        real power calculation may also be negated.  For example,
        `-S1*L2` would yield the negative of the real power calculated
        by `S1*L2`.

      * An equal sign (`=`) followed by an
        [eScript](glossary:eScript) expression.  The register
        value is obtained by evaluating the eScript expression once
        per [update interval](path:/config/local/update-interval).
        Non-finite numbers (e.g., not-a-number, or infinities) are
        silently converted to 0 before recording the register value.

    For registers where `dev` is not `local`, so-called _remote_
    registers, the value is interpreted in a way that is specific to
    the particular remote device in use.  Commonly, the value is some
    sort of register name or identifier.  For example, for Modbus
    remote devices, the value is a register name defined by the
    [Modbus map](path:/sys/modbus/client/map) of the remote device.

- name: /config/register/virtual
  x-path-var:
    name: reg
    in: path
    description: |
      The name of a virtual register.  May not be empty, contain
      commas (`,`), and may not consist entirely of digits. Virtual
      register names may contain a single dot (`.`) between a prefix
      and a suffix.  The prefix is called the [view
      name](glossary:View-Names).
    required: true
    schema:
      type: string
  x-schema:
    example: {"use":{"value":[{"op":"+","register":"grid"},{"op":"+","register":"solar"}]},"gen":{"value":[{"op":"+","register":"solar"}]}}
  description: |
    The virtual register configuration of the meter.

    Virtual registers are calculated from physical register values and
    do not take up space in the database.  As such there is no a
    priori limit on the number of virtual registers that can be
    configured on a meter.

- name: /config/register/virtual/{reg}
  x-path-method-delete:
    description: |
      Remove this virtual register.
  description: |
    The virtual register configuration.

    Several virtual register names are well-known and provide special
    semantics:

      * `use`: Intended to represent total power consumption at a
        site.  It is generally presented with the name `Usage` in
        English and the equivalent translation in other languages
        (subject to availablility).

      * `gen`: Intended to represent total power generation at a site,
        e.g., from local solar or wind power generation facilities.
        It is generally presented with the name `Generation` in
        English and the equivalent translation in other languages
        (subject to availability).

      * `bat`: Intended to represent total power coming from on-site
        batteries (if positive) or power going to on-site batteries
        for charging (if negative).  It is generally presented with
        the name `Battery` in English and the equivalent translation
        in other languages (subject to availability).

      * `bat_el`: Intended to represent the amount of _energy left_ in
        on-site batteries.  The value of this register should be equal
        to the sum of each battery's state of charge times the
        battery's capacity (in joules).  It is generally presented
        with the name `Battery left` in English and the equivalent
        translation in other languages (subject to availability).

- name: /config/register/virtual/{reg}/value
  x-path-var:
    name: idx
    in: path
    description: |
      The index of a virtual register addend.
    required: true
    schema:
      type: integer
      minimum: 0
  x-schema:
    example: [{"op":"+","register":"grid"},{"op":"+","register":"solar"}]
  description: |
    The formula to calculate the value of this virtual register.  It
    consists of a list of physical register names whose values are to
    be added or subtracted.

- name: /config/register/virtual/{reg}/value/{idx}
  description: |
    An additive term of the virtual register formula.

- name: /config/register/virtual/{reg}/value/{idx}/op
  x-path-method-delete:
    description: |
      Reset to `+`.
  x-schema:
    enum: ["+", "-", "+max0", "-max0", "+min0", "-min0"]
    example: +
  description: |
    The operation that calculates the value of this addend.

    Possible values are:

      * `+`: The physical register value is to be added.

      * `-`: The physical register value is to be subtracted.

      * `+max0`, `-max0`, `+min0`, `-min0`:
      **[Deprecated](glossary:Deprecated)**. These operators do
      not work correctly and remain only to preserve compatibility
      with existing, old, device configurations.  Attempting to write
      these operators with a `PUT` or `POST` request will result in an
      error.  They can only be returned as a result of a `GET` request.
      The intent of these operators was to add (`+max0`, `+min0`) or
      subtract (`-max0`, `-min0`) the maximum of the physical register
      value and 0 (`+max0`, `-max0`) or the minimum of the register value
      and 0 (`+min0`, `-min0`).

- name: /config/register/virtual/{reg}/value/{idx}/register
  x-schema:
    example: grid
  description: |
    The name of the physical register to use in calculating the value
    of this addend.

- name: /config/remote
  x-path-var:
    name: name
    in: path
    description: |
      The name of a remote device.  It must consist of printable
      characters only.  The name `local` is reserved for internal use
      and may not appear here.
    required: true
    schema:
      type: string
      example: PRM3
  x-schema:
    example: {"PRM3":{"address":"modbus://sunspec.1@USB2","link_type":"slowd"},"panel2":{"address":"panel2.local","link_type":"udp"}}
  x-path-method-delete:
    description: |
      Deletes all remote device configurations and the physical registers
      using them.
  description: |
    The remote device configurations.

- name: /config/remote/{name}
  x-path-method-delete:
    description: |
      Delete the remote device configuration and the physical registers
      associated with it.
  description: |
    The configuration of a remote device.

- name: /config/remote/{name}/address
  x-schema:
    example: "modbus://sunspec.1@USB2"
  description: |
    The address of the remote device.  The meaning of this value
    depends on the [link-type](glossary:Link-Types).

- name: /config/remote/{name}/link_type
  x-schema:
    example: "slowd"
  x-path-method-delete:
    description: |
      Clears this value to `tcp`.
  description: |
    The [link-type](glossary:Link-Types) of the remote device.

- name: /config/time
  description: |
    Time related configurations.

- name: /config/time/zone
  x-path-method-delete:
    description: |
      Reset to [`UTC`](https://en.wikipedia.org/wiki/Coordinated_Universal_Time)  x-schema:
  x-schema:
    example: "LST7LDT6,M3.2.0/02:00,M11.1.0/02:00"
  description: |
    The timezone the meter is located in.  The string is interpreted
    as a [Unix
    TZ](https://www.gnu.org/software/libc/manual/html_node/TZ-Variable.html)
    string.

- name: /config/user
  x-path-var:
    name: name
    in: path
    description: |
      The name of a user.  Must consist of alpha-numeric characters or
      underscores (`_`).
    required: true
    schema:
      type: string
  x-path-method-delete:
    description: |
      Delete all user accounts.
  x-schema:
    example: {"jsmith":{"priv":["unlimited_save","view_settings"]},"guest":{"priv":["view_settings"]}}
    description: |
      The user accounts.
  description: |
    The user accounts.

    Each user account has a name, a set of
    [privileges](glossary:User-Privileges), and the credentials
    (password) required to log into the account.

- name: /config/user/{name}
  x-path-method-delete:
    description: |
      Delete this user account.
  x-schema:
    example: jsmith
  description: |
    A user configuration (account).

- name: /config/user/{name}/priv
  x-path-var:
    name: idx
    in: path
    description: |
      The index of a privilege.
    required: true
    schema:
      type: integer
      minimum: 0
  x-schema:
    example: ["unlimited_save", "view_settings"]
  description: |
    The list of [privileges](glossary:User-Privileges) the user possesses.

- name: /config/user/{name}/priv/{idx}
  x-path-method-delete:
    description: |
      Remove this privilege.
  description: |
    A [privilege](glossary:User-Privileges) the user possesses.

- name: /config/user/{name}/hash
  x-path-methods: [put, post, delete]
  x-path-method-delete:
    description: |
      Delete this user account.
  x-schema:
    example: 251910de04f5eab86859939167d4fded
  description: |
    The [hash](glossary:Password-Hashes) of the user's password.
    Writing an empty hash string disables the account.

    This resource is write-only.

- name: /config/var
  description: |
    Meter variables provide a means to store arbitrary name/value
    pairs on the meter itself.  These variables can be employed by a
    WebAPI user to customize behavior.  For example, the preferred
    currency symbol is stored in a meter variable so that all WebAPI
    users can consistenty display monetary values.

    Any authenticated user can read meter variables but only users who
    have the [privilege to save settings](glossary:User-Privileges)
    can create or update them.

    Variable names must be at least one character long and may consist
    of lower- and upper-case ASCII letters, digits, dashes (`-`),
    underscores (`_`), and percent signs (`%`).  Note that when using
    a variable name as part of a URL path, any percent sign must be
    encoded as %25 (25 is the hexadecimal value of the ASCII code of
    `%`).

    For backwards-compatibility, a variable name may also contain a
    single dot (`.`) if it does not appear as the first or last
    character in the name.  When a dot is present, the string before
    the dot is called the _paragraph name_.

    Variable values may contain any UTF-8 points except ASCII control
    characters.

    ## Sections

    Meter variables are organized into _sections_.  Each section has a
    name and contains zero or more variables.  Typically, groups of
    related meter variables are stored together in a single section.
    Variables can be accessed individually or by section.

    For example, the `global` section contains variables that apply to
    the meter in general, such as billing information or the currency
    symbol to use for monetary values.  Other sections are specific to
    particular applications (in the widest sense of the word).  For
    example, the `health` section contains variables that define the
    behavior of the meter's health checker service.

    Section names must be at at least 1 and at most 63 bytes long and
    may consist of lower- and upper-case ASCII letters, digits, dashes
    (`-`), underscores (`_`), and percent signs (`%`).

    ## Well-known Variables

    What distinguishes meter variables from normal configuration
    settings is that the former are generally not used by the meter
    firmware. In other words, meter variables are used primarily by
    users of WebAPI.  There are a few exceptions, however, for the
    `global` section:

      * `billing.interval`: The meter firmware interprets this as the
        length of the demand interval in minutes (see description of
        [/register](op:/register:registerGet) query parameter
        `demand`).

      * `billing.start_day`: The meter firmware interprets this as the
        day of the month on which the utility company reads the
        utility meter.  The assumption is that the meter is read at
        noon on that day.  The value must be a decimal integer string
        in the range from 1-31.  If the billing day number is greater
        than the number of days in a particular month, it is assumed
        that utility meter is read on the last day of that month.

        The meter-firmware uses this, for example, to implement the
        `sob` [time point](glossary:Time-Point-Names).

      * `billing.tariff_uri`: If not an empty string, this is
        interpreted as the URL from which to fetch a [Lua
        script](glossary:Lua-Scripts) that calculates energy cost.
        The meter will periodically poll this URL and download any
        available updates to the script.

      * `default.currency_symbol`: This is interpreted as the symbol
        to use for currency values.  This may be a single Unicode
        symbol such as `$` (Dollar) or `â¬` (Euro), or it may be a
        multi character string, such as `CHF` for Swiss Franc.  The
        meter firmware uses the value of this variable when outputting
        the unit of monetary values.
  x-schema:
    description: |
      The set of meter variable sections.
    example: {"global":{"billing.start_day":"6","billing.interval":"15"},"health":{"last_check":"1682200804"}}
  x-path-method-delete:
    description: |
      Delete all meter variables.
  x-path-var:
    name: section
    in: path
    description: |
      The name of the section to access.
    required: true
    schema:
      type: string
      pattern: "^[a-zA-Z0-9_%-]+$"
    example: global

- name: /config/var/{section}
  x-schema:
    example: {"billing.start_day":"6","billing.interval":"15"}
  x-path-method-delete:
    description: |
      Delete all meter variables in the named section.
  x-path-var:
    name: var
    in: path
    description: |
      The name of a variable.
    required: true
    schema:
      type: string
      pattern: "^[a-zA-Z0-9_%.-]+$"
    example: billing.start_day
  description: |
    The meter variables in the named section.

- name: /config/var/{section}/{var}
  x-schema:
    example: "6"
  x-path-method-delete:
    description: |
      Delete the named meter variable.
  description: |
    The value of the named meter variable.  Complex values can be
    stored, e.g., by JSON-encoding them.

- name: /ctid
  description: |
    This service provides access to the
    [CTidÂ®](https://docs.google.com/document/d/1DuqZYZKKnY83p68u0200WhZsyrrZhRLmeqJLs7fF4Sc/edit?usp=sharing)
    facility built into the EG4*xxx* series meters.  Specifically, it
    enables:


      1) retrieving the CTidÂ® information from a sensor,

      1) flashing the (optional) locator LED on the sensor, and

      1) deleting the stored CTidÂ® information associated with a
      sensor port.

    Note that while scanning or flashing a sensor, normal measurement
    of local sensors is suspended.  It is therefore recommended to use
    this service primarily during device setup.

    All methods other than `GET` required a user with the [save
    right](op:/auth:authRightsGet).

    ## Python Example

    A Python program illustrating the use of this service can be found
    [here](https://bitbucket.org/egauge/python/src/master/examples/test_ctid.py).
    This program takes advantage of class
    `egauge.webapi.device.CTidInfo` to handle the details of encoding
    the HTTP requests and decoding the responses.

- name: /ctrl
  description: |
    This service provides a means to control devices.  The devices
    being controlled are usually attached to the meter through a cable
    or wirelessly and are, in that sense, remote.

    Only model EG4*xxx* or newer meters support this service.

- name: /ctrl/call
  description: |
    This resource is used to issue control calls and to check on
    the status of a previously issued calls.

- name: /ctrl/device
  description: |
    Provides information about devices that can
    accept control calls.  Each device is described by a set of
    name/value pairs called [device
    attributes](glossary:Device-Attributes).

- name: /ctrl/interface
  x-path-methods: [get]
  x-path-method-get:
    parameters:
    - $ref: "./params.yaml#/maxDepthParam"
      x-meta-types: [object, array]
    - $ref: "./params.yaml#/filterParam"
      x-meta-types: [object, array]
  x-path-var:
    name: if
    in: path
    description: |
      The name of an interface.  Valid interface names must start with
      a letter and consist entirely of letters, digits, or
      underscores.
    required: true
    schema:
      type: string
    example: relay
  x-schema:
    example: {"modbus":{"method":[{"name":"read_coils","in":"qq","in_names":["addr","count"],"out":"ay","doc":"Read <arg>count</arg> number of coils starting with the coil at address <arg>addr</arg>. The return value is a Modbus reply packet which may contain an exception status or the requested coil values."},]},"relay":{"method":[{"name":"close","in":"u","in_names":["n"],"out":"","doc":"Close the relay with index <arg>n</arg>."},{"name":"open","in":"u","in_names":["n"],"out":"","doc":"Open the relay with index <arg>n</arg>."}]}}
  description: |
    The names and descriptions of control interfaces detected by the
    meter.

- name: /ctrl/interface/{if}
  x-schema:
    example: {"method":[{"name":"close","in":"u","in_names":["n"],"out":"","doc":"Close the relay with index <arg>n</arg>."},{"name":"open","in":"u","in_names":["n"],"out":"","doc":"Open the relay with index <arg>n</arg>."}]}
  description: |
    Description of the interface.

- name: /ctrl/interface/{if}/method
  x-path-var:
    name: idx
    in: path
    description: |
      The index of a method.
    required: true
    schema:
      type: integer
      minimum: 0
    example: 0
  x-schema:
    example: [{"name":"close","in":"u","in_names":["n"],"out":"","doc":"Close the relay with index <arg>n</arg>."},{"name":"open","in":"u","in_names":["n"],"out":"","doc":"Open the relay with index <arg>n</arg>."}]
  description: |
    The array of methods provided by this interface.  The methods are
    listed in no particular order.

- name: /ctrl/interface/{if}/method/{idx}
  x-schema:
    example: {"name":"close","in":"u","in_names":["n"],"out":"","doc":"Close the relay with index <arg>n</arg>."}
  description: |
   The description of this method.

- name: /ctrl/interface/{if}/method/{idx}/name
  x-schema:
    example: close
  description: |
    The name of the method.  The name starts with a letter and consists
    entirely of letters, digits, or underscores.

- name: /ctrl/interface/{if}/method/{idx}/in
  x-schema:
    example: u
  description: |
    The [DBus type
    signature](https://dbus.freedesktop.org/doc/dbus-specification.html#type-system)
    of the input arguments to the method. An empty string indicates
    that the method accepts no input arguments.

- name: /ctrl/interface/{if}/method/{idx}/in_names
  x-path-var:
    name: argidx
    in: path
    description: |
      The index of a method argument.
    required: true
    schema:
      type: integer
      minimum: 0
    example: 0
  x-schema:
    example: [n]
  description: |
    The names of the input arguments passed to the method.  Each
    argument name is meant to indicate the purpose of the respective
    argument but, other than that, it is arbitrary.  The documentation
    string given by member `doc` may also refer to these names.
    The `doc` member documentation for details.

- name: /ctrl/interface/{if}/method/{idx}/in_names/{argidx}
  x-schema:
    example: n
  description: |
    The name of this input argument.

- name: /ctrl/interface/{if}/method/{idx}/out
  x-schema:
    example: ""
  description: |
    The [DBus type
    signature](https://dbus.freedesktop.org/doc/dbus-specification.html#type-system)
    of the return value of the method. An empty string indicates that
    the method returns no value.

- name: /ctrl/interface/{if}/method/{idx}/doc
  x-schema:
    example: "Close the relay with index <arg>n</arg>."
  description: |
    Description of the purpose and operation of the method. Within
    this string, references to input argument names are enclosed
    within `<arg>` and `</arg>` tags to facilitate highlighting of
    argument names.

- name: /local
  description: |
    This service provides access to the values directly measured or
    derived from the sensors attached to the meter.  Values obtained
    from other, remote, devices are not accessible through this
    service.  Similarly, only the most recent (current) values are
    available.  Use the [/register](path:/register) service for
    accessing values stored in the database of the meter.

    Derived values are called *energy* and *apparent energy* and are
    calculated from a pair of sensors. Specifically, energy values are
    calculated by numerically integrating over time the product of two
    sensor values. Similarly, apparent energy is calculated as the
    product of the normal (RMS) values of a pair of sensors.  For
    example, if one sensor value measures an electrical current and
    the other a voltage, these calculate the real electric energy and
    apparent electric energy of the measured current/voltage pair,
    respectively.

    This service guarantees to return an atomic snapshot of the
    measurements as of the time indicated by the timestamp in the
    response.  Various query parameters can be used to select the
    exact data that is to be returned.

    In particular, query parameters `values`, `energy`, `apparent`, or
    `stats` can be used to select which sections to include in
    the response.  If none of these are specified, only the `values`
    section is returned by default.

    Query parameters `rate`, `cumul`, or `type` can be used to select
    the metrics to return for each sensor.  If none of these are
    specified, the `rate` and `type` metrics are returned by default.

    Within the rate and cumulative metrics, query parameters `normal`,
    `mean`, or `freq` select what measurements to return.  If none of
    these are specified, all measurements are returned by default.

    Finally, the `env`, `l`, and `s` query parameters can be used to
    select which sensors to include in the response.  If none of these
    are specified, all sensors are included in the response by
    default.

    ## Python Example

    A Python program illustrating the use of this service can be found
    [here](https://bitbucket.org/egauge/python/src/master/examples/test_local.py).
    This program takes advantage of class `egauge.webapi.device.Local`
    to handle the details of encoding the HTTP requests and decoding
    the responses.

- name: /log
  description: |
    Provides access to various logs.  Since logs may contain sensitive
    information, this service is available only to users with the
    `save` privilege (see
    [/auth/rights](op:/auth:authRightsGet)).

- name: /lua
  x-path-methods: [get, put, post, delete]
  x-path-method-get:
    parameters:
    - $ref: "./params.yaml#/maxDepthParam"
      x-meta-types: [object, array]
    - $ref: "./params.yaml#/filterParam"
      x-meta-types: [object, array]
    responses:
      "200":
        content:
          application/json:
            schema:
              example: {"result":{"var":{"sob_Grid-RD":{"value":"1677697200","desc":"Start of the current billing interval."},"kwh_sob_Grid-RD":{"value":"0","desc":"Accumulated kWh for billing period."}}}}
  description: |
    This service provides access to Lua-script related information.

- name: /lua/var
  x-path-var:
    name: name
    in: path
    description: |
      The name of a persistent Lua variable.
    required: true
    schema:
      type: string
  x-path-method-get:
    responses:
      "200":
        content:
          application/json:
            schema:
              example: {"result":{"sob_Grid-RD":{"value":"1677697200","desc":"Start of the current billing interval."},"kwh_sob_Grid-RD":{"value":"0","desc":"Accumulated kWh for billing period."}}}
  description: |
    The persistent Lua variables.  Such variables are non-volatile.
    That is, their value is preserved across script restarts and
    reboots (power-cycles).  Persistent variables can be created and
    manipulated with the built-in Lua module
    [`persistent`](https://www.egauge.net/support/lua/module/control).

- name: /lua/var/{name}
  x-schema:
    example: {"result":{"value":"1677697200","desc":"Start of the current billing interval."}}
  description: |
    A persistent Lua variable.

- name: /lua/var/{name}/desc
  x-schema:
    example: {"result":"Start of the current billing interval."}
  description: |
    A brief, user-friendly description of the purpose of this
    persistent variable.  This description is set when the persistent
    variable is created and is in the language chosen by the author of
    the Lua script that is created the variable.  The string is,
    therefore, not localized to the user's environment.

- name: /lua/var/{name}/value
  x-schema:
    example: {"result":"1677697200"}
  description: |
    The current value of this persistent variable as a JSON-encoded
    string.

    While it is possible to write this value via the WebAPI, Lua
    scripts generally will also be updating the value as part of their
    execution, so any change in value may be temporary and whether or
    not a WebAPI write is detected by the scripts depends on the
    scripts themselves.

- name: /providers
  description: |
    This service provides information about various third-party
    providers such as alert service providers, push data service
    providers, tariff information providers, and so on.  Since the
    information depends on third-party sites, a working Internet
    connection is generally required in order for this service to work
    properly.

- name: /store
  description: |
    **Note** _This service is deprecated and will be removed in the
      future.  Please use [/config/var](path:/config/var) instead._

    This service provides the ability to store arbitrary name/value
    pairs on the meter.  This is called server-side storage.

    The service implements a hierarchical name-space, with hierarchy
    levels separated by slash characters (`/`). The top-level is
    called a section, intermediate levels are called paragraphs, and
    leaves are called variables. For example, the path
    `global/default/currency_code` refers to variable `currency_code`
    in section `global`, paragraph `default`.

    Variables may also be stored at the section level.  The last
    character of a URL determines whether the URL refers to a
    section-level variable or a paragraph.  If the URL ends with a
    slash character (`/`), it refers to a paragraph, otherwise, it refers
    to a section-level variable.

    Names may contain lower- and upper-case ASCII letters, digits,
    dashes (`-`), underscores (`_`), and percent signs (`%`).

    Variable values may contain any UTF-8 codes except ASCII control
    codes (codes less than 0x20). Some variables may be defined as
    storing JSON-encoded values. For those, the value is limited to
    characters permissible by the [JSON grammar](https://www.json.org/).

    ## Well-known Variables

    What distinguishes server-storage variables from configuration
    settings is that the former are generally not used by the meter
    firmware. In other words, server-storage variables are used
    primarily by users of the WebAPI.  There are a few exceptions
    however:

      * `global/billing/start_day`: The meter firmware interprets this
        as the day of the month on which the utility company reads the
        utility meter.  The assumption is that the meter is read at
        noon on that day.  The value must be a decimal integer string
        in the range from 1-31.  If the billing day number is greater
        than the number of days in a particular month, it is assumed
        that utility meter is read on the last day of that month.

        The meter-firmware uses this, for example, to implement the
        `sob` [time point](glossary:Time-Point-Names).

      * `global/billing/tariff_uri`: If not an empty string, this is
        interpreted as the URL from which to fetch a [Lua
        script](glossary:Lua-Scripts) that calculates energy
        cost.  The meter will periodically poll this URL and download
        any available updates to the script.

      * `global/default/currency_symbol`: This is interpreted as the
        symbol to use for currency values.  This may be a single
        Unicode symbol such as `$` (Dollar) or `â¬` (Euro), or it may
        be a multi character string, such as `CHF` for Swiss Franc.
        The meter firmware uses the value of this variable when
        outputting the unit of monetary values.

- name: /register
  description: |
    This service provides access to both current and past register
    values of the meter.  A register can be thought of as a named
    column in a database that tracks the value of a measurement over
    time.

    The database consists of rows of register values.  Each row has a
    timestamp indicating the time at which the measurements were
    taken.  The maximum numbers of the rows in the database is fixed
    and the rows are managed in a round-robin style.  Typically,
    meters can hold up to the most recent 60 years of rows in the
    database.  Older data is automatically dropped.

    Older data is stored with a coarser granularity than younger data.
    A typical database might store the most recent one year of data
    with 1 minute between rows, the next 9 years with 15 minutes
    between rows, and the next 50 years with 24-hours between rows.
    The actual database configuration of a meter can be found in
    [/sys/db](path:/sys/db).

    ## Basic Usage

    This most simple use of this service is to fetch the current time
    of the meter.  This is accomplished with `GET /register?reg=none`:

      ```json
        {"ts": "1678475544.123"}
      ```

    Member `ts` returns the time as decimal string.  It is a [Unix
    timestamp](glossary:Unix-Timestamp) that, converted to a
    human-readable format, corresponds to March 10, 2023, 19:12:24 and
    123ms in the UTC timezone.  If the meter is connected to the
    Internet, its time should usually be accurate (see
    [/config/net/ntp](path:/config/net/ntp) and
    [/config/net/ptp](path:/config/net/ptp)).  However, it is advisable
    for a client to check the time and confirm its reasonbly close to
    actual time as discrepancies could cause confusing and erroneous
    results.

    Without the `reg=none` query parameter, the service also returns
    information about the available registers.  `GET /register` might
    return a result looks like this:

      ```json
      {
        "ts": "1678475548.000",
        "registers": [
          { "name": "V1", "type": "V", "idx": 3, "did": 31 },
          { "name": "grid, "type": "P", "idx": 7, "did": 6 },
          { "name": "temp, "type": "T", "idx": 8, "did": 7 },
          { "name": "mask", "type": "#", "idx": 14, "did": 34 }
        ]
      }
      ```

      Member `registers` contains information about the registers
      configured on the meter.  The response shows that each register
      has a `name`, a [`type`](glossary:Type-Codes) which defines
      the physical unit of that register, and several other attributes
      which will be explained in more detail later. In our example,
      there are registers called `V1`, measuring a voltage, `grid`
      measuring power, `temp` measuring a temperature, and `mask`
      which records a set of on/off flags.

      If we want to find out the current temperature, we can use the
      register index given by member `idx` of the `temp` register to
      ask for its current rate.  `GET /register?reg=8&rate` might
      return:

      ```json
      {
        "ts": "1678475551.932",
        "registers": [
          {"name": "temp, "type": "T", "idx": 8, "did": 7, "rate": 13.5629997}
        ]
      }
      ```

      If we look up type `T` in the [type code
      table](glossary:Type-Codes), we find that the rate unit is
      Â°C, so the response indicates that the current temperature is
      about 13.6 Â°C or 56.4 Â°F.

      We might also be interested in knowing the average temperature
      over the last 24 hours.  For that, we need to request the
      recorded values for the current time (`now`) and 24 hours or
      86,400 seconds ago (`now-86400`).  This can be accomplished
      with `GET /register?reg=8&time=now,now-86400`:

      ```json
      {
        "ts": "1678477555.345",
        "registers": {"name": "temp", "type": "T", "idx": 8, "did": 7},
        "ranges": [
          { "ts": "1678477555.154", "delta":  1, "rows": [["7494425049"]]},
          { "ts": "1678391100",     "delta": 60, "rows": [["7033149079"]]}]
      }
      ```

      The first item returned in the `ranges` array is for the current
      time, the second for 24 hours ago.  Subtracting the two
      timestamps, we see that 86,455.154 seconds elapsed between them.
      The reason this isn't exactly 86,400 seconds is that the
      database records values at a certain granularity and it so
      happened that the older row was recorded at a minute boundary.

      If we subtract the decimal strings reported in the `rows`
      arrays, we can see that the recorded temperature value increased
      from 7,033,149,079 to 7,494,425,049 during that time &mdash; an
      increase of 461,275,970.  That's a big number, but what does it
      mean?  If we look up type code `T` in the [type
      code](glossary:Type-Codes) table again, we see that the
      temperature quantum is 0.001 and the description there also
      explains how values are accumulated over time.  Thus, if we
      multiply the increase in value by the quantum and then divide
      by the elapsed time in seconds, we get:

      > _average temp_ = (461,275,970 Â· 0.001)Â°Cs / 86,455.154s = 5.335Â°C

      That is, the average temperature over the past 24 hours was
      about 5.3 Â°C or 42 Â°F.

    ## Python Example

    A Python program illustrating the use of this service can be found
    [here](https://bitbucket.org/egauge/python/src/master/examples/test_register.py).
    This program takes advantage of class
    `egauge.webapi.device.Register` to handle the details of encoding
    the HTTP requests and decoding the responses.  The class also takes
    care of:

      1) Converting rates, accumulated and average values to physical
      quantity objects that have a value and a unit.  These objects
      also can convert to different units, so if you'd like to output
      energy as british thermal units (Btu) or power as horsepower
      (hp), you can.

      1) Evaluating virtual registers.  The class automatically
      fetches the formulas of virtual register and then calculates
      them based on the physical register values as needed.

- name: /remote
  description: |
    *To be implemented.*

- name: /sys
  x-path-methods: [get]
  x-path-method-get:
    parameters:
    - $ref: "./params.yaml#/maxDepthParam"
      x-meta-types: [object, array]
    - $ref: "./params.yaml#/filterParam"
      x-meta-types: [object, array]
  description: |
    System information.  Everything here is read-only.

    Accessing this service requires the [view_settings
    privilege](glossary:User-Privileges).

- name: /sys/alert
  x-path-var:
    name: idx
    in: path
    description: |
      The index of a system alert.
    required: true
    schema:
      type: integer
      minimum: 0
  x-schema:
    example: [{"id":"badid","reason":"Unknown alert"},{"id":"pxyup","reason":"Proxy-connection established"},{"id":"pxydn","reason":"Proxy-connection lost"},{"id":"cfgchg","reason":"Device-configuration changed"}]
  description: |
    Descriptions of the system-generated alerts.

- name: /sys/alert/{idx}
  description: |
    Description of a system alert.

- name: /sys/alert/{idx}/id
  x-schema:
    example: "pxyup"
  description: |
    A short id that uniquely identifies this system alert. The id
    consists entirely of alpha-numeric characters.

- name: /sys/alert/{idx}/reason
  x-schema:
    example: "Proxy-connection established"
  description: |
    A brief explanation of the system condition that triggers is
    system alert.  The string is localized according to the selected
    language-code or is in English if a translation is unavailable.

- name: /sys/boot
  description: |
    Information about the most recent power-up (boot) event.

- name: /sys/boot/reason
  x-schema:
    example: "software reset"
  description: |
    The reason for the most recent CPU reset. The strings vary
    depending on the hardware platform. For EG4*xxx* model devices,
    the possible values are:

      * `general reset`: CPU was powered on when the backup battery
        was depleted.

      * `wakeup`: CPU was powered on when backup battery still had
        sufficient charge left.

      * `watchdog reset`: The CPU's watchdog timer triggered the reset.

      * `software reset`: Firmware requested a reboot.

      * `user reset`: Not applicable.

      * `unknown reset`: Not applicable.

- name: /sys/boot/time
  x-schema:
    example: "1677287880.350"
  description: |
    The time of the last user-initiated reboot.  It is a decimal [Unix
    timestamp](glossary:Unix-Timestamp) string or `null` if
    unavailable.  Unanticipated reboots, e.g., due to power failure or
    watchdog-timeouts do not update this resource.

- name: /sys/db
  description: |
    The database configuration of the meter.

- name: /sys/db/max-registers
  x-schema:
    minimum: 1
    example: 64
  description: |
    The maximum number of registers (columns) that can be stored in
    the meter's database.

- name: /sys/db/level
  x-path-var:
    name: idx
    in: path
    description: |
      The index of a db level.
    required: true
    schema:
      type: integer
      minimum: 0
  x-schema:
    example: [{"interval":1000,"row-count":32768,"volatile":true},{"interval":60000,"row-count":527040,"volatile":false},{"interval":900000,"row-count":350640,"volatile":false},{"interval":86400000,"row-count":21914,"volatile":false}]
  description: |
    Definition of the available database storage levels.

- name: /sys/db/level/{idx}
  description: |
    Definition of a database storage level.

- name: /sys/db/level/{idx}/interval
  x-schema:
    example: 1000
  description: |
    The time interval in milliseconds between database rows at this
    level.  For example, a value of 1000 would indicate that the level
    contains second-by-second data rows.

- name: /sys/db/level/{idx}/row-count
  x-schema:
    example: 32768
  description: |
    The number of rows available at this storage level.  Each database
    level is cyclical so a level with _n_ rows and an interval of _t_
    milliseconds can retain the most recent _n_Â·_t_ milliseconds worth
    of data.

- name: /sys/db/level/{idx}/volatile
  description: |
    This is `true` if this level of the database storage is volatile.
    The data in volatile levels is lost each time the meter is powered
    up (rebooted).

- name: /sys/dev
  description: |
    A description of hardware devices that are attached to the meter.

- name: /sys/dev/serial
  x-path-var:
    name: seridx
    in: path
    description: |
      The index of a serial port device.
    required: true
    schema:
      type: integer
      minimum: 0
  x-schema:
    example: [{"devpath":"USB2.1","manufacturer":"eGauge","product":"usb485","sn":"DN02MI0P","version":"2.00"}]
  description: |
    The list of serial ports that are attached to the meter.

- name: /sys/dev/serial/{seridx}
  description: |
    An attached serial port.

- name: /sys/dev/serial/{seridx}/devpath
  x-schema:
    example: USB2.1
  description: |
    The device path of the serial port that uniquely identifies the
    port it is attached to.

- name: /sys/dev/serial/{seridx}/manufacturer
  x-schema:
    example: eGauge
  description: |
    The name of the manufacturer of the serial port hardware.

- name: /sys/dev/serial/{seridx}/product
  x-schema:
    example: usb485
  description: |
    The product name of the serial port hardware.

- name: /sys/dev/serial/{seridx}/sn
  x-schema:
    example: DN02MI0P
  description: |
    The serial number of the serial port hardware.

- name: /sys/dev/serial/{seridx}/version
  x-schema:
    example: 2.00
  description: |
    The version of the serial port hardware.

- name: /sys/func
  description: |
    Documents the [eScript](glossary:eScript) functions built
    into the meter.

- name: /sys/func/basic
  x-path-var:
    name: name
    in: path
    description: |
      The name of an eScript basic function.
    required: true
    schema:
      type: string
  x-schema:
    example: {"max":{"arg":[{"name":"x","type":"#"},{"name":"y","type":"#"}],"help":"Returns the greater value of <arg>x</arg> and <arg>y</arg>.","min-args":2},"sin":{"arg":[{"name":"x","type":"#"}],"help":"Returns sine of <arg>x</arg>, where <arg>x</arg> is an angle in degrees.","min-args":1}}
  description: |
    Documents the *basic* [eScript](glossary:eScript) functions.  Basic
    functions are available any place eScript expressions may appear.

- name: /sys/func/basic/{name}
  x-schema:
    example: max
  x-schema-ref: "./schemas.yaml#/FuncObjectName"

- name: /sys/func/basic/{name}/arg
  x-path-var:
    name: idx
    in: path
    description: |
      The name index of a function argument.
    required: true
    schema:
      type: integer
      minimum: 0
  x-schema:
    example: [{"name":"x","type":"#"},{"name":"y","type":"#"}]
  x-schema-ref: "./schemas.yaml#/FuncObjectArg"

- name: /sys/func/basic/{name}/arg/{idx}
  x-schema:
    example: {"name":"x","type":"#"}
  x-schema-ref: "./schemas.yaml#/FuncObjectArgItem"

- name: /sys/func/basic/{name}/arg/{idx}/name
  x-schema:
    example: x
  x-schema-ref: "./schemas.yaml#/FuncObjectArgItemName"

- name: /sys/func/basic/{name}/arg/{idx}/type
  x-schema:
    example: "#"
  x-schema-ref: "./schemas.yaml#/FuncObjectArgItemType"

- name: /sys/func/basic/{name}/help
  x-schema:
    example: "Returns the greater value of <arg>x</arg> and <arg>y</arg>."
  x-schema-ref: "./schemas.yaml#/FuncObjectHelp"

- name: /sys/func/basic/{name}/min-args
  x-schema:
    example: 2
  x-schema-ref: "./schemas.yaml#/FuncObjectMinArgs"

- name: /sys/func/alert
  x-path-var:
    name: name
    in: path
    description: |
      The name of an eScript alert function.
    required: true
    schema:
      type: string
  x-schema:
    example: {"dayavg":{"arg":[{"name":"reg","type":"string"}],"help":"Calculates the 24-hour average value for register <arg>reg</arg>.","min-args":1},"cumul":{"arg":[{"name":"reg","type":"string"},{"name":"time","type":"#"}],"help":"Returns the cumulative value of register named <arg>reg</arg> at time <arg>time</arg>.  If <arg>time</arg> is not specified, the current time is used.","min-args":1}}
  description: |
    Documents the *alert* [eScript](glossary:eScript) functions.  These
    functions are available only for eScript expressions evaluated as
    part of alert conditions.

- name: /sys/func/alert/{name}
  x-schema:
    example: dayavg
  x-schema-ref: "./schemas.yaml#/FuncObjectName"

- name: /sys/func/alert/{name}/arg
  x-path-var:
    name: idx
    in: path
    description: |
      The name index of a function argument.
    required: true
    schema:
      type: integer
      minimum: 0
  x-schema:
    example: [{"name":"reg","type":"string"}]
  x-schema-ref: "./schemas.yaml#/FuncObjectArg"

- name: /sys/func/alert/{name}/arg/{idx}
  x-schema:
    example: {"name":"reg","type":"string"}
  x-schema-ref: "./schemas.yaml#/FuncObjectArgItem"

- name: /sys/func/alert/{name}/arg/{idx}/name
  x-schema:
    example: reg
  x-schema-ref: "./schemas.yaml#/FuncObjectArgItemName"

- name: /sys/func/alert/{name}/arg/{idx}/type
  x-schema:
    example: string
  x-schema-ref: "./schemas.yaml#/FuncObjectArgItemType"

- name: /sys/func/alert/{name}/help
  x-schema:
    example: "Calculates the 24-hour average value for register <arg>reg</arg>."
  x-schema-ref: "./schemas.yaml#/FuncObjectHelp"

- name: /sys/func/alert/{name}/min-args
  x-schema:
    example: 1
  x-schema-ref: "./schemas.yaml#/FuncObjectMinArgs"

- name: /sys/modbus
  description: |
    Modbus-related information built into the firmware.

- name: /sys/modbus/client
  description: |
    Modbus client related information.

- name: /sys/modbus/client/map
  x-path-var:
    name: name
    in: path
    description: |
      The name of a system Modbus map (read-only).
    required: true
    schema:
      type: string
      example: egauge_prm3
  x-schema:
    example: {"sys_dev":{"option":{"default-modbus-addr": "2", "default-serial-params":"9600/8n1"},"reg":[{"name":"irradiance","addr":0,"type":"u32","kind":"analog","unit":"W","offset":0,"scale":0.1,"access":"ro"},{"name":"temp","addr":1,"type":"s32","kind":"analog","unit":"degC","offset":0,"scale":0.01,"access":"ro"}]}}
  description: |
    System-defined (built-in) Modbus address maps.  The user-defined
    maps are available at
    [/config/modbus/client/map](path:/config/modbus/client/map).  If a
    user-defined map with the same name as a system map exists, it
    will shadow (mask) the system map with the same name.

- name: /sys/modbus/client/map/{name}
  x-schema-ref: "./schemas.yaml#/ModbusClientMapObject"

- name: /sys/modbus/client/map/{name}/option
  x-path-var:
    name: opt
    in: path
    description: |
      The name of a Modbus map option.
    required: true
    schema:
      type: string
  x-schema-ref: "./schemas.yaml#/ModbusClientMapObjectOption"

- name: /sys/modbus/client/map/{name}/option/{opt}
  x-schema-ref: "./schemas.yaml#/ModbusClientMapObjectOptionObject"

- name: /sys/modbus/client/map/{name}/reg
  x-path-var:
    name: idx
    in: path
    description: |
      The index of a Modbus map register.
    required: true
    schema:
      type: string
  x-schema-ref: "./schemas.yaml#/ModbusClientMapObjectReg"

- name: /sys/modbus/client/map/{name}/reg/{idx}
  x-schema-ref: "./schemas.yaml#/ModbusClientMapObjectRegObject"

- name: /sys/modbus/client/map/{name}/reg/{idx}/name
  x-schema-ref: "./schemas.yaml#/ModbusClientMapObjectRegObjectName"

- name: /sys/modbus/client/map/{name}/reg/{idx}/addr
  x-schema-ref: "./schemas.yaml#/ModbusClientMapObjectRegObjectAddr"

- name: /sys/modbus/client/map/{name}/reg/{idx}/type
  x-schema-ref: "./schemas.yaml#/ModbusClientMapObjectRegObjectType"

- name: /sys/modbus/client/map/{name}/reg/{idx}/kind
  x-schema-ref: "./schemas.yaml#/ModbusClientMapObjectRegObjectKind"

- name: /sys/modbus/client/map/{name}/reg/{idx}/unit
  x-schema-ref: "./schemas.yaml#/ModbusClientMapObjectRegObjectUnit"

- name: /sys/modbus/client/map/{name}/reg/{idx}/offset
  x-schema-ref: "./schemas.yaml#/ModbusClientMapObjectRegObjectOffset"

- name: /sys/modbus/client/map/{name}/reg/{idx}/scale
  x-schema-ref: "./schemas.yaml#/ModbusClientMapObjectRegObjectScale"

- name: /sys/modbus/client/map/{name}/reg/{idx}/access
  x-schema-ref: "./schemas.yaml#/ModbusClientMapObjectRegObjectAccess"

- name: /sys/model
  description: |
    The model name of the meter. For example, `EG4030`.

- name: /sys/net
  description: |
    The network settings that are in use by the meter.  This may
    or may not be the same as the configuration established in
    [/config/net](path:/config/net).

- name: /sys/net/homeplug
  description: |
    The HomePlug status.

- name: /sys/net/homeplug/bridge
  x-path-var:
    name: idx
    in: path
    description: |
      The index of a HomePlug bridge device.
    required: true
    schema:
      type: integer
      minimum: 0
  description: |
    The array of HomePlug bridge devices detected.

- name: /sys/net/homeplug/bridge/{idx}
  description: |
    The status of a detected HomePlug bridge device.

- name: /sys/net/homeplug/bridge/{idx}/mac
  description: |
    The MAC address of the HomePlug bridge device.
  x-schema:
    example: 32:b7:c2:96:c3:78

- name: /sys/net/homeplug/bridge/{idx}/speed
  description: |
    Information about the current estimated speed at which
    communication occurs to this bridge device.

- name: /sys/net/homeplug/bridge/{idx}/speed/rx
  description: |
    The current estimated speed at which the meter can receive data
    from this bridge device.  This is reported as bits/second.
  x-schema:
    example: 8934500

- name: /sys/net/homeplug/bridge/{idx}/speed/tx
  description: |
    The current estimated speed at which the meter can send data to
    this bridge device.  This is reported as bits/second.  On egauge2
    devices, this member is unavailable.
  x-schema:
    example: 9000000

- name: /sys/net/homeplug/bridge/{idx}/type
  description: |
    The HomePlug chipset used by the bridge device.  This member is
    available only if the chipset could be identified.
  x-schema:
    example: hpav

- name: /sys/net/homeplug/bridge/{idx}/vendor
  description: |
    The name of the manufacturer of this HomePlug bridge device.  This
    member is available only if the chipset could be identified.
  x-schema:
    example: TP-Link

- name: /sys/net/ipv4
  x-schema-ref: "./schemas.yaml#/IPv4Object"

- name: /sys/net/ipv4/address
  x-schema-ref: "./schemas.yaml#/IPv4ObjectAddress"

- name: /sys/net/ipv4/broadcast
  x-schema-ref: "./schemas.yaml#/IPv4ObjectBroadcast"

- name: /sys/net/ipv4/dhcp
  x-schema-ref: "./schemas.yaml#/IPv4ObjectDHCP"

- name: /sys/net/ipv4/netmask
  x-schema-ref: "./schemas.yaml#/IPv4ObjectNetmask"

- name: /sys/net/ipv4/network
  x-schema-ref: "./schemas.yaml#/IPv4ObjectNetwork"

- name: /sys/net/ipv4/gateway
  x-schema-ref: "./schemas.yaml#/IPv4ObjectGateway"

- name: /sys/net/ntp
  description: |
    Network Time Protocol
    ([NTP](https://www.rfc-editor.org/rfc/rfc5905)) status.

- name: /sys/net/ntp/server
  x-path-var:
    name: idx
    in: path
    description: |
      The index of an NTP server.
    required: true
    schema:
      type: integer
      minimum: 0
  x-schema:
    example: [{"address":"192.168.1.1","name":null,"state":"SYNC","weight":1,"trust_level":10,"stratum":3,"next_poll":615,"poll_interval":1545,"offset":0.228,"delay":0.790,"jitter":0.106},{"address":"66.228.58.20","name":"north-america.pool.ntp.org","state":"PEER","weight":1,"trust_level":10,"stratum":3,"next_poll":499,"poll_interval":1480,"offset":-0.601,"delay":39.609,"jitter":2.258}]
  description: |
    Status of each [configured](path:/config/net/ntp/server) NTP server.

- name: /sys/net/ntp/server/{idx}
  description: |
    Status of the NTP server.

- name: /sys/net/ntp/server/{idx}/address
  x-schema:
    example: 192.168.1.1
  description: |
    The network address of the configured NTP server.  This is
    typically a string-representation of the server's IP address,
    which may be either an IP v4 or v6 address. If the address is
    unknown, this is `null`.

- name: /sys/net/ntp/server/{idx}/delay
  x-schema:
    example: 0.790
  description: |
    The estimated time it takes for a network packet from the meter to
    reach this NTP server (or vice versa).  The unit is milliseconds.
    The is available only if the meter considers this server a peer.

- name: /sys/net/ntp/server/{idx}/jitter
  x-schema:
    example: 0.106
  description: |
    The estimated jitter (variation) for the time it takes for a
    network packet from the meter to reach this NTP server (or vice
    versa). The unit is milliseconds.
    The is available only if the meter considers this server a peer.

- name: /sys/net/ntp/server/{idx}/name
  x-schema:
    example: null
  description: |
    The hostname of the configured NTP server.  If the name is
    unknown, this this is `null`.  This normally happens when the NTP
    server is configured as an IP address.

- name: /sys/net/ntp/server/{idx}/next_poll
  x-schema:
    example: 615
  description: |
    The time that needs to elapse before the meter contacts this
    server again.  The unit is seconds.

- name: /sys/net/ntp/server/{idx}/offset
  x-schema:
    example: -0.601
  description: |
    The estimated difference between the meter's time and this NTP
    server's time.  The unit is milliseconds.
    The is available only if the meter considers this server a peer.


- name: /sys/net/ntp/server/{idx}/poll_interval
  x-schema:
    example: 1545
  description: |
    The interval of time between successive contacts from the meter to
    this server.  The unit is seconds.

- name: /sys/net/ntp/server/{idx}/state
  x-schema:
    example: SYNC
    enum: [INVAL, PEER, SYNC, TRACK]
  description: |
    The meter's view of the current state of this NTP server.  It may
    have one of the following values:

      * `INVAL`: The server is invalid, e.g., because the hostname
      could not be resolved to a network address or because the remote
      server is not responding.

      * `TRACK`: The server is being tracked and, if everything
      continues to work fine, it will enter the `PEER` state shortly.

      * `PEER`: The server is a peer and could be used as a time source.

      * `SYNC`: The server is a peer and the meter's time is
      synchronized with this server.

- name: /sys/net/ntp/server/{idx}/stratum
  x-schema:
    example: 3
  description: |
    The meter's estimate of the time accuracy provided by this server.
    Smaller numbers mean higher accuracy.  A stratum 0 server is the
    most accurate (atomic clock or GPS clock).
    The is available only if the meter considers this server a peer.

- name: /sys/net/ntp/server/{idx}/trust_level
  x-schema:
    example: 10
  description: |
    The meter's estimate of how trustworthy this server's time is.
    Higher numbers indicate a higher level of trustworthiness.

- name: /sys/net/ntp/server/{idx}/weight
  x-schema:
    example: 1
  description: |
    The meter's estimate of the weight that should be given to this
    NTP server's time.

- name: /sys/net/wlan
  description: |
    The WLAN (Wi-Fi) status.

- name: /sys/net/wlan/ap
  x-path-var:
    name: idx
    in: path
    description: |
      The index of a WLAN access point.
    required: true
    schema:
      type: integer
      minimum: 0
  x-schema:
    example: [{"bssid":"d8:08:a5:ae:4c:e1","flags":"[WPA2-PSK-CCMP][ESS]","frequency":2452,"signal_level":-18,"ssid":"wireless"},{"bssid":"24:c1:e3:c7:2a:88","flags":"[WPA2-PSK-CCMP][WPS][ESS]","frequency":2412,"signal_level":-62,"ssid":"testwlan"}]
  description: |
    The list of detected access points (available WLAN networks).

- name: /sys/net/wlan/ap/{idx}
  description: |
    Access point status.

- name: /sys/net/wlan/ap/{idx}/bssid
  x-schema:
    example: "d8:08:a5:ae:4c:e1"
  description: |
    The BSSID (basic service set identifier) of this access point.
    This is a MAC address formatted as six two-digit hex numbers,
    separated by colons (`:`).

- name: /sys/net/wlan/ap/{idx}/flags
  x-schema:
    example: "[WPA2-PSK-CCMP][ESS]"
  description: |
    A set of flags enclosed in square brackets.  Each flag gives some
    information about the capabilities of this access point.

    The following flags are currently defined:

      * `DMG`: Indicates the access-point supports 802.11ad
        directional multi-gigabit (DMG).

      * `EBSS`: The access-point supports extended wireless networks.

      * `FILS`: The access-point supports 802.11ai fast initial link setup.

      * `FST`: The access-point supports fast session transfers.

      * `HS20`: The access-point supports Hot Spot 2.0 (Wi-Fi
        Certified Passpoint).

      * `IBSS`: The access-point supports independent basic service
        set (ad-hoc) wireless networks.

      * `MESH`: The access-point uses a mesh network.

      * `OSEN`: The access-point supports Server-only authenticated
        layer 2 Encryption Network.

      * `OWE-TRANS`: See Opportunistic Wireless Extension.

      * `OWE-TRANS-OPEN`: See Opportunistic Wireless Extension.

      * `P2P`: The access-point supports point-to-point (WiFi Direct)
        wireless networks.

      * `PBSS`: Indicates the access-point supports personal basic
        service set wireless networks.

      * `RSN`: Indicates the access-point supports Robust Security
        Network (RSN).

      * `UTF-8`: The SSID is UTF-8 encoded.

      * `WEP`: The access-point supports Wired Equivalent Privacy (WEP).

      * `WPA`: The access-point supports Wi-Fi Protected Access (WPA).

      * `WPA2`: The access-point supports Wi-Fi Protected Access (WPA)
        version 2.

      * `WPS`: The access-point supports Wi-Fi Protected Setup (WPS).

    Encryption-related flags may be followed by various sub-flags that
    are separated by a `+` character.  For example,
    `WPA2-PSK-CCMP+TKIP` indicates that WPA2-PSK-CCMP is supported
    with the TKIP protocol.

- name: /sys/net/wlan/ap/{idx}/frequency
  x-schema:
    example: 2452
  description: |
    The frequency in MHz of this access point.

- name: /sys/net/wlan/ap/{idx}/signal_level
  x-schema:
    example: -18
  description: |
    The signal-strength (in dB) with which the meter is receiving this
    access point.  This is typically a negative number with larger
    (less negative) numbers indicating higher signal strength.

- name: /sys/net/wlan/ap/{idx}/ssid
  x-schema:
    example: wireless
  description: |
    The SSID (service set identifier) of this WLAN network.

- name: /sys/net/wlan/net
  x-path-var:
    name: idx
    in: path
    description: |
      The index of a WLAN network.
    required: true
    schema:
      type: integer
      minimum: 0
  x-schema:
    example: [{"network_id":0,"bssid":"any","flags":"[DISABLED]","ssid":"other"},{"network_id":1,"bssid":"any","flags":"[CURRENT]","ssid":"wireless"},{"network_id":2,"bssid":"any","flags":"[DISABLED]","ssid":"åå¹´ ð"}]
  description: |
    The status of configured wireless networks.

- name: /sys/net/wlan/net/{idx}
  description: |
    The WLAN network status.

- name: /sys/net/wlan/net/{idx}/network_id
  x-schema:
    example: 1
    minimum: 0
  description: |
    Identifier for this network.

- name: /sys/net/wlan/net/{idx}/bssid
  x-schema:
    example: any
  description: |
    The BSSID (basic service set identifier) of the access point to
    use for this network.  This is a MAC address formatted as six
    two-digit hex numbers separated by colons (`:`).  If unset, this
    is `any` instead.

- name: /sys/net/wlan/net/{idx}/flags
  x-schema:
    example: "[CURRENT]"
  description: |
    A set of flags which are enclosed in square brackets.  The
    following flags are currently defined:

      * `CURRENT`: Indicates that this network is currently being
        used.

      * `DISABLED`: The network is disabled from being used.

      * `TEMP-DISABLED`: The network is temporarily disabled from
        being used.

      * `P2P-PERSISTENT`: Indicates a point-to-point (WiFi Direct)
        connection.  This is not used by the meter.

- name: /sys/net/wlan/net/{idx}/ssid
  x-schema:
    example: wireless
  description: |
    The SSID (service set identifier) of this WLAN network.

- name: /sys/push
  description: |
    The status of the push (data sharing) service.  See
    [/config/push](path:/config/push).

- name: /sys/push/next
  description: |
    Information about the next push request.

- name: /sys/push/next/attempt
  x-schema:
    example: "1682658559.0"
  description: |
    The next time the meter will send push data to the server.  The
    time is expressed as a decimal [Unix
    timestamp](glossary:Unix-Timestamp) string.  If unavailable, this
    is an empty string.

- name: /sys/push/last
  description: |
    Information about the last (most recent) push request.

- name: /sys/push/last/attempt
  x-schema:
    example: "1682658499.0"
  description: |
    The last time the meter sent (or attempted to send) push data to
    the server.  The time is expressed as a decimal [Unix
    timestamp](glossary:Unix-Timestamp) string.  If unavailable, this
    is an empty string.

- name: /sys/push/last/count
  x-schema:
    example: 900
  description: |
    The number of register data rows that were sent to the server
    during the last push.  If unavailable, this is zero.

- name: /sys/push/last/status
  x-schema:
    example: 200
  description: |
    The HTTP status returned by the server at the end of the last
    push.  If unavailable, this is zero.

- name: /sys/push/last/success
  x-schema:
    example: "1682658499.1"
  description: |
    The most recent time push data was successfully sent to the
    server.  The time is expressed as a decimal [Unix
    timestamp](glossary:Unix-Timestamp) string.  If unavailable, this
    is an empty string.

- name: /sys/push/last/ts
  x-schema:
    example: "1682658480.0"
  description: |
    The time of the last register data row sent to the server.  The
    time is expressed as a decimal [Unix
    timestamp](glossary:Unix-Timestamp) string.  If unavailable, this
    is an empty string.

- name: /sys/reboot
  description: |
    This is `true` if the meter needs to be rebooted, e.g., due to a
    configuration change.  If so, a [reboot
    command](op:/cmd:cmdReboot) should be issued at the
    next opportune moment.

- name: /sys/slowd
  x-schema:
    $ref: "./schemas.yaml#/SlowdStatusObject"
  description: |
    The status of slowd (serial) devices.

- name: /sys/sn
  x-schema:
    example: G10400
  description: |
    The serial number of the meter.  Even though it is called
    serial-*number*, this string may contain letters, dashes (`-`) and
    underscores (`_`) as well.

- name: /sys/status
  x-path-var:
    name: token
    in: path
    description: |
      The token returned when a long-running operation was started.
    required: true
    schema:
      type: string
  x-schema:
    example: {}
  description: |
    The status of long-running operations.  For security reasons, this
    resource always returns an empty object.  That is, only
    applications that know the token of a long-running operation can
    inquire on its status.

- name: /sys/status/{token}
  x-schema:
    example: {"args":["4.5alpha1","4.5alpha1"],"done":true,"error":"NOT_NEWER","ts":"1679103764.278772467"}
  description: |
    The current status of the long-running operation.

- name: /sys/status/{token}/args
  x-path-var:
    name: idx
    in: path
    description: |
      The index of a status argument.
    required: true
    schema:
      type: integer
      minimum: 0
  x-schema:
    example: ["4.5alpha1","4.5alpha1"]
  description: |
    A list of strings that provide additional information to the
    `error` or `info` tag.

- name: /sys/status/{token}/args/{idx}
  x-schema:
    example: "4.5alpha1"
  description: |
    A string that provides additional information to the `error` or
    `info` tag.

- name: /sys/status/{token}/done
  description: |
    This is `true` if the operation has completed or `false` if it is
    still in progress.

- name: /sys/status/{token}/error
  x-schema:
    example: NOT_NEWER
  description: |
    If set, indicates that an error occurred.  The meaning of this
    value depends on the operation being performed.  Generally, it is
    a short tag.  For example, `OOM` to indicate "out of
    memory". Before presenting the tag to a user, it must be
    translated to a human-readable string.  The strings in member
    `args` provide additional info about why the error occurred.

- name: /sys/status/{token}/info
  x-schema:
    example: RESTORE
  description: |
    If set, indicates the action the long-running operation is
    currently performing.  The meaning of this value depends on the
    operation being performed.  Generally, the string is a short tag.
    For example, `RESTORE` to indicate that data is being restored to
    the database. Before presenting the tag to a user, it must be
    translated to a human-readable string.  The strings in member
    `args` provide additional info about the action being performed.

- name: /sys/status/{token}/progress
  x-schema:
    example: 0.31415
  description: |
    A progress indicator that reports the portion of the operation (or
    action) that has been completed so far.  The value is in the range
    from 0 to 1, where 0 means that the operation has just started and
    1 means the operation is 100% complete.

- name: /sys/status/{token}/result
  description: |
    The result of the slow operation.  Not all operations provide a
    result and while the operation is ongoing, the result may be
    changing over time.  Once the operation is done, the result is
    stable and won't change anymore.
  x-schema:
    oneOf:
    - $ref: "#/ServiceActivationResult"
      example: "{\"log\":\"test successful\"}"
    - $ref: "#/TestEmailResult"
      example: "wooofi"
    - $ref: "#/TestRemoteResult"
      example: "wooofi"

- name: /sys/status/{token}/ts
  x-schema:
    example: "1679103764.278772467"
  description: |
    The time when this status was created.  It is a decimal [Unix
    timestamp](glossary:Unix-Timestamp) string.

- name: /sys/team
  description: |
    The team status.  This describes the current status of all registers
    whether locally measured or obtained from a remote device.

- name: /sys/team/lag
  x-schema:
    example: 0.195
  description: |
    The number of seconds the register values are lagging behind real
    time.  If all remote devices are online and responsive, lag should
    typically be less than 500 milliseconds.

- name: /sys/team/fft
  description: |
    The status of the FFT calculations.

- name: /sys/team/fft/last_update
  x-schema:
    example: "1708030925.1"
  description: |
    The [Unix timestamp](glossary:Unix-Timestamp) of when the FFT
    calculations were updated most recently.  If `null`, it indicates
    that no FFT calculations are being performed.  If not `null`, the
    timestamp typically lags behind the current time by a couple of
    seconds because FFTs cannot be calculated in real time.

- name: /sys/team/reg
  x-path-var:
    name: name
    in: path
    description: |
      The register name.
    required: true
    schema:
      type: string
  x-schema:
    example: {"Grid":{"available":true,"last":{"update":"1708042434","val":"1190154529"},"excess":"0"},"SolarSPR":{"available":true,"last":{"update":"1708042434","val":"12510606428"},"excess":"0"}}

- name: /sys/team/reg/{name}
  description: |
    The current status of the register.

- name: /sys/team/reg/{name}/available
  description: |
    True if the register has an up-to-date value.  If false, it typically
    means that the (remote) device measuring its value is not
    reachable at the moment.

- name: /sys/team/reg/{name}/excess
  x-schema:
    example: "0"
  description: |
    The pending amount of excess for this register.  For locally
    measured registers and discrete registers, this is always zero.
    For remote registers, this becomes non-zero if the rate of change
    to be recorded is outside of the actual rate plus/minus 10%.  This
    is being done to prevent recording big spikes when a remote device
    is offline for some time and then comes back online.  Instead of
    recording a big jump, an excess is recorded which will then be
    played back over time by inflating (or deflating) the recorded
    rate by up to +/-10% of the actual rate until the excess has been
    drained.  The excess of all registes can be reset to zero with the
    [clear](op:/cmd:cmdClearPost) command.

- name: /sys/team/reg/{name}/last
  description: |
    The info for the most recent (last) update to the register.

- name: /sys/team/reg/{name}/last/update
  x-schema:
    example: "1708042434"
  description: |
    The decimal [Unix timestamp](glossary:Unix-Timestamp) of when this
    register was last updated.

- name: /sys/team/reg/{name}/last/val
  x-schema:
    example: "-9767738213"
  description: |
    The current value of the register as signed 64-bit integer
    converted to a decimal string.  Except for discrete registers,
    this is an accumulated value (see Section [Type
    Codes](glossary:Type-Codes) for details).

- name: /sys/time
  x-schema:
    example: "1679104389.095469"
  description: |
    The current meter time as a decimal [Unix
    timestamp](glossary:Unix-Timestamp) string.

- name: /sys/uptime
  x-schema:
    example: 1232588.28
  description: |
    The number of seconds the device has been running since the last
    reboot.

- name: /sys/version
  description: |
    Meter version information.

- name: /sys/version/firmware
  x-schema:
    example: "4.5alpha1"
  description: |
    The version code of the installed firmware.

- name: /sys/version/hardware
  x-schema:
    example: "3EA"
  description: |
    The version code of the hardware.

- name: /sys/version/kernel
  x-schema:
    example: "5.15.95+ #47 Thu Feb 23 15:15:34 MST 2023"
  description: |
    The version code of the installed kernel.

#####################################################################

- name: Glossary
  description: |
    ## Deprecated

    Items marked deprecated should not be used going forward as they
    will be removed in a future firmware release.

    ## Device Attributes

    Most device attributes are simple name/value pairs with both the
    name and the value consisting of strings.  Two exceptions are the
    `path` and `interface` attributes:

      * `path`: The value of this attribute is a list of strings.  The
        list provides a unique path to the device.  If present, it
        must be the first attribute.  This is the only attribute which
        provides a guaranteed unique identifier for the device.  The
        flip-side is that the path is not necessary _stable_.  For
        example, if a USB device is moved from one port to another,
        the path would change.  Thus, depending on the needs of the
        application, it may be more appropriate to identify a device
        through other means, such as the manufacturer, model, and
        serial-number, which, together, might provide a unique
        identifier for the device that remains stable regardless of
        how the device is connected to the meter.

      * `interface`: The value of this attribute is also a list of
        strings.  Each entry is the name of an interface that is
        supported by the device.  A description of each interface can
        be obtained from [/ctrl/interface](path:/ctrl/interface).

    The meaning of other attributes is given below:

      * `link`: The physical link used by the device.  If present, the
        value must be one of:

        * `Ethernet`: The device is connected via Ethernet.

        * `USB`: The device is connected via USB.

        * `serial`: The device is connected via a serial link such as
          RS485, RS232, or similar.

      * `mfg`: The name of the manufacturer of the device (e.g.,
        `eGauge`).

      * `model`: The model name of the device (e.g., `PRM3`).

      * `name`: If present, a user-selected name of the device.

      * `prot`: The communication protocol used by the device.  If
        present, it must be one of:

        * `CoAP`: The device uses the [Constrained Application
          Protocol](https://www.rfc-editor.org/rfc/rfc7252).

        * `CtrlByWeb`: The device uses the ControlByWeb XML protocol.

        * `Modbus`: The device uses the
          [Modbus](https://www.modbus.org/specs.php) protocol.

        * `RTCoA`: The device uses the Radio Thermostat Co of America
          protocol.

        * `SCPI`: The device uses the
          [SCPI](https://en.wikipedia.org/wiki/Standard_Commands_for_Programmable_Instruments)
          protocol (pronounced "skippy".

        * `SMANet`: The device uses the SMAnet protocol used by older PV
          inverters manufactured by SMA.

      * `quality`: Devices that can potentially be reached through
        multiple paths may set this attribute to indicate the
        communication-quality of a particular path.  The value of this
        attribute must be a decimal string.  Paths that provide better
        communication-quality in some sense (e.g., higher speed or
        smaller loss-rate) should have a higher value.  When mapping a
        set of attributes to a set of paths, the paths will be ordered
        by decreasing quality value such that higher quality paths
        will appear before lower quality ones.

      * `sn`: The serial "number" of the device.  Even though called a
        number, the value may also contain non-digit characters (e.g.,
        `0Y0035`).

    ## eScript

    eScript is a simple scripting langage which supports
    basic arithmetic operations (addition, subtraction, multiplication,
    and division) of double-precision floating point numbers.  The
    operations follow normal precedence rules.  Parentheses can be used
    to force evaluation in a particular order.  A C-like ternary
    operator is also supported for conditional evaluation.
    Specifically:

      > `c ? e1 : e2`

    evaluates to `e1` if `c` is non-zero and to `e2` otherwise.

    The latest instantaneous value of a meter register can be obtained
    with the `$` operator which must be followed by a register name in
    quotes.  For example:

      > `$"Grid"`

    would evaluate to the instantaneous value of register `Grid`.

    eScript also supports various functions such as `sin()` to
    calculate the sine of an angle or `THD()` to calculate
    total-harmonic distortion in a signal.  A list of functions is
    available at [/sys/func](path:/sys/func).

    An eScript expression which starts with a colon (`:`) is
    interpreted as a [Lua](glossary:Lua-Scripts) expression.

    ## Filter-Spec

    Filter-specs can be used to return only certain
    members of an object or certain elements of an array.

    For example, `{foo,bar}` would limit the output of an object to the
    members with names `foo` and `bar`.  Similarly, `[0,3:5]` would
    limit the output of an array to the elements with indices 0, 3, 4,
    and 5.

    If a member or array filter is empty, all members/elements of that
    object/array are returned.  This is handy when filtering deeper
    levels of a response.  For example `[{addr}]` would return only
    member `addr` from all the objects in the returned array.

    For a more complex example, the filter-spec `{reg[7:8{addr}]}`
    would, for each object in the response, only return the `reg` member
    and, within each `reg` array, only elements with indices 7 or 8
    would be returned.  Within the objects of those elements, only the
    `addr` member would be returned.


    Note that braces and square brackets normally need to be
    percent-encoded before using them in a URL (e.g., `%7B` for `{`).

    ### Formal Definition

    The formal syntax of a filter-spec (*FSPEC*) is given by the EBNF
    syntax below.  No whitespace is allowed between symbols.

    > *FSPEC* = [*OBJECT_FILTER* | *ARRAY_FILTER*] . \
    > *OBJECT_FILTER* = "{" *MEMBER_FILTER* {"," *MEMBER_FILTER*)} "}" . \
    > *ARRAY_FILTER* = "["*INDEX_FILTER* {"," *INDEX_FILTER*)} "]" . \
    > *MEMBER_FILTER* = [*NAME* | "(" *NAME* {"," *NAME*} ")"] *FSPEC* . \
    > *INDEX_FILTER* = [*RANGE* | "(" *RANGE* {"," *RANGE*} ")"] *FSPEC* . \
    > *RANGE* = *UINT* [ ":" *UINT* ] . \
    > *UINT* = *DIGIT* { *DIGIT* } . \
    > *DIGIT* = "0".."9". \
    > *NAME* = *ALPHA* | *DIGIT* | "-" | "." | "_" | "~" | *PCT_ENC* . \
    > *ALPHA* = "a".."z" | "A".."Z" . \
    > *PCT_ENC* = "%" *HEX* *HEX* . \
    > *HEX* = *DIGIT* | "a".."f" | "A".."F" . \
    > *EMPTY* = .

    In words: a filter-spec can restrict the members returned from an
    object by listing zero or more member names, separated by commas, in
    curly braces.  Only listed member names will be returned.  As a
    special case, the empty object filter `{}` returns all members.  A
    member name can be followed by a nested filter-spec to further
    filter the value the member with that name.  A common nested
    filter-spec can also be applied to several comma-separated member
    names by enclosing them in parentheses and writing the common
    filter-spec after the closing parenthesis.

    Similarly, a filter-spec can restrict the elements returned from an
    array by listing zero or more indices, separated by commas, in
    square brackets.  Only listed indices will be returned.  As a
    special case, the empty array filter `[]` returns all elements in an
    array.  An index can be a single unsigned integer or a range of
    indices written as a starting index, a colon, and an ending index.
    For example, range `10:20` would corresponds to indices 10 through
    20.  An index can be followed by a nested filter-spec to further
    filter the value of the element with that index.  A common nested
    filter-spec can also be applied to several comma-separated indices
    by enclosing them in parentheses and writing the common filter-spec
    after the closing parenthesis.

    ## Link Types

    The link type of a remote device determines the communication
    protocol that is used to talk to the device and the format of the
    address string.  Supported link-types are:

      * `ailux`: This link type can be used to read data from heat
        pump controllers manufactured by [Alpha
        Innotec](http://www.alpha-innotec.de/).  The address must be
        the hostname or IP address of the heat pump controller.  The
        data is fetched from TCP port 8088 of the controller.

      * `coap`: This link type can be used to read data from devices
        that support the
        [CoAP](https://en.wikipedia.org/wiki/Constrained_Application_Protocol)
        protocol.  The address must be the hostname or IP address of
        the device.  The data is fetched from UDP port 5683.

      * `ctrlbyweb`: This link type can be used to read data from
        devices manufactured by
        [ControlByWeb](https://www.controlbyweb.com/).  The address
        must be the hostname or IP address of the device.  An optional
        port number may be specified after a colon (`:`).  By default,
        port 80 is used. The data is fetched from the device with the
        HTTP protocol.

      * `modbus`: This link type can be used to read data from a
         [Modbus/TCP](https://modbus.org/docs/Modbus_Messaging_Implementation_Guide_V1_0b.pdf)
         device.  The address must have the format
         `map.unit@host:port`:

          * `map`: The name of the Modbus address map to use for the
            device (see
            [/sys/modbus/client/map](path:/sys/modbus/client/map) and
            [/config/modbus/client/map](path:/config/modbus/client/map)).
            If the Modbus device supports the [SunSpec
            standard](https://sunspec.org/), this can be `sunspec`
            instead.  With SunSpec, the meter can automatically detect
            the available Modbus registers.

          * `unit`: The Modbus unit number of the device (defaults to 255).

          * `host`: The hostname or IP address of the device.

          * `port`: The port number to use.  Defaults to the value of
            map option `default-tcp-port`, or port 502 if the option
            is not present.

          An example address is `sunspec.1@192.168.1.34` which would
          refer to a SunSpec-compatible device with unit number 1 and
          IP address `192.168.1.34`.

      * `po`: This link type can be used to read data from Aurora
        solar inverters manufactured by Power One.  The inverter's
        serial port must be connected to an RS485-to-Ethernet adapter
        such as the [Chiyu
        BF-430](https://www.chiyu-tech.com/product-bf430-serial-to-tcp-ip-converter-rs485-to-tcp-ip-converter.html).
        The default RS485 serial parameters used by the inverter are:
        19200 baud, 1 stop bit, no parity.  The address must have the
        format `devnum@addr:port`, where `devnum` is the inverter's
        serial address in the range from 2 to 254, `addr` is the host
        or IP address of the RS485-to-Ethernet adapter, and `port`
        is the port number of the adapter.

      * `rtcoa`: This link type can be used to read data from
        thermostats manufactured by [Radio Thermostat Company of
        America](https://www.radiothermostat.com/).  The address must
        be the hostname or IP address of the thermostat.  An optional
        port number may be specified after a colon (`:`).  By default,
        port 80 is used. The data is fetched from the device with the
        HTTP protocol.

      * `slowd`: This link type can be used to read data from various
        devices connected over a serial port.  The address must have
        the format `proto://devaddr`, where `proto` is the name of the
        communication protocol and `devaddr` is a device-address in a
        format that depends on the protocol.  The available protocols
        are:

          * `alphatechnics`: Implements a proprietary protocol for
            reading [AlphaTechnics
            5000](https://www.te.com/usa-en/plp/precision-thermometers/Y44qp.html)
            series precision thermometers.  These devices have a USB
            port which emulates a serial interface, so they can be
            plugged directly into EG4*xxx* meters.

            The serial port parameters default to 57600 baud, no
            parity, and one stop bit. `devaddr` must be a
            [serial-port](glossary:Serial-Ports) name and optional
            serial parameters.

            An example address is `alphatechnics://USB2` which would
            connect to the thermometer plugged into the meter's `USB2`
            port.

          * `modbus`: Implements the
             [Modbus/RTU](https://modbus.org/docs/Modbus_over_serial_line_V1_02.pdf)
             protocol which can connect two or more devices over
             RS485.  `devaddr` must have the format
             `modbus://map.unit@serdev` where:

               * `map`: The name of the Modbus address map to use for
               the device (see
               [/sys/modbus/client/map](path:/sys/modbus/client/map)
               and
               [/config/modbus/client/map](path:/config/modbus/client/map)).
               If the Modbus device supports the [SunSpec
               standard](https://sunspec.org/), this can be `sunspec`
               instead.  With SunSpec, the meter can automatically
               detect the available Modbus registers.

               * `unit`: The Modbus unit number of the device.  This
               defaults to the value of map option
               `default-modbus-addr` or 0 if the option is not
               present.

               * `serdev`: The [serial port](glossary:Serial-Ports)
               and optional serial parameters of the meter which is
               wired to the RS485 bus.  The serial parameters default
               to the values given by map option
               `default-serial-params` or 19200 baud, no parity and 1
               stop bit if the option is not present.  Alternatively,
               `serdev` may also have the format `host:port` where
               `host` is the hostname or IP address of an
               RS485-to-Ethernet adapter and `port` is an optional TCP
               port number.

              An example address is `modbus://sunspec.1@USB1` which
              would refer to a SunSpec-compatible device with unit
              number 1, connected to the meter via serial port `USB1`.

          * `po`: Implements the protocol used by older Power One
            Aurora inverters.  These inverters are no longer being
            manufactured and Power One has been acquired by
            [ABB](https://www.abb.com/).

            The inverters are connected via RS485.  The serial
            communication parameters are 19200 baud, 1 stop-bit, and
            no parity.  `devaddr` must have the format `num@addr`
            where `num` is the inverter's serial address in the range
            from 2 to 254 and `addr` is the name of the meter's
            serial-port that is wired to the RS485 bus.
            Alternatively, `addr` may also be the hostname or IP
            address of an RS485-to-Ethernet adapter that the bus is
            wired to.

          * `scpi`: Implements the
            [SCPI](https://en.wikipedia.org/wiki/Standard_Commands_for_Programmable_Instruments)
            (skippy) protocol.  `devaddr` must be a
            [serial-port](glossary:Serial-Ports) name and optional
            serial parameters or a hostname or IP-address of
            serial-to-Ethernet adapter to which the SCPI-compatible
            device is connected.

            The registers available to be read are automatically
            detected based on the result of SCPI command `*IDN?`
            (Identify).  Currently, only [eGauge
            PRM3](https://store.egauge.net/Power-Relay-Module) relay
            modules are recognized.

          * `sma`: Implements the SMA Data Communication protocol
            which is used by older inverters and weather stations
            manufactured by [SMA](https://www.sma.de/).  These devices
            are connected via RS485.  The serial communication
            parameters are 1200 baud, 1 stop-bit, and no parity.  The
            protocol automatically detects connected devices and the
            available registers.  However, since the bus operates at
            only 1200 baud, detection can take several minutes.

            `devaddr` must be the name of the meter's serial-port that
            is wired to the RS485 bus.  It may also be the hostname or
            IP address of an RS485-to-Ethernet adapter that the bus is
            wired to.

          * `sony`: Implements a proprietary protocol for reading
            certain Sony battery charge controllers (BMUs) over RS232.
            Specifically, specification P5-9 027, version 2 is
            supported.  The serial port parameters are fixed to 19200
            baud, even parity, and one stop bit.
            `devaddr` must have the format `sony://num@addr` where:

              * `num`: Is the number of the battery charge controller
                to read from.  It must be in the range from 0 to 15.

              * `addr`: Must be the hostname or IP address of the
                RS232-to-Ethernet adapter which the charge controller
                is connected to.

            An example address is `sony://1@192.168.1.34:10001` which
            would connect to battery charge controller 1 which is
            wired to the RS232-to-Ethernet adapter at IP address
            192.168.1.34, port 10001.

      * `tcp`: This link type can be used to read the data from
        another eGauge meter over the TCP protocol.  The address must
        be a hostname or IP address which may optionally followed by a
        vertical bar character (`|`) and a comma-separated list of
        options.  The available options are:

          * `async`: This option must be used if two or more eGauge
            meters read each other's data.  This causes a cyclic
            dependency which, without this option, would result in
            timeouts and the inability to read the remote meter's
            data.  To break the cycle, it is sufficient for one of the
            meters in the cycle to turn on this option.  The downside
            of turning on this option is that remote data will be
            recorded at the time it is received by the local meter,
            rather than the time when it was measured by the remote
            meter, as would normally be the case.

          * `sync`: This is enables the default synchronous read mode
            where remote data is recorded with the time that it was
            measured at by the remote meter.

          * `spiky`: This option affects how data is recorded after
            the remote meter is unavailable for a period of time.  By
            default, the local meter will smooth out any jumps
            (spikes) in the data that are due to the remote meter not
            being reachable.  Turning on this option disables the
            smoothing and instead records jumps as they occur.
            Normally, smoothing is preferable.  However, if a remote
            meter is frequently unreachable (10% or more of the time),
            the local meter will fall behind the remote meter data
            more and more and, in such a case, turning on this option
            would be advisable.

          The remote data is fetched via HTTP protocol (TCP port 80).
          It is not possible to specify authentication credentials.

          An example address is `eGauge1234.local|sync,spiky`.  This
          would connect to the remote meter with hostname
          `eGauge1234.local` using the `sync` and `spiky` options.

      * `tempalert`: This link type can be used to read data from
        temperature sensors manufactured by Temperature Alert (no
        longer in business).  The address must be the hostname or IP
        address of the sensor.  The data is fetched from port 80 of
        the device with the HTTP protocol.

      * `udp`: This link type can be used to read the data from
        another eGauge meter over a proprietary UDP protocol.  As
        such, it provides the same functionality as `tcp`, but since
        it runs over UDP, it is a lighter-weight, more efficient
        protocol.  The data is read from UDP port 59046.  The address
        syntax and available options are the same as for link type
        `tcp`.

    ## Lua Scripts

    In addition to [eScript](glossary:eScript), the meter firmware also
    supports the more powerful [Lua](https://www.lua.org/manual/5.3/)
    language.  All eScript functions can be called directly from Lua.
    Conversely, eScript may also call Lua functions as long as they
    use only numbers as arguments and return a single number as a
    result.

    ## Max-Depth
    The `max-depth` parameter can be specified to limit
    the depth to which a response object or array is output.  When the
    depth-limit is reached, only a list of member names is returned for
    objects and only the length is returned for arrays.

    For example, if the full result object were:

      > `{"obj": {"a": ..., "b": ...}, "arr": [1, 2, 3, 4]}`

    then this restricted to `max-depth=2` would return:

      > `{"obj": ["a", "b"], "arr": 4}`

    That is, the value of `obj` was replaced by the list of the
    object's member names and the value of array `arr` was replaced by
    its length.

    ## Non-Transactional Updates

    When a modification request to a resource is not executed
    transactionally, it means that it may be possible to observe the
    modification of that resource before or after modifications to the
    other resources being updated within the same request.  It is also
    possible for the modification to take effect even though the
    overall request may end up failing with an error.

    ## Password Hashes

    Passwords are never written directly to this API.  Instead, only
    hashes are written which are derived from the user name, realm,
    and password.  Specifically, the hash is calculated as the
    [MD5](https://en.wikipedia.org/wiki/MD5) sum over the string
    obtained when concatenating the user name, the realm, and the
    password while using colons as field-separators.  For example, the
    hash of user name `jane`, realm `domain`, and password `secret`,
    would be:

      > MD5("jane:domain:secret") = 251910de04f5eab86859939167d4fded

    ## Physical Register Names

    Physical register names may not be empty, contain control
    characters, dots (`.`), or commas (`,`).  They may also not
    consist entirely of digits.

    Register names of locally calculated registers (registers with
    [`dev`](path:/config/register/physical/{reg}/dev) set to `local`)
    attach special meaning to the last character (suffix):

      * `+`: Allowed only for power-registers ([type
        code](glossary:Type-Codes) `P`).  Only positive power will be
        accumulated.

      * `-`: Allowed only for power-registers ([type
        code](glossary:Type-Codes) `P`).  Only negative measured
        power will be accumulated.

      * `|`: Allowed only for power-registers ([type
        code](glossary:Type-Codes) `P`).  The absolute value of the
        measured power will be accumulated.

      * `*`: Allowed only and required for apparent-power registers
        ([type code](glossary:Type-Codes) `S`).

      These suffixes are not allowed for registers whose value is
      calculated by an [eScript](glossary:eScript) expression.

      If the name of a locally calculated power register does not end
      with one of the above suffixes, the measured net real power is
      accumulated.  Net real power may be positive or negative,
      depending on the direction of the power flow.

    ## Serial Ports

    A serial port may be specified either as a device name or as a USB
    path.  A device name must have the format `/dev/ttyUSBn`, where
    `n` is a non-negative integer.  A USB path must have the format
    `USBpath` where `path` is a sequence of one or more non-negative
    integers, separated by dots (`.`). Resource
    [/sys/dev/serial](path:/sys/dev/serial) returns a list of serial
    ports detected by the meter.

    A serial port string may optionally also specify serial
    parameters.  The parameters must follow the device name and have
    the format `:b/8ps` where `b` is the baud rate (positive integer),
    `8` is the number of bits per character (must be 8), `p` is the
    parity (`n` for none, `e` for even, `o` for odd), and `s` is the
    number of stop bits (1 or 2).

    ## Service Activation

    WebAPI provides an automatic mechanism to setup communication
    between a meter and a service provider (web server).  The
    resulting communication path can be used, for example, to send
    register data ("push data") or alerts to the service provider.

    The setup mechanism is called *service activation* and is
    initiated by posting a request to end-point
    [/cmd/activate](op:/cmd:cmdActivate).  The command, in turn,
    executes the follow steps:

      1) Meter sends an activation request to a URL defined by the
      service provider.  This URL is called the *control URL*.

      1) The service provider may respond with an error, a
      challenge, or a service URL.  If an error is returned, service
      activation has failed and an error response is returned.  If a
      challenge is returned, execution resumes with step 3 below.  If
      a service URL is returned, execution resumes with step 4.

      1) Given a challenge response, the meter decrypts the challenge
      using a private key and sends the result to the service
      provider.  The service provider checks if the result is valid
      and, if so, responds with a service URL.  Otherwise, it responds
      with an error and service activation has failed.

      1) The meter extracts the service URL from the service
      provider's response and starts sending data to that URL.  With
      this, service activation has completed sucessfully.

    Once activated, the meter will send data to the service URL as
    needed (e.g., periodically for push data or when an alert occurs
    for the alert service).  This stops if a post to the service URL
    returns HTTP status code 418 (I'm a teapot) or if the meter gets
    reconfigured to deactivate the service.

    The details of the above steps are described below.

    ### Activation Request to Control URL

    The activation request the meter sends to the control URL is a
    `POST` request with a JSON-body containing the following members:

      * `name` (required): The [hostname](path:/config/net/hostname)
      of the meter.

      * `sn` (required): The [serial-number](path:/sys/sn) of the
      meter.

      * `opts`: If present, this is an array of strings specifying the
      service options that are understood by the meter for the service
      being activated.  If not present, the service provider must
      assume that the meter does not understand any service options.

    Additional members may be present in the posted object.  If so,
    the service provider must ignore any members whose meaning it does
    not understand.

    #### Example Activation Request

    A typical activation request body is shown below (formatted for
    readability):

      ```json
      {
        "name": "Test1234",
        "sn": "G13456789",
        "opts": ["gzip", "json", "secure"]
      }
      ```

    ### Challenge Response

    A service provider may choose to return a challenge response to
    ascertain that the activation request was actually sent by the
    meter identified in the request.  If the service provider does not
    require authentication, it can skip to directly returning a
    service URL response (see below).

    A challenge response consists of a JSON-object with the following
    members:

      * `nnc` (required): The server nonce.  This must be a string
      consisting entirely of lowercase hexadecimal digits (0-9, or
      a-f).  The server creates this nonce by:

        1) generating a sequence of cryptographically random bytes,

        1) encrypting the sequence with the meter's public key, and, finally,

        1) converting the encrypted sequence to a hexadecimal string.

      * `rid` (required): A non-negative integer that uniquely identifies
      this service activation request.

    Additional members may be present in the returned object.  If so,
    the meter will ignore any members whose meaning it does not
    understand.

    Once the meter receives a challenge response, it:

      1) decrypts the server nonce using its private key and
      converting the resulting byte sequence to a lowercase hex string
      - we will call this `rnd`,

      1) creates a cryptographically strong random hexadecimal string
      which we'll call `cnnc` (client nonce),

      1) calculates the MD5 hash of the string obtained by
      concatenating `rnd`, a colon (`:`), and `cnnc`.

      1) sends a post request to the control URL whose body is a
      JSON object with the following members:

      * `cnnc` (required): The client nonce.

      * `hash` (required): The calculated MD5 hash as a hexadecimal
        string.

      * `rid` (required): A copy of the `rid` member as received in
      the challenge response.

    When the service provider receives the post request, it can check
    whether the meter is authentic by calculating the MD5 sum of the
    concatenation of the server's random hexadecimal string `rnd`, a
    colon, and the client nonce and confirming that it matches the
    value of `hash` in the posted JSON object.  If there is a
    mismatch, service activation has failed and the provider returns
    an error response.

    #### Example of Challenge Response and Resulting Meter Request

    A typical challenge response is shown below (formatted for
    readability and `nnc` shortened with an ellipsis):

      ```json
      {
        "nnc": "76e75...9fbc",
        "rid": 4102166033
      }
      ```

    In return to this challenge, the meter would then send a post
    request to the control URL with a body that might look like this:

      ```json
      {
        "cnnc": "565ce9541eddec103347b5174704e188",
        "hash": "ce5e308c27da651964de14f65bd8b059",
        "rid": 4102166033
      }
      ```

    If the authentication is successful, the service provider responds
    with a service URL response.

    ### Service URL Response

    Upon successful service activation, the provider returns a
    response body containing a JSON object with the following
    members:

      1) `url` (required): The service URL to which the service's data
      should be sent.

      1) `options`: The service options to use.  This must be a string
      containing a comma-separated list of option names.  Certain
      options may require a value.  For those, the option name must be
      followed immediately by an equal sign (`=`) and the option value
      (no whitespace is allowed).

      1) `pw`: If specified, the password to use when sending the post
      request to the service URL.

      1) `user`: If specified, the username to use when sending the
      post request to the service URL.  The username and password are
      sent using an [HTTP basic authentication
      header](https://datatracker.ietf.org/doc/html/rfc7617).  For
      security reasons, this should only be used over secure (`https`)
      connections.

    Additional members may be present in the returned object.  If so,
    the meter will ignore any members whose meaning it does not
    understand.

    #### Example Service URL Response

    ```json
    {
      "url": "https://provider.com/alert/post/a08b44098",
      "options": "json,gzip,min_prio=7"
    }
    ```

    ### Error Response

    If service activation fails, HTTP status 200 must be returned with
    a response body which contains member `error`.  The value of
    `error` must be a string explaining why service activation failed.
    The string is typically in the locale of the service provider.

    The returned JSON object may contain additional members which the
    meter must ignore.

    ## Time Expressions

    A time expression defines a single point in time.  An absolute
    time expression is a number, a time-point name, or a function
    call.  A number is interpreted as a [Unix
    timestamp](glossary:Unix-Timestamp).  Time-point names are
    described [here](glossary:Time-Point-Names).  A function call
    consists of a name, immediately followed by a time expression in
    parentheses.  The following supported function names and their
    meaning are as follows:

      * `soy(t)`: Returns the timestamp of the start of the year in
        which `t` falls.

      * `soq(t)`: Returns the timestamp of the start of the quarter in
        which `t` falls.

      * `sob(t)`: Returns the timestamp of the start of the billing
      cycle in which `t` falls.  [Server-storage](path:/store)
      variable `global/billing/start_day` establishes the day of the
      month a new billing period starts.  If that day is greater than
      the number of days in the current month, the last day of that
      month is taken as the start of the billing period.  The new
      billing cycle is assumed to start at 12pm on the billing day
      (meter-local time).

      * `som(t)`: Returns the timestamp of the start of the month in
        which time `t` falls.

      * `sow(t)`: Returns the timestamp of the start of the week in
      which `t` falls.  Monday is considered to be the start of
      the week.

      * `sod(t)`: Returns the timestamp of the start of the day in
        which `t` falls.

      * `soh(t)`: Returns the timestamp of the start of the hour in
        which `t` falls.

      * `soQ(t)`: Returns the timestamp of the start of the quarter
        hour in which `t` falls.

      * `soM(t)`: Returns the timestamp of the start of the minute in
        which `t` falls.

      * `sos(t)`: Returns the timestamp of the start of the second in
        which `t` falls.

    An absolute time expression may be followed by one or more offsets
    that are added to or subtracted from the value of the absolute
    time expression.  Each offset starts with a plus or minus sign, an
    integer number, and an optional unit.  Without a unit, the
    specified number may contain a fractional part and indicates the
    number of seconds to be added/subtracted.  Otherwise, the unit may
    be one of:

      * `y`: years
      * `q`: quarters
      * `b`: billing-cycles
      * `m`: months
      * `w`: weeks
      * `d`: days
      * `h`: hours
      * `Q`: quarter-hours
      * `M`: minutes

    For an offset with a unit, the specified number of time periods
    are added to/subtracted from the timestamp.  For example,
    `som(now)+1d-1h` would return the start of the last hour of the
    first day of the current month as `som(now)` returns the start of
    the current month, `+1d` would add one day to that, and `-1h`
    would subtract 1 hour from the result.

    Due to irregularities in the Gregorian calendar, normal rules of
    addition do not apply and the order in which the offsets are
    applied is significant.  When adding/subtracting months or
    billing-cycles, the operations ensures that the final date is
    valid.  For example, adding `1m` to January 31st would yield the
    last day of February, which would be either February 28th or 29th,
    depending on whether or not the year is a leap-year.

    ### Formal Definition

    The full syntax for a time expression is given in EBNF syntax below:

      > *TIME* = *ABSOLUTE* {("+" | "-")*OFFSET*} . \
      > *ABSOLUTE* = *UNIX_TS* | *POINT_NAME* | *FCALL* . \
      > *UNIX_TS* = ["+"|"-"] *SECONDS* . \
      > *FCALL* = *FNAME* "(" *TIME* ")" . \
      > *FNAME* = "soy" | "soq" | "sob" | "som" | "sow" | "sod" | "soh" | "soQ" | "soM" . \
      > *POINT_NAME* = "now" | "epoch" | *FNAME* . \
      > *OFFSET* = (*UNSIGNED_INTEGER* *UNIT*) | *SECONDS*. \
      > *UNIT* = "y" | "q" | "b" | "m" | "w" | "d" | "h" | "Q" | "M". \
      > *SECONDS* = *UNSIGNED_INTEGER* ["." *UNSIGNED_INTEGER*] .

    A time point name that consists of a function name which is not
    immediately followed by a left parenthesis is interpreted as if
    the function of the same name had been called on the current time
    (`now`).  For example, `sod` is equivalent to `sod(now)`.

    ## Time Point Names

    Time-point names provide a way to refer to both absolute points in
    time as well as times relative to the current time.  Specifically:

      * `now`: The most recent time for which the meter has collected
      data.

      * `epoch`: The time at which the meter started recording data.
      That is, the oldest time for which the database will return
      data.  This time is user configurable via
      [/config/db/epoch](path:/config/db/epoch).

      * `soy`: Short for [`soy(now)`](glossary:Time-Expressions).

      * `soq`: Short for [`soq(now)`](glossary:Time-Expressions).

      * `sob`: Short for [`sob(now)`](glossary:Time-Expressions).

      * `som`: Short for [`som(now)`](glossary:Time-Expressions).

      * `sow`: Short for [`sow(now)`](glossary:Time-Expressions).

      * `sod`: Short for [`sod(now)`](glossary:Time-Expressions).

      * `soh`: Short for [`soh(now)`](glossary:Time-Expressions).

      * `soQ`: Short for [`soQ(now)`](glossary:Time-Expressions).

      * `soM`: Short for [`soM(now)`](glossary:Time-Expressions).


    ## Time Ranges

    A time range is an ordered series of [Unix
    timestamps](glossary:Unix-Timestamp) which are spaced out at a
    certain interval between two points in time.  Time ranges are
    written as three decimal numbers, separated by colons:
    `start:step:stop`, where `start` is the oldest timestamp, `step`
    is the interval between timestamps, and `stop` is the youngest
    timestamp.  For example, `100:1:103` would correspond to the
    timestamp series `[100, 101, 102, 103]`.  If `step` and the
    subsequent colon are left out, the interval defaults to one
    second.  If `step` is an empty string, the range consists of only
    the start and end timestamps.  For example, `100::103` would
    correspond to `[100, 103]`.  If the timerange consists of only a
    single number, it is interpreted as a singleton consisting of only
    the specified time.

    The timestamps are generated from `youngest` to `oldest`.  Thus, if
    the oldest timestamp is not an integer-multiple of `step` apart
    from `youngest`, then the oldest timestamp will not be in the
    series of generated timestamps.

    In general, `start` and `stop` can be not just Unix timestamps
    but arbitrary [time expressions](glossary:Time-Expressions).

    Similarly, the time step may also be expressed as an integer count
    followed by a unit character.  The available units are the same as
    for offsets in time expressions.  For example, `1d` would step
    through the time range one day at a time, taking daylight savings
    into account (assuming the correct
    [timezone](path:/config/time/zone) is set on the meter).

    As a complete example, the time range `som:1d:sod` would generate
    the timestamps that correspond to midnight each day of the current
    month to date. `sod` is the start (midnight) of today and from
    there, the timestamps step back one day at a time until `som`, the
    start of the month is reached.

    When a time range is used to select rows from the database, the
    resulting timestamps may not align with the timestamps of the rows
    stored in the database.  When this happens, the meter will, by
    default, round down the specified timestamp to that of the nearest
    older row.  However, if the starting or ending timestamp starts
    with a plus sign (`+`), the meter will instead round the timestamp
    up to that of the nearest younger row.

    ### Formal Definition

    The full syntax for a time range is given in EBNF syntax below:

      > *TIME_RANGE* = [*FROM* ":" [[*STEP*] ":"]]*TO* . \
      > *FROM* = *TIME_WITH_ROUNDING* . \
      > *TO* = *TIME_WITH_ROUNDING* . \
      > *STEP* = *OFFSET* . \
      > *TIME_WITH_ROUNDING* = ["+"]*TIME* .

    See section [Time Expressions](glossary:Time-Expressions) for
    definitions of *OFFSET* and *TIME*.

    ## Type Codes

    Each register records values in a physical unit indicated by a
    type code.  Apart from the physical unit, the type code also
    defines the quantum with which a value is recorded in the
    database.

    To understand the role of the quantum, you need to know that the
    database stores all values as signed 64-bit integer numbers.  For
    all type codes except `d` (discrete numbers), the meter
    accumulates values before storing them in the database.  Let us
    see how this is done for a sensor that measures a voltage.  If we
    look up type code `V` in the table below, we see that the quantum
    _q_ for a voltage is 0.001.  Now, suppose the voltage _v_ of a
    sensor was measured to be 120V on average over a measurement
    interval _dt_ of one second and that the previous accumulated
    value of that sensor was _c0_.  The meter would then calculate the
    new accumulated value _c1_ as:

      > _c1_ = _c0_ + round(_v_ / _quantum_)Â·_dt_

    or

      > _c1_ = _c0_ + round(120V / 0.001)Â·1s = _c0_ + 120000 VÂ·s

    This new accumulated value is then stored in the database.  In
    other words, for every second where the average voltage is 120V,
    the value stored in the database would increase by 120000.  This
    also shows that the accumulated values stored in the database have
    a unit that is the rate unit multiplied by seconds.  For volts,
    that turns into volt-seconds.  Similarly, power in watts would be
    recorded as watt-seconds (or joules), and speed in
    meters-per-second would be recorded as meters.

    Note that an accumulated value may eventually overflow if the
    measured rate has predominantly the same sign for a very long
    period of time.  If that were to happen, the value would wrap
    around from a large positive value to a large negative value or
    vice versa.  The quanta have been selected such that under normal
    circumstances, wrap-arounds will not occur within the lifetime of
    a meter.  Nevertheless, when calculating how much an accumulated
    value changed between two points in time, we recommend calculating
    that difference modulo 2<sup>63</sup> since that will give the
    correct result provided at most one wrap-around occurred between
    the two points in time.

    Discrete numbers (type code `d`) are unit-less and are used to
    record discrete states (such as error states or bitsets).  Such
    quantities cannot be averaged and hence they are not accumulated.
    Instead, they are stored directly as signed 64-bit integers in the
    database.

    | Type code | Physical quantity       |   Rate unit   | Quantum |
    | :-------: | ----------------------- | ------------: | ------- |
    | `#`   | Whole number                |               |       1 |
    | `#3`  | Number with 3 decimal places|               |   0.001 |
    | `%`   | Percentage                  |   %           |   0.001 |
    | `$`   | Monetary accrual rate       |${currency}/s  |2<sup>-29</sup>|
    | `a`   | Angle                       |   Â°           |   0.001 |
    | `aq`  | Air quality index (0=good, 500=bad)|s       |   0.001 |
    | `d`   | Discrete number             |               |       1 |
    | `Ee`  | Irradiance                  |W/m<sup>2</sup>|     1 |
    | `F`   | Frequency                   |  Hz           |   0.001 |
    | `h`   | Relative humidity           |   %           |   0.001 |
    | `I`   | Electrical current          |   A           |   0.001 |
    | `m`   | Mass                        |   g           |   0.001 |
    | `P`   | Power                       |   W           |       1 |
    | `Pa`  | Pressure                    |  Pa           |       1 |
    | `ppm` | Parts per million           | ppm           |   0.001 |
    | `var` | Reactive power              | var           |       1 |
    | `Q`   | Mass flow                   | g/s           |       1 |
    | `Qe`  | Electric charge             |  Ah           |   0.001 |
    | `Qv`  | Volumetric flow             |m<sup>3</sup>/s|10<sup>-9</sup>|
    | `R`   | Electric resistance         |   Î©           |       1 |
    | `S`   | Apparent power              |  VA           |       1 |
    | `T`   | Temperature                 |  Â°C           |   0.001 |
    | `THD` | Total harmonic distortion   |   %           |   0.001 |
    | `V`   | Voltage                     |   V           |   0.001 |
    | `v`   | Speed                       | m/s           |   0.001 |

    **Note** For the monetary unit, `${currency}` should be replaced
    by the the currency symbol applicable to the region the meter is
    installed in.  The builtin user interface of the meter uses the
    value of [server-storage](path:/store) variable
    `global/default/currency_symbol` for this purpose or, if
    undefined, a dollar sign (`$`).

    ## Unix Timestamp

    A Unix timestamp is a number that counts the seconds since the
    start of January 1, 1970 UTC.

    ## User Privileges

    Users may have the one or more of the following privileges:

      * `unlimited_save`: The user may change (save) the meter
        configuration.

      * `local_save`: The user may change (save) the meter
        configuration but only when connected over a local network
        connection. LAN-connections are considered local if the user's
        browser is on the same subnet as the meter. Bluetooth
        connections are always considered local. All other connections
        (e.g., via proxy server) are considered not local.

      * `view_settings`: The user may view the meter configuration.
        Without this privilege, the user only has access to
        configuration settings that are directly related to the user.

      * `ctrl`: The user may issue control operations such as putting
        a device in a particular operational state (e.g., opening or
        closing a relay or setting the temperature on a thermostat).

      * `restricted_view`: The user only has restricted access to the
        meter data. Specifically, the user may only view registers in
        the [view](glossary:View-Names) that matches the user
        name.

      While access to the device is generally governed by these
      privileges, there are two exceptions:

        * Users without `view_settings` privilege may still read their
          own user configuration (but not that of any other user).

        * Users without `save` privilege (`unlimited_save` or
          `local_save`) may still change their own password.

    ## View Names

    Views are used to group related registers.  For example, if a
    single meter measures multiple apartments, a separate view could
    be defined for each apartment.  A user-interface can then offer to
    display all measurements for a particular apartment by selecting
    the desired apartment's view name.  Similarly, users can be setup
    so that they may access only a particular view.  That way, views
    can be used to ensure, for example, that each apartment tenant can
    only view their own data.

    In this API, view names are defined as part of a register name.
    Specifically, the view name is written as prefix of the register
    name, followed by a dot.  For example, the string `apt1.cooktop`
    defines register `cooktop` as being part of view `apt1`.

    ## Virtual Register Formulas

    The values of virtual registers are calculated based on the values
    of physical registers.  The formulas for these calculations are
    limited to addition and subtraction.  When expressed as a JSON
    string, virtual register formulas are written as a sequence of
    register names which are prefixed either by a plus sign (`+`) to
    indicate addition or by a minus sign (`-`) to indicate
    subtraction.  The register names are enclosed in double-quotes.
    Within a register name, a double-quote character can be included
    by prefixing it with a backslash character: `\"`.  Likewise, to
    include a literal backslash character in the name, it must be
    doubled up and written as `\\`.

    As an example, the formula:

    ```json
    +"Panel \"A\""+"Solar+"-"EV"
    ```

    would calculate the virtual register value by adding the values of
    registers `Panel "A"` and `Solar+` and then subtracting the value
    of register `EV`.

    **Note**

    Old meters may still use deprecated operators in virtual register
    formulas.  The syntax for these operators is `op(reg,n)` where
    `op` is either `MIN` or `MAX` (case-sensitive), `reg` is a
    register name, and `n` is an integer constant (usually 0).  These
    operators are deprecated because they only work correctly when the
    formula is applied to rates, not when applied to accumulated
    register values.  When applied to rates, these operators should
    work as follows:

      * `MAX(reg,n)`: Returns the value of register `reg` if it is
      greater than `n` or `n` otherwise.

      * `MIN(reg,n)`: Returns the value of register `reg` if it is
      less than `n` or `n` otherwise.
